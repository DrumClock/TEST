[gcode_macro TEST_CAR]
gcode: 
 {% set user_vars = printer["gcode_macro VARIABLE"] %}

 {% set ns=namespace(act_carriage=0) %}

    {% for index in user_vars.toolhead %}  
      {% if printer.toolhead.extruder in user_vars.toolhead[index] %}
        {% set ns.act_carriage = index %}    
      {% endif %}
    {% endfor %}    
    
   {action_respond_info("carriage = %s " %  ns.act_carriage)}   

# ------------------------------------------------

[gcode_macro TEST_STEPPER]
gcode: 
   {% set user_vars = printer["gcode_macro VARIABLE"] %}

   {% set start = params.START|int %}
   {% set stop = params.STOP|int %}
   {% set step = ((stop - start)/50)|int %}


   ACTIVATE_EXTRUDER EXTRUDER=extruder
  {% set ns = namespace(step=step , feed=start) %}
  
  {% for nr in range(0, ns.step )  %} 
     G1 E40 F{ns.feed}
     RESPOND MSG="feed":{ns.feed}  
     {% set ns.feed = ns.feed + 50 %} 
  {% endfor %}     


 ACTIVATE_EXTRUDER EXTRUDER=extruder2
   {% set step2 = ((stop*2 - start*2)/50)|int %}
   {% set ns.feed = start*2 %} 

  {% for nr in range(0, step2 )  %} 
     G1 E40 F{ns.feed}
     RESPOND MSG="feed":{ns.feed}  
     {% set ns.feed = ns.feed + 50 %} 
  {% endfor %}     

 ACTIVATE_EXTRUDER EXTRUDER=extruder


  #   {action_respond_info("tool=%s" % user_vars.tool)}
  #   {action_respond_info("print mode=%s" % user_vars.print_mode)}
  #   {action_respond_info("%s = %s" % ( 'filament sensor', user_vars.filament_sensor )) } 

  #-----------------

# {% set mode = True if params.WAIT|default(false)|lower == "true" else False  %}   
  
#    {% if mode  %}
#        {% set wait = " True" %}

#    {% elif not mode %}    
#           {% set wait = "not True" %}

#     {% endif %}     
     
#     {action_respond_info(" if run mode = %s" % wait )}

#  ---------------
# {% set user_vars = printer["gcode_macro VARIABLE"] %} 
#  {% set name = "temp_sensor" %}    # name variable
#  {% set init = { } %}     # default preset   
 
# {% for object in printer.configfile.config|sort %}
#    {% if 'temperature_sensor' is in object %}  
#      {% if init.index is not defined %}             
#       {% set _dummy = init.update( {'index': [ ]} ) %}
#      {% endif %}     
#     {% set _dummy = init.index.append(object.split(' ')[1]) %}     
#    {% endif %}
#  {% endfor %}  
 
#     {action_respond_info("temp_sensor = %s" % init )}

#  ---------------
  
 # tool= {0:'extruder', 1:'extruder1', 2:'extruder2', 3:'extruder3'}

 # {action_respond_info("%s" % user_vars.tool|length)}

 # {action_respond_info("heaters = %s" % printer.heaters.available_heaters|length )}

  # {action_respond_info("count = %s" % printer.heaters.available_heaters.count('extruder') )}


 ### init defautl T for extruder
#  {% set tool = {} %}
#  {% set ns = namespace(count=0|int) %}
 
#  {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
#    {% if 'extruder' in tool %}  
#      {% set tool_nr = tool.lstrip("extruder") if tool.lstrip("extruder")|length != 0 else 0 %}
#      {% set _dummy = tool.update({tool_nr|int: tool}) %} 
#      {% set ns.count = ns.count + 1 %}
#    {% endif %}
#   {% endfor %}

#  {% set _dummy = tool.update({'count': ns.count }) %}
#  {% set _dummy = tool.update({'tool': 'extruder' }) %}

# {action_respond_info("tool = %s" % tool)}


 # {% set default_extruder = user_vars.tool %}   
 # {% if user_vars.tool.count < (params.T|int) + 1 %}
 #   {action_respond_info("The G-code T%s is not defined for extruder." % params.T)} 
 # {% else %}   
 #   {% set _dummy = default_extruder.update( {'tool': user_vars.tool[params.T|int] }) %}     
 # {% endif %} 
 #    SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=tool VALUE="{default_extruder}" 
 #    {action_respond_info("= %s" % user_vars.tool )}

#############################################################################################

[gcode_macro _CPU_TIME]
gcode: 

 {% set time = printer['system_stats'].cputime %}
 {action_respond_info("CPU time = %s " % time )}   

#############################################################################################

[gcode_macro TEST_VAR]
gcode:

    {% set count =  4 %}  
    {% set var = {0:0.2, 1:0.4, 2:0.6, 3:0.8} %}
   
    {% for nr in range(0, count|int )  %} 
       {action_respond_info("var_%s = %s" % (nr,var[nr]))}  
    {% endfor %}      

    #{% set var_0 = 0.2 %}  
    #{% set var_1 = 0.4 %}  
    #{% set var_2 = 0.6 %}  
    #{% set var_3 = 0.8 %}
      
    #{% for nr in range(0, count|int )  %} 
       # {% set variable =( "%s%s" % ('var_',nr) ) %} 
       # {% set variable = "var_" + nr|string %} 
         #{action_respond_info("var_%s = %s" % (nr,variable))}  
    #  {action_respond_info("var_%s = %s" % (nr,var[nr]))}  
   # {% endfor %}      

# ('stepper_'+axis)
# printer['virtual_sdcard'].is_active = False

###########################################################################################

[gcode_macro TEST_CARRIAGE_TOOL]
gcode:

 {% set user_vars = printer["gcode_macro VARIABLE"] %}
  ## user_vars.toolhead = { 0: ['extruder','extruder1'], 1: ['extruder2','extruder3'] }  
 
  {% set carriage_0_tool_0   =   user_vars.toolhead.0[0]   %}     # carriage 0 / tool 0  > 'extruder' 
  {% set carriage_0_tool_1   =   user_vars.toolhead.0[1]   %}     # carriage 0 / tool 1  > 'extruder1'  

  {% set carriage_1_tool_0   =   user_vars.toolhead.1[0]   %}     # carriage 1 / tool 0  > 'extruder2 
  {% set carriage_1_tool_1   =   user_vars.toolhead.1[1]   %}     # carriage 1 / tool 1  > 'extruder3'  
   
  {action_respond_info("carriage 1 \n tool 0: %s \n tool 1: %s " % (carriage_1_tool_0,carriage_1_tool_1)) }
  {action_respond_info("carriage 0 \n tool 0: %s \n tool 1: %s " % (carriage_0_tool_0,carriage_0_tool_1)) }
  {action_respond_info("toolhead = %s" %  user_vars.toolhead)}


###########################################################################################
[gcode_macro TEST_RESPOND]
gcode:
   {% set user_vars = printer["gcode_macro VARIABLE"] %}

   {% set test = 'suCcesS' %}
     RESPOND PREFIX={test} COLOR={test} TYPE=command MSG="1.     set PREFIX="{test}""
     RESPOND PREFIX={test|capitalize} COLOR={test} TYPE=command MSG="1.     set PREFIX="{test}"|capitalize"
     RESPOND PREFIX={test|upper} COLOR={test} TYPE=command MSG="1.     set PREFIX="{test}"|upper"
     RESPOND PREFIX={test|lower} COLOR={test} TYPE=command MSG="1.     set PREFIX="{test}"|lower"

    {% set msg = ("2. toolhead = %s" % (user_vars.toolhead)) %}  
    { action_respond_info(msg) }
     RESPOND COLOR=info TYPE=command MSG="{msg}"
 
    { action_respond_info("3. toolhead = %s" % (user_vars.toolhead)) } 
    RESPOND COLOR=info TYPE=command MSG="{"3. toolhead = %s" % (user_vars.toolhead)}"

   {% set colors = ('primary', 'secondary', 'accent', 'info', 'success', 'error', 'warning') %}

   {% for test in colors %}
      RESPOND COLOR={test} TYPE=command MSG="4.  This is set COLOR="{test}
   {% endfor %} 


###########################################################################################

# This macro extend the original Klipper RESPOND command by adding a COLOR parameter.
# The COLOR parameter adds a css class on the MSG content. Those css classes are already available on Mainsail.
# This has been designed to work on Mainsail but it should work on Fluidd as well.

[gcode_macro RESPOND]
rename_existing: BASE_RESPOND
gcode:
  {% set colors = ('primary', 'secondary', 'accent', 'info', 'success', 'error', 'warning') %}

  {% if params.PREFIX is defined %}
    {% set prefix = 'PREFIX=' + params.PREFIX|string %}
  {% endif %}

  {% if params.TYPE is defined %}
      {% if params.TYPE in ('echo', 'echo_no_space', 'command', 'error') and params.TYPE != '' %}    
          {% set type = 'TYPE=' + params.TYPE|string %}
      {% else %}
          BASE_RESPOND TYPE=error MSG="RESPOND TYPE '{params.TYPE}' is invalid. Must be one of 'echo', 'command' or 'error'"
      {% endif %}
  {% endif %}
        
  {% if params.MSG is defined %}   
    {% set msg = 'MSG="'+ params.MSG + '"'|string %}
  {% endif %}

  {% if params.COLOR is defined %}
      {% set color = params.COLOR|lower %}

      {% if color in colors %}
          {% set msg = 'MSG="<span class=' + color + '--text>' + params.MSG + '</span>"'|string %}
  
      {% else %}
          BASE_RESPOND TYPE=error MSG="RESPOND COLOR '{color}' is invalid. Must be one of 'primary', 'secondary', 'accent', 'info', 'success', 'warning' or 'error'"
      {% endif %}
       
  {% endif %}
  BASE_RESPOND {prefix} {type} {msg}

##########################################################################


[gcode_macro _TEST_2]
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %}                             
  # {action_respond_info("TEST: \n  = %s " % (tool))}      

#       {action_respond_info("carriage 1 tool 3 = %s " %  user_vars.toolhead[1][1])}  ; carriage 1 - tool 3
#       {action_respond_info("carriage 1 tool 2 = %s " %  user_vars.toolhead[1][0])}  ; carriage 1 - tool 2
#       {action_respond_info("carriage 0 tool 1 = %s " %  user_vars.toolhead[0][1])}  ; carriage 0 - tool 1
#       {action_respond_info("carriage 0 tool 0 = %s " %  user_vars.toolhead[0][0])}  ; carriage 0 - tool 0

       {action_respond_info("variable_toolhead : %s " %  user_vars.toolhead)}
       {action_respond_info(" %s tools on %s carriages" %  (user_vars.toolhead[0]|length + user_vars.toolhead[1]|length, user_vars.toolhead|length ))}  ; tools on carriages
    

      {% set target_tool = params.T|default(0)|int %}
    ### define tool for G-code Txx
      {% set tool_name = user_vars.tool[target_tool]|string %}
      {% set tool_nr = tool_name.lstrip("extruder")|int if tool_name.lstrip("extruder")|length != 0 else 0 %}   

#>>>>>>

     {% set ns = namespace(carriage) %}
     {% for carriage in user_vars.toolhead %}         
         {% for extruder in user_vars.toolhead[carriage] %}
           {% if extruder == tool_name %}
                {% set ns.carriage = carriage %}  
              # {action_respond_info("fot %s is default carriage %s " % (tool_name, carriage))}
           {% endif %}
         {% endfor %}
     {% endfor %}

     # {% set default_carriage = ns.carriage|int %}  


    #{% if tool_name in user_vars.toolhead[0] %} 
   #    {% set default_carriage = 0 %} 
  #  {% else %}
   #    {% set default_carriage = 1 %} 
 #   {% endif %}

      {% set default_carriage = 0 if tool_name in user_vars.toolhead[0] else 1 %}

#>>>>>>  
     {action_respond_info("tool_name: %s \n tool_nr: %s \n default_carriage: %s" % (tool_name,tool_nr,default_carriage))} 
      

###########################################################################################
###########################################################################################
###########################################################################################
