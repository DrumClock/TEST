# This file contains a configuration snippet for EXTRUDER PRINT MODES.
#

#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_print_mode: { }     

# e.g. print_mode =  { 'active': 1 , 'retract':1,  'extrude':2, 'endless_spool: False  }          

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _INIT_SET_PRINT_MODE]  
gcode:

    {% set user_vars = printer["gcode_macro VARIABLE"] %} 

    ### init defautl variable
      {% set name = "print_mode" %}    # name variable
       {% set init = { } %}     # default preset   
       
       {% set _dummy = init.update( {'active': 1 , 'retract':1,  'extrude':2 , 'endless_spool': False  })%}
       
       ### save variable 
   SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"  
   
  {action_respond_info("Creating a list of variables for extruder mode.")}

  
#####################################################################
# EXTRUDER PRINT MODES  - MANAGEMENT
# Function description: 
#####################################################################
#
# SET_PRINT_MODE: Set print mode for extruder
#
# Parameters:
# M [mode]  
# T [toolhead]  
#
# Mode:
# S1 - Dual-extruder mode (default mode)
# S2 - Revers-extruder mode
# S3 - Single-extruder mode [T]
# S4 - Endless spool mode
#
# Example:
# SET_PRINT_MODE M=<mode> T=<tool> 
#
##############################################

[gcode_macro SET_PRINT_MODE]  
description: Set dual-extruder print mode:SET_PRINT_MODE  M=<mode> T=<tool> 
gcode:

# tool = {0:'extruder', 1:'extruder1'}   
# print_mode = {'active':1, 'retract':1, 'extrude':2  }
 
   ### params.M=[1|2|3|4]

   {% set user_vars = printer["gcode_macro VARIABLE"] %}
   {% set mode = params.M|default(1)|int %}     
   {% set init_tool = user_vars.tool      %}
   {% set init_mode = user_vars.print_mode    %}
  
  ### safety tests  
  {% if printer.dual_carriage is defined  and  user_vars.idex_mode.active  != 1 %}
      ### ignore all extruder modes
      {action_respond_info("SET_DUAL_EXTRUDER are available only for dual-carriage mode M605 S1.")}
      {action_respond_info("First set dual-carriage mode M605 S1  !!" )}  
  {% else %}  

    ### reset Endless -spool mode
   {% set _dummy = init_mode.update( { 'endless_spool': False } ) %}
     
    ### Dual-extruder mode (default mode S1) 
    {% if (mode) == 1 %}
       {% set _dummy =init_tool.update(  { 0:'extruder', 1:'extruder1'} )  %}
       {% set _dummy =  init_mode.update( { 'active': 1 } ) %}
       #{action_respond_info("Dual-extruder mode is active")}     

    ### Reverse-extruder mode S2 - (T0>>T1 and T1>>T0)
    {% elif (mode) == 2 %}
       {% set _dummy =init_tool.update(  {0: 'extruder1',  1:'extruder' } )  %}
       {% set _dummy =  init_mode.update( { 'active': 2 } ) %}        
       #{action_respond_info("Reverse-extruder mode is active")}
        
    ### Single-extruder mode S3 define T0 or T1 
    {% elif (mode) == 3 %}      
       {% set one_tool = params.T|default(0)|int %}
       {% set tool_name =  'extruder' if one_tool ==0  else 'extruder1' %}  
       {% set _dummy =init_tool.update( { 0: tool_name , 1: tool_name} )  %}  
       {% set _dummy =  init_mode.update( { 'active': 3 } ) %}
       
       {% if "z" in printer.toolhead.homed_axes %}
           T{one_tool} 
       {% endif %}
       #  {action_respond_info("Single-extruder mode is active for tool: T%s" % one_tool)} 

 {% elif (mode) == 4 %}

  {% if init_mode.active != 3 %}
     ### check - filament not detected 
       {% set false_filament = [ ]  %} 
       {% set ns = namespace(not_detect= False) %}
                     
       {% for type in user_vars.filament_sensor|sort  %} 
          {% if type  in ['motion','switch'] %}
              {% for name in user_vars.filament_sensor[type]  %}       
                 {% set detected = True  if printer[("filament_%s_sensor %s" %  (type, name) )].filament_detected   else  False   %}  
                 {% if detected == False %}    
                    {% set ns.not_detect = True %}
                    {% set _dummy = false_filament.append(name) %} 
                 {% endif %} 
              {% endfor %}
          {% endif %} 
       {% endfor %}
      
       {% if  ns.not_detect  %}           
           {action_respond_info("Sensor : %s" % false_filament) }    
           {action_respond_info("Endless-spool mode is disabled: Filament not detected !")}
       {% else %}
            {% set _dummy =  init_mode.update( { 'endless_spool': True } ) %}
            {action_respond_info("Endless-spool mode is enabled")}
       {% endif %}
   {% else %}
      {action_respond_info("Endless-spool is not active in Single-extruder mode !")}
   {% endif %} 
 
     {% else %}        
           {action_respond_info("Params M=%s is not defined for SET_DUAL_EXTRUDER macro!" %  mode)} 
     {% endif %}   ### (mode)  
    
      ### update variable 'tool'   
      SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=tool  VALUE="{init_tool}"
      
       ### update variable 'print_mode'
      SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=print_mode  VALUE="{init_mode}" 

      ### get info g-code redirect to extruder
       {% set act_mode = {1:'Dual-extruder', 2:'Reverse-extruder', 3:'Single-extruder', 4:'Endless spool', 5:'Regeneration wipe tower '} [init_mode.active]  %}
       {action_respond_info("G-code T1 is redirected to %s" % init_tool.1)}
       {action_respond_info("G-code T0 is redirected to %s" % init_tool.0)}        
       {action_respond_info("Endless spool mod: : %s" % init_mode.endless_spool)} 
       {action_respond_info("Active mod: : %s" % act_mode)} 

 {% endif %}   ### safety tests  
 
 