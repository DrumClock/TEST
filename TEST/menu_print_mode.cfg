###############################################################
#      Define LCD menu  " ... mode"  in user
################################################################
#
# Main
#   + User  
#       + Print Mode
#           + =(mode)=                         (only info)
#           + Set Dual-extruder mode       S1  (default mode)
#           + Set Revers-extruder mode     S2
#           + Set Single-extruder mode     S3
#              + Set tool: (T0/T1)
#
#       + Endless spool mode                   (not for S3 mode)
#           + =(mode)=                         (only info)
#           + Enable: True/False           S4  (toonly for S1/S2 mode)
#
#

###############    menu Print Mode    ##########################

[menu __main __user __dual_extruder]
type: list
enable: {'gcode_macro SET_PRINT_MODE' in printer}
name:  Print Mode


[menu __main __user __dual_extruder __mode]
type: command
#name: ={({1:'Dual-Ex mode',2:'Revers-Ex mode',3:'Single-Ex mode'})[printer["gcode_macro VARIABLE"].print_mode]}=
name: { ({1:'~extruder0~ Dual-Ex ~extruder1~', 2:'~extruder1~ Revers-Ex ~extruder0~', 3: "%s %s" % ('Single-Ex ', {0:'~extruder0~', 1:'~extruder1~'}[printer.toolhead.extruder.lstrip("extruder") if  printer.toolhead.extruder.lstrip("extruder")|length != 0 else 0] )}) [printer["gcode_macro VARIABLE"].print_mode.active] }
gcode: 
 
 # ==========================================================

[menu __main __user __dual_extruder __s1]
type: command
enable:  {printer.idle_timeout.state != "Printing"}
name: Set Dual-extruder mode
gcode:  SET_PRINT_MODE M=1     
 
# ==========================================================
 
[menu __main __user __dual_extruder __s2]
type: command
enable:  {printer.idle_timeout.state != "Printing"}
name: Set Revers-extruder mode
gcode:  SET_PRINT_MODE M=2            
 
# ==========================================================

[menu __main __user __dual_extruder __s3]
type: list
enable:  {printer.idle_timeout.state != "Printing"}
name: Set Single-extruder mode

# ==========================================================

[menu __main __user __dual_extruder __s3 __tool]
type:input
name: Set tool: T{menu.input|int}
input: {  printer.toolhead.extruder.lstrip("extruder") if  printer.toolhead.extruder.lstrip("extruder")|length != 0 else 0 }
# input: {printer["gcode_macro VARIABLE"].tool.active}
input_min: 0
input_max: 1
input_step: 1
gcode:
     SET_PRINT_MODE M=3 T={menu.input}    


###############    menu Endless spool mode   ##########################


[menu __main __user __endless_spool]
type: list
enable: {'gcode_macro SET_PRINT_MODE' in printer and printer["gcode_macro VARIABLE"].print_mode.active not in [3]}
#enable:  { printer.idle_timeout.state != "Printing"  }
name: Endless spool mode

# ==========================================================

[menu __main __user __endless_spool __info]
type: command
#name: { 'Endless ~extruder_empty~~right_arrow~~right_arrow~~extruder_full' }
name: { '~extruder_empty~~right_arrow~ change ~right_arrow~~extruder_full' }
gcode: 

# ==========================================================

[menu __main __user __endless_spool __s4]
type: input
name: Enable: {'True' if menu.input else 'False'}
input: {1 if printer["gcode_macro VARIABLE"].print_mode.endless_spool else 0} 
input_min: 0
input_max: 1
input_step: 1

gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %}
   {% set init = user_vars.print_mode  %}
   
   
   {% if menu.input %}
       SET_PRINT_MODE M=4
    {% else %}
      {% set _dummy = init.update( { 'endless_spool': False } ) %}
      SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=print_mode VALUE="{init}" 
    {% endif %}


###############    menu Multi-Ex G-code mode   ##########################

[menu __main __user __multiextruder]
type: list
# enable: {'gcode_macro SET_PRINT_MODE' in printer and printer["gcode_macro VARIABLE"].print_mode.active not in [3]}
name: Multi-Extruder

# ==========================================================

[menu __main __user __multiextruder __e0]
type: input
enable: {('extruder' in printer)}
name:  ~extruder0~ G-code: T{menu.input|int}
input: { 0 if printer["gcode_macro VARIABLE"].tool[0].lstrip("extruder")|length == 0 else printer["gcode_macro VARIABLE"].tool[0].lstrip("extruder") }     
input_min: 0
input_max: { printer["gcode_macro VARIABLE"].tool|length -1 } 
input_step: 1
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %}    
  {% set init_tool = user_vars.tool     %}  
   
    ### set G-code for extruder 
       {% set _dummy = init_tool.update(  { menu.input|int : 'extruder' } )  %}
  
   ### update variable 'tool'   
      SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=tool  VALUE="{init_tool}"  
       

# ==========================================================

[menu __main __user __multiextruder __e1]
type: input
enable: {('extruder' in printer)}
name:  ~extruder1~ G-code: T{menu.input|int}
input: { 0 if printer["gcode_macro VARIABLE"].tool[1].lstrip("extruder")|length == 0 else printer["gcode_macro VARIABLE"].tool[1].lstrip("extruder") }     
input_min: 0
input_max: { printer["gcode_macro VARIABLE"].tool|length -1 } 
input_step: 1
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %}    
  {% set init_tool = user_vars.tool      %}
  
  
    ### set G-code for extruder 
       {% set _dummy = init_tool.update(  { menu.input|int : 'extruder1' } )  %}
  
   ### update variable 'tool'   
      SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=tool  VALUE="{init_tool}"  

# ==========================================================

[menu __main __user __multiextruder __e2]
type: input
enable: {('extruder' in printer)}
name:  ~extruder2~ G-code: T{menu.input|int}
input: { 0 if printer["gcode_macro VARIABLE"].tool[2].lstrip("extruder")|length == 0 else printer["gcode_macro VARIABLE"].tool[2].lstrip("extruder") }     
input_min: 0
input_max: { printer["gcode_macro VARIABLE"].tool|length -1 } 
input_step: 1
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %}    
  {% set init_tool = user_vars.tool      %}
  
  
    ### set G-code for extruder 
       {% set _dummy = init_tool.update(  {menu.input|int : 'extruder2' } )  %}
  
   ### update variable 'tool'   
      SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=tool  VALUE="{init_tool}"  

# ==========================================================

[menu __main __user __multiextruder __e3]
type: input
enable: {('extruder' in printer)}
name:  ~extruder3~ G-code: T{menu.input|int}
input: { 0 if printer["gcode_macro VARIABLE"].tool[3].lstrip("extruder")|length == 0 else printer["gcode_macro VARIABLE"].tool[3].lstrip("extruder") }     
input_min: 0
input_max: { printer["gcode_macro VARIABLE"].tool|length -1 } 
input_step: 1
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %}    
  {% set init_tool = user_vars.tool      %}
  
  
    ### set G-code for extruder 
       {% set _dummy = init_tool.update(  { menu.input|int : 'extruder3' } )  %}
  
   ### update variable 'tool'   
      SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=tool  VALUE="{init_tool}"  

# ==========================================================

[menu __main __user __multiextruder __reset]
type: command
name: Reset default G-code
gcode: 
      _A_INIT_TOOL