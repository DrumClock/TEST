# >>>>>> vyzkou≈°eno 9.12.2022 <<<<<<<<<<<

########################################
#  Define filament sensor
########################################

### T0 - filament sensors ###

[filament_switch_sensor filament]
switch_pin: PD9
pause_on_runout: True
runout_gcode:
#    TRIGGER_RUNOUT TOOL=0


[filament_motion_sensor extruder]
switch_pin: PG9
detection_length: 7.0
extruder: extruder
pause_on_runout: False
runout_gcode:
#   TRIGGER_MOTION TOOL=0
#   {action_respond_info("extruder -  motion filament problem ")}

    
### T1 - filament sensors ###

[filament_switch_sensor filament1]
switch_pin: PD10
pause_on_runout: True
runout_gcode:
#    TRIGGER_RUNOUT TOOL=1


[filament_motion_sensor extruder1]
switch_pin: PG10
detection_length: 7.0
extruder: extruder
pause_on_runout: False
runout_gcode:
#   TRIGGER_MOTION TOOL=0
# {action_respond_info(" extruder 1 - motion filament  problem ")}


#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_filament_sensor:  {  } 

#####################################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#####################################################################
  
[gcode_macro INIT_FILAMENT_SENSOR] 
#[gcode_macro _INIT_FILAMENT_SENSOR]
gcode:

    {% set user_vars = printer["gcode_macro VARIABLE"] %}
   
   ### update filament_sensor variable by configuration of printer    
    {% set filament_sensor =  user_vars.filament_sensor %}
    {% set ns = namespace(index=1|int) %}
#   {% set ns = namespace(switch=0|int, motion=0|int) %}
    
    {% set _dummy = filament_sensor.update(  {'defined' : False } ) %}
   
   ### search filament sensor 
    {% for object in printer.configfile.config|sort %}        

       {% if object.split(' ')[0] == 'filament_switch_sensor' %}   
           {% set type = 'switch' %}           
       {% elif object.split(' ')[0] == 'filament_motion_sensor' %} 
           {% set type = 'motion' %}           
       {% else %}
            {% set type = 'false' %}              
       {% endif %}  

       ### update variable  
       {% if type != 'false' %}  
          {% set _dummy = filament_sensor.update(  {'defined' : True } ) %}             
   
             {% set name =  (object.split(' ')[1]) %}
             {% set enabled =  True  if printer[("filament_%s_sensor %s" %  (type, name) )].enabled   else  False %}     
             {% set filament = True  if printer[("filament_%s_sensor %s" %  (type, name) )].filament_detected   else False   %}  
#>>>>
       #     {% if filament_sensor[type] is not defined %}  
       #       {% set _dummy = filament_sensor.update( { type :{ } } ) %}   
       #     {% endif %}

       #     {% set _dummy = filament_sensor[type].update(  { ns[type]: {'name' : name , 'enable' : enabled, 'detect'  : filament } } ) %} 
       #     {% set ns.motion = ns.motion + (1 if type == 'motion' else 0) %}
       #     {% set ns.switch = ns.switch + (1 if type == 'switch' else 0) %}       
#>>>>     
             {% set _dummy = filament_sensor.update( { ns.index : {'name' : name , 'type' : type, 'enable' : enabled, 'detect' : filament  } } ) %} 
             {% set ns.index = ns.index + 1 %}

       {% endif %}
     {% endfor %}   

     ### save variable for filament senzors 
     SET_GCODE_VARIABLE MACRO=VARIABLE   VARIABLE=filament_sensor     VALUE="{filament_sensor}"

    ### get info 
     {action_respond_info("%s" % user_vars.filament_sensor)} 
     {action_respond_info("Creating a list of variables for filament sensor" )} 
    
                                  
#####################################################################


 
