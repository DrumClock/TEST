##########################################################
# Define HW configuration in printer.cfg

#############################
### T0 - filament sensors ###
#############################

[filament_switch_sensor filament]
switch_pin: PD9
pause_on_runout: True
runout_gcode:    
#    TRIGGER_RUNOUT TOOL=0


[filament_motion_sensor extruder]
switch_pin: EBB_usb: PB3  
detection_length: 5.0
extruder: extruder
pause_on_runout: False
runout_gcode:
  #   TRIGGER_MOTION TOOL=0

#############################    
### T1 - filament sensors ###
#############################

[filament_switch_sensor filament1]
switch_pin: PD10
pause_on_runout: True
runout_gcode:
 #    TRIGGER_RUNOUT TOOL=1


[filament_motion_sensor extruder1]
switch_pin: EBB_usb: PB4
detection_length: 5.0
extruder: extruder         # use 'extruder' if 'extruder1' has no defined E-stepper .... [gcode_macro SWITCHING EXTRUDER]
pause_on_runout: False
runout_gcode:
 #   TRIGGER_MOTION TOOL=0
  

#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_filament_sensor:  {  } 

# e.g. {'defined': True,
#       'motion': ['extruder', 'extruder1'],
#       'switch': ['filament', 'filament1'],
#       'count': 4}

#####################################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#####################################################################
 
[gcode_macro _INIT_FILAMENT_SENSOR] 
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %}
   
   ### update filament_sensor variable by configuration of printer  

   {% set name = "filament_sensor" %}      # name variable
   {% set init = { 'defined' : False } %}  # default preset 
   {% set ns = namespace(index=1|int) %}
   
#   {% set ns = namespace(switch=0|int, motion=0|int) %}     
   
   ### search filament sensor 
    {% for object in printer.configfile.config|sort %}        

       {% if object.split(' ')[0] == 'filament_switch_sensor' %}   
           {% set type = 'switch' %}           
       {% elif object.split(' ')[0] == 'filament_motion_sensor' %} 
           {% set type = 'motion' %}           
       {% else %}
            {% set type = 'false' %}              
       {% endif %}  

       ### update variable  
       {% if type != 'false' %}  
          {% set _dummy = init.update(  {'defined' : True } ) %}         
   
             {% set name =  (object.split(' ')[1]) %}
             {% set enabled =  True  if printer[("filament_%s_sensor %s" %  (type, name) )].enabled   else  False %}     
             {% set filament = True  if printer[("filament_%s_sensor %s" %  (type, name) )].filament_detected   else False   %}  

        {% if type == 'motion' %}  
            {% set _dummy = init.update({ 'motion': [name]})  if init.motion is not defined  else  init.motion.append(name) %}
        {% elif type == 'switch' %}  
            {% set _dummy = init.update({ 'switch': [name]})  if init.switch is not defined  else  init.switch.append(name) %}
        {% endif %}   

        {% set _dummy = init.update({ 'count': ns.index })  %}
        {% set ns.index = ns.index + 1 %}

       {% endif %}
     {% endfor %}   

     ### save variable 
     SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"

    ### get info 
     # {action_respond_info("%s" % init)} 
     {action_respond_info("Creating a list of variables for filament sensor" )} 
    
                                  
#####################################################################


 
