 #-------------------- SYNC MULTI HOTEND---------------------------------------------
  
      ### filament insertion check for SYNC-MULTI hotend during printing 
#       {% if 'gcode_macro SYNC_MULTI_HOTEND' in printer  %} #and printer['virtual_sdcard'].is_active == true    %} 
#            SYNC_MULTI_HOTEND  EXTRUDERS={tool_0 + "," + tool_1} 
#       {% endif %}  
        
  
# ------------------------ user_variable ---------------------------------

# sync_switching_tool : 'T0': {0:'extruder', 1: 'extruder2'}, 'T1':{ 0:'extruder1', 1: 'extruder3'  }
# multi_hotend = {1: 'extruder3', 0: 'extruder1', 'unload': 40, 'load': 60, 'speed': 25, 'parking': [-32, 278], 'feedrate': 30000}

     
##########################################################################
[gcode_macro SYNC_MULTI_HOTEND]  
description:  SYNC_MULTI_HOTEND  EXTRUDERS={extruder,extruder2} 
gcode:

    {% set user_vars = printer["gcode_macro VARIABLE"] %} 
    {% set init = user_vars.multi_hotend %}
      
      ### filament insertion check for SYNC-MULTI hotend during printing    
  #  {% if  params.EXTRUDERS is defined and params.EXTRUDERS.split(",")|length == 2 %}      
          {% set target_extruder_0 = params.EXTRUDERS.split(",")[0] %}
          {% set target_extruder_1 = params.EXTRUDERS.split(",")[1] %}

       {action_respond_info("target_extruder_0 = %s" % target_extruder_0 )} 
       {action_respond_info("target_extruder_1 = %s" % target_extruder_1 )}  
       
      ### unsync both carriages
           SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL 
                       
      ### parking carriages                  
           SYNC_MULTI_HOTEND_PARKING  

# >>>>>>>>>>>>>>>>>>>> 

      ### sync change filament  
           SYNC_MULTI_CHANGE_FILAMENT  EXTRUDER={target_extruder_0}
                    
# >>>>>>>>>>>>>>>>>>>> 
     
      ### restore parking carriages 
           SYNC_MULTI_HOTEND_RESTORE_PARKING      

 ### re-activate mode 
    {% if user_vars.idex_mode.active == 2 %}     
      SET_DUAL_CARRIAGE_MODE MODE=DUPLICATION
    {% elif user_vars.idex_mode.active == 3 %} 
      SET_DUAL_CARRIAGE_MODE MODE=MIRRORED  
    {% endif %}     
     
    
 #  {% else %}       
 #     {action_respond_info("Not defined params EXTRUDERS !")}        
 #  {% endif %}  

############################################################################  
[gcode_macro SYNC_MULTI_HOTEND_PARKING]  
gcode:     

    {% set user_vars = printer["gcode_macro VARIABLE"] %} 
    {% set init = user_vars.multi_hotend %}   

    {% set axis =  printer.configfile.settings.dual_carriage.axis  
           if 'dual_carriage' in printer['motion_report'].steppers  
           else 'x' %}   

   ### actual position crriage 0 / 1     
    {% set axis_pos_0 = printer['dual_carriage'].init_mode_positions[0][ (0 if axis == 'x' else 1) |int] %}
    {% set axis_pos_1 = printer['dual_carriage'].init_mode_positions[1][ (0 if axis == 'x' else 1) |int] %}  

    ### parking the carriage 0 to position 
       SET_DUAL_CARRIAGE CARRIAGE=0   
       G1 {axis + ( user_vars.multi_hotend.parking.0|string)}  F{user_vars.multi_hotend.feedrate}  
          
    ### parking the carriage 1 
        SET_DUAL_CARRIAGE CARRIAGE=1      
        G1 {axis + ( user_vars.multi_hotend.parking.1|string)}  F{user_vars.multi_hotend.feedrate}  
          
     ### create variable 'gcode_position'  
        {% set _dummy = init.update( {'gcode_position':{ 'axis':axis , 'value_0':axis_pos_0|float, 'value_1':axis_pos_1|float }}  ) %}
           SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=multi_hotend  VALUE="{init}" 
        
   
############################################################################  
[gcode_macro SYNC_MULTI_HOTEND_RESTORE_PARKING]  
gcode:       

      {% set user_vars = printer["gcode_macro VARIABLE"] %} 
      {% set init = user_vars.multi_hotend %}
 
      {% set axis = init.gcode_position.axis %}
      {% set axis_pos_0 = init.gcode_position.value_0 %}
      {% set axis_pos_1 = init.gcode_position.value_1 %}
      
      ### restore position befor park carrige 0  
       SET_DUAL_CARRIAGE CARRIAGE=0
       G1 {axis + ( axis_pos_0|string)}  F{user_vars.multi_hotend.feedrate}   
      
      ### restore position befor park carrige 1
       SET_DUAL_CARRIAGE CARRIAGE=1    
       G1 {axis + ( axis_pos_1|string)}  F{user_vars.multi_hotend.feedrate}    


     ### delete variable 'gcode_position'           
       {% set _dummy = init.pop( 'gcode_position' ) %}
          SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=multi_hotend  VALUE="{init}"     
  

############################################################################ 
[gcode_macro SYNC_MULTI_CHANGE_FILAMENT]  
gcode:

        {% set user_vars = printer["gcode_macro VARIABLE"] %} 
        {% set name = "multi_hotend" %}          # name variable
        {% set init = user_vars.multi_hotend %}     # default preset

        {% set target_extruder = params.EXTRUDER|default("extruder") %}      
        {% set act_extruder = printer.toolhead.extruder %}

        {% set max_extrude = printer.configfile.settings[(printer.toolhead.extruder)].max_extrude_only_distance|int %}                
        {% set step = user_vars.multi_hotend.unload // max_extrude|int %} 
        {% set rest = user_vars.multi_hotend.unload % max_extrude|float %}

 {action_respond_info("target_extruder = %s" % target_extruder )} 
  
      SAVE_GCODE_STATE NAME=MULTI_HOTEND
   
       ###  only when printing and heated extruder
          {% if printer[(act_extruder)].can_extrude | lower == 'true'  %}  
              # and  printer['virtual_sdcard'].is_active == true %}              
                      
           ###  unload activation for "max_extrude_only_distance" 

     #        ACTIVATE_TOOL EXTRUDER={act_extruder}              
             M83
             G92 E0             
             {% for n in range(step) %}
               G1 E{ max_extrude*-1 } F{(user_vars.multi_hotend.speed * 60)|int}
             {% endfor %}       
             {% if rest > 0.0 %}
               G1 E{rest*-1 } F{(user_vars.multi_hotend.speed * 60)|int} 
             {% endif %}  
             
                  G4 P3000
            {% endif %}  
          
###  load activation for "max_extrude_only_distance"            
         {% if printer[(target_extruder)].can_extrude | lower == 'true'  %}  
                 # and  printer['virtual_sdcard'].is_active == true %}
          
    #         ACTIVATE_TOOL EXTRUDER={target_extruder}            
              M83
             G92 E0             
             {% for n in range(step) %}
               G1 E{max_extrude} F{(user_vars.multi_hotend.speed * 60)|int}
             {% endfor %}       
             {% if rest > 0.0 %}
               G1 E{rest} F{(user_vars.multi_hotend.speed * 60)|int} 
             {% endif %}  
           
            G4 P3000           
               
                ### update and save variable after load filament  
                {% set _dummy = init.update( { 0|int : target_extruder} ) %}
                SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
                SAVE_VARIABLE VARIABLE={name} VALUE="{init}"
              
      {% endif %}   
   
          RESTORE_GCODE_STATE NAME=MULTI_HOTEND
       
