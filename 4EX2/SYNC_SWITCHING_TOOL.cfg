# This file contains a configuration snippet for SYNC_SWITCHING_TOOL 
#
# See docs/Config_Reference.md for a description of parameters.

#####################################################################
# All variables in this configuration, KLIPPER merges
# into one configuration  file [gcode_macro VARIABLE] .
#
# ATTENTION:
# If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_sync_switching_tool :    { }  

 # e.g.  { 'active':'none', 'enable': False , 'T0': {0:'extruder', 1: 'extruder2'}, 'T1':{ 0:'extruder1', 1: 'extruder3'  }, }
         

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################
 
[gcode_macro _INIT_SYNC_SWITCHING_TOOL]
gcode:  

# This macro use variable : 
# printer["gcode_macro VARIABLE"].toolhead 

 {% if 'dual_carriage' in printer['motion_report'].steppers %}
     
   {% set user_vars = printer["gcode_macro VARIABLE"] %} 
   {% set sync_switching_tool = { 'enable' : False , 'active': 'none' } %}
       
   {% if  user_vars.toolhead|length > 1   and   user_vars.toolhead.0|length > 1%}          
     {% set _dummy =sync_switching_tool.update( {'enable' : True, 'active': 'T0'  } ) %}   

       {% for carriage in user_vars.toolhead %}
          {% set code = "T%s" % carriage %}
          {% set _dummy = sync_switching_tool.update( { code :{ 0: user_vars.toolhead.0[carriage], 1: user_vars.toolhead.1[carriage] } } ) %}  
       {% endfor %}
   {% endif %}  
 
 ### save variable 'sync_switching_tool'
  SET_GCODE_VARIABLE MACRO=VARIABLE   VARIABLE=sync_switching_tool   VALUE="{sync_switching_tool}"

 {% endif %}

##########################################################
# PRINTER SYNC_SWITCHING_TOOL MANAGEMENT
# Function description: 
#
##########################################################
     
[gcode_macro SYNC_SWITCHING_TOOL]
description: 
gcode:  
         
# This macro use variable : 
# printer["gcode_macro VARIABLE"].sync_switching_tool
# printer["gcode_macro VARIABLE"].hotend_offset
# printer["gcode_macro VARIABLE"].idex_mode 

  ### params.T = [0|1] 

  {% set user_vars = printer["gcode_macro VARIABLE"] %}    
  {% set target_tool = params.T|default(0)|int %}    ; 0
  
  {% if target_tool in  [0,1] %}    
      #{action_respond_info("T=%s" % ext_nr)}
  
   ### define sync tool carriage 0/1 
   {% set axis = printer.configfile.settings.dual_carriage.axis %}   ;x
   {% set t_code =  "T%s" % target_tool %}   
   {% set tool_0 = user_vars.sync_switching_tool[t_code][0] %}      # params.T 0 ='extruder'  / params.T 1 ='extruder1'
   {% set tool_1 = user_vars.sync_switching_tool[t_code][1] %}      # params.T 0 ='extruder2' / params.T 1 ='extruder3'
    
   ### unsync both carriages
    SET_DUAL_CARRIAGE_MODE MODE=FULL_CONTROL

#-------------------- SYNC MULTI HOTEND---------------------------------------------
  
      ### filament insertion check for SYNC-MULTI hotend during printing 
       {% if 'gcode_macro SYNC_MULTI_HOTEND' in printer  %} #and printer['virtual_sdcard'].is_active == true    %}
          SYNC_MULTI_HOTEND  EXTRUDERS={tool_0 + "," + tool_1} 
       {% endif %}  

#---------------------------------------------------------------------------------------        
   
   ### sets Hotends carriage 1
    SET_DUAL_CARRIAGE CARRIAGE=1    
    SET_GCODE_OFFSET {axis}={user_vars.hotend_offset.3[axis] if t_code == 'T0' else  user_vars.hotend_offset.2[axis]}           # 'extruder3' / 'extruder2'
   
   ### Switching extruder   
    SWITCHING_EXTRUDER E={tool_1}                                     # params.T 0 ='extruder2' / params.T 1 ='extruder3' 
   ### Switching hotend 
    SWITCHING_HOTEND E={tool_1}                                        # params.T 0 ='extruder2' / params.T 1 ='extruder3'             
   
    APPLY_AXIS_OFFSETS_TOOL T={2  if t_code == 'T0' else 3 }           # 'extruder2'  /  'extruder3'
    
   ### sets Hotends carriage 0
    SET_DUAL_CARRIAGE CARRIAGE=0
    SET_GCODE_OFFSET {axis}={user_vars.hotend_offset.1[axis] if t_code == 'T0' else  user_vars.hotend_offset.0[axis] }           # 'extruder1' / # 'extruder'

    ### Switching extruder   
    SWITCHING_EXTRUDER E={tool_0}                                     # params.T 0 ='extruder'  / params.T 1 ='extruder1' 
   ### Switching hotend
    SWITCHING_HOTEND E={tool_0}                                        # params.T 0 ='extruder'  / params.T 1 ='extruder1'     

    APPLY_AXIS_OFFSETS_TOOL T={0  if t_code == 'T0' else 1}             # 'extruder' /  'extruder1'
    
   ### sync extruders 
    SYNC_EXTRUDER_MOTION EXTRUDER={user_vars.toolhead[1][0]} MOTION_QUEUE={tool_0}      # params.T 0 = 'extruder' / params.T 1 =  'extruder1'  
    ACTIVATE_EXTRUDER EXTRUDER={tool_0}                                                 # params.T 0 = 'extruder' / params.T 1 =  'extruder1'

   ### re-activate mode 
    {% if user_vars.idex_mode.active == 2 %}     
      SET_DUAL_CARRIAGE_MODE MODE=DUPLICATION
    {% elif user_vars.idex_mode.active == 3 %} 
      SET_DUAL_CARRIAGE_MODE MODE=MIRRORED  
    {% endif %}     
     
    ### update variable 'sync_switching_tool' 
     {% set _dummy = user_vars.sync_switching_tool.update( {'active': t_code} ) %}  
      SET_GCODE_VARIABLE MACRO=VARIABLE   VARIABLE=sync_switching_tool   VALUE="{user_vars.sync_switching_tool}"
      
     {% else %}
          ### ignore command 
           {action_respond_info("Ignore command T%s" % target_tool )} 
    {% endif %}


#########################################################################

[gcode_macro APPLY_AXIS_OFFSETS_TOOL]
description: Apply 'dual-axis' offsets HotEnd (tool) by params T.
gcode:

# This macro use variable : 
# printer["gcode_macro VARIABLE"].hotend_offset

 ### params.T = [0|1|2|3]
   
 {% set user_vars = printer["gcode_macro VARIABLE"] %}

 ### Apply 'dual-axis' Offsets #####   
   {% set target_tool = params.T|int %}  
   {% set axis = printer.configfile.settings.dual_carriage.axis %} 
   {% set offset =  user_vars.hotend_offset[target_tool][axis] %} 
       
   SET_GCODE_OFFSET {axis|string}={offset}  MOVE=1 MOVE_SPEED=500    


