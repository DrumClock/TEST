#####################################################################
#   The power disconnection for Heatbed and HotEnd must be solved by 
#  means of a relay in order not to discharge the backup power module !
#####################################################################

### for Octoprint
# [virtual_sdcard]
# path: ~/.octoprint/uploads/ 

# [save_variables]
# filename: ~/save_variables.cfg


### for Mainsail
[virtual_sdcard]
path: ~/gcode_files

[save_variables]
filename: ~/my_config/save_variables.cfg

[force_move]
enable_force_move: true

#####################################################################
#  Variable for this configurations
#  ATTENTION: If the variable already exists it will be overwritten!
#####################################################################

[gcode_macro POWER_LOOS_VARIABLE]
description: HELP: for list of variables send VARIABLE_STATUS
#--- Power Loss Recovery ---
variable_min_extrude_temp: 190
variable_zraise : 10        #(mm) Z axis raise on resume (Requires backup power)
variable_purge_len: 20      #(mm) Length of filament to purge on resume
variable_retract_len: 10    #(mm) Length of filament to retract on fail. (Requires backup power)
gcode:

#####################################################################
#   Configuration for MKS PWC V3.0 module
#    or MKS 24V UPS backup power module
#####################################################################

[gcode_macro POWER_DETECT_LOOS ]
gcode: 

  {% if printer['output_pin PS_ON'].value != 1.0  %} 
       M80
  {% else %}
     {% if printer.idle_timeout.state != "Printing" %}
       CENTER_TILT_CARRIAGE_0
       M81
     {% else %}
       TRIGGER_POWER_LOSS_RECOVERY
     {% endif %}
  {% endif %}


#####################################################################

[gcode_macro TRIGGER_POWER_LOSS_RECOVERY]
gcode: 
  {% if printer.idle_timeout.state == "Printing" and 
        printer.save_variables.variables.power_loos_recovery.enable %}
    M25  ### Pause SD print
    POWER_LOSS
    CANCEL_PRINT
  {% endif %}     

#####################################################################
# define POWER LOSS RECOVERY macro
#####################################################################
[delayed_gcode  DETECT_POWER_LOSS_RECOVERY_VARIABLES]
initial_duration: 1.0
gcode:
 
  ### generate variable if needed
  {% if printer.save_variables.variables.user_variable is not defined %}
    {% set default = {'recover': False} %}
    SAVE_VARIABLE VARIABLE=user_variable VALUE="{default}"
  {% endif %}
  
  ### generate variable if needed
  {% if printer.save_variables.variables.power_loos_recovery is not defined %}
    {% set default = {'enable' : False, 
                      'recover': False} %}
    SAVE_VARIABLE VARIABLE=power_loos_recovery VALUE="{default}"
    RESPOND MSG="Initialize power loos variable. The feature is disabled by default" 
  {% endif %} 

   ### check if a power loss event occurred 
#  {% if printer.save_variables.variables.power_loos_recovery.enable and
#        printer.save_variables.variables.power_loos_recovery.recover %}
#    SET_DISPLAY_GROUP GROUP=_power_loss_warning ;warning
#  {% endif %} 
 

#####################################################################

[gcode_macro POWER_LOSS]
gcode:     
  {% set user_vars = printer["gcode_macro POWER_LOOS_VARIABLE"] %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set cur_z = printer.gcode_move.gcode_position.z|float %}
  {% set z_safe = [user_vars.zraise, (max_z - cur_z)]|min %}
  SAVE_RESTORE_VARIABLE SAFE_Z={z_safe} ; save variables for restore PLR  
  TURN_OFF_HEATERS
  M107       
  ### Z-hop      
  G91
  G1 Z{z_safe}
  G90  
  ### unload filament from all hotends
  {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters                    
     {% if 'extruder' in tool and printer[tool].target > user_vars.min_extrude_temp %} 
        {% set hotend = tool.replace('extruder','') if tool.replace('extruder','')|length == 1  else '0'%}           
     {% elif 'heater_generic' in tool and printer[tool].target > user_vars.min_extrude_temp %}           
         {% set gcode_id = printer.configfile.settings[tool].gcode_id %}
         {% set hotend = gcode_id.replace('T','') %}                                                           
    {% endif %}    
     {% if hotend is defined %}    
       {% set txt = "UNLOAD FILAMENT FROM T" + tool %}      
        SET_HOTEND E={hotend}  ; users macro for switching hotend                                             
        RESPOND MSG="{txt}"
        M83
        G1 E-{user_vars.retract_len} F250
    {% endif %}    
 {% endfor %}   
### disable power for all stepper
   {% for stepper in printer.motion_report.steppers|sort %}  ; check for all available steppers
        SET_STEPPER_ENABLE STEPPER={stepper} ENABLE=0
   {% endfor %}   
  RESPOND MSG="POWER LOSS RECOVERY Active"
 
#####################################################################

[gcode_macro SAVE_RESTORE_VARIABLE]
description: pin PW_DET activated , save variable for resume print
gcode:     
  {% set recovery = printer.save_variables.variables.power_loos_recovery %}
  ### save PLR info 
  {% set _dummy = recovery.update({'recover': True}) %}
  ### save filename and current position (in bytes) of currently loaded file.
  {% set _dummy = recovery.update({'file_path' : printer.print_stats.filename}) %}
  {% set _dummy = recovery.update({'file_position': printer.virtual_sdcard.file_position}) %}
#==================================================================================
  ### save active toolhead
  {% set _dummy = recovery.update({'toolhead': printer.toolhead.extruder}) %}
#==================================================================================
 {% if 'fan' in printer %}
  ### Print cooling fan.
   {% set _dummy = recovery.update({'print_fan': {'speed': printer.fan.speed}}) %}
 {% endif %}
#================================================================================== 
 ### save tool and bed info
  {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
    {% if 'heater_bed' in tool %}
      {% set _dummy = recovery.update({tool: {'target': printer[tool].target}}) %}
    {% elif 'extruder' in tool %}
      {% set tool_txt = tool.replace('extruder','T') if tool.replace('extruder','T')|length == 2 else 'T0' %}
      {% set fan = tool.replace ('extruder', 'fan') %}
        {% if recovery.extruder is not defined %}
         {% set _dummy = recovery.update({'extruder': [{'tool': tool_txt,                                         
                                         'fan'        : {'name' : fan,
                                                         'speed': printer['fan_generic ' + fan].speed},
                                         'target'     : printer[tool].target}]}) %}
       {% else %}
         {% set _dummy = recovery.extruder.append({'tool': tool_txt,                                                  
                                                  'fan'        : {'name' : fan,
                                                                  'speed': printer['fan_generic ' + fan].speed},
                                                  'target'     : printer[tool].target}) %}
        {% endif %}
     {% elif 'heater_generic' in tool %}           
        {% if recovery.heater_generic is not defined %}               
        {% set _dummy = recovery.update({'heater_generic': [{'gcode_id': printer.configfile.settings[tool].gcode_id,                                          
                                       'target': printer[tool].target}]}) %}                 
        {% else %}
        {% set _dummy = recovery.heater_generic.append({'heater_generic': [{'gcode_id': printer.configfile.settings[tool].gcode_id,
                                           'target' : printer[tool].target}]}) %}  
        {% endif %}            
    {% endif %}
  {% endfor %}
  ### save gcode_move info
  {% set _dummy = recovery.update({'gcode_move': {'speed_factor':         printer.gcode_move.speed_factor,
                                                  'absolute_extrude':     printer.gcode_move.absolute_extrude,
                                                  'absolute_coordinates': printer.gcode_move.absolute_coordinates,
                                                  'extrude_factor':       printer.gcode_move.extrude_factor,
                                                  'speed':                printer.gcode_move.speed,
                                                  'gcode_position':       {'x': printer.gcode_move.gcode_position.x,
                                                                           'y': printer.gcode_move.gcode_position.y,
                                                                           'z': printer.gcode_move.gcode_position.z,
                                                                           'e': printer.gcode_move.gcode_position.e},
                                                  'homing_origin':        {'x': printer.gcode_move.homing_origin.x,
                                                                           'y': printer.gcode_move.homing_origin.y,
                                                                           'z': printer.gcode_move.homing_origin.z}}}) %}
  {% set _dummy = recovery.update({'z_safe': params.SAFE_Z|default(0.0)|float}) %}
  SAVE_VARIABLE VARIABLE=power_loos_recovery VALUE="{recovery}"
#=================================================================================================
  SAVE_USER_VARIABLE
#####################################################################

[gcode_macro RESUME_PRINT]
description: load variables for restore - after Power Loos recovery
gcode:
 
  {% set restore_z_hop = printer["gcode_macro VARIABLE"].z_hop %}
  SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=z_hop VALUE=0  

  {% set user_vars = printer["gcode_macro POWER_LOOS_VARIABLE"] %}
  {% set recovery = printer.save_variables.variables.power_loos_recovery %}
  ### Homing axis X/Y
  SET_KINEMATIC_POSITION Z={(recovery.gcode_move.gcode_position.z + recovery.z_safe)}
  G28 X Y      
  ### position for purge filament after recovery
  G1 X10 Y10 F60000  
  ### heat bed
  RESPOND MSG="WAIT FOR HEATING BED "{recovery.heater_bed.target}
  M190 S{recovery.heater_bed.target}
 {% for heater_generic in recovery.heater_generic|sort(attribute='gcode_id') %}
   {% if heater_generic.target != 0.0 %} 
      {heater_generic.gcode_id}   ### set shared extruder 
      {% set txt = "WAIT FOR HEATING %s %s" % (heater_generic.gcode_id, heater_generic.target) %}
      RESPOND MSG="{txt}"
      M109 S{heater_generic.target} {heater_generic.gcode_id} 
      M83
      G1 E{user_vars.purge_len} F250
      M400
      M300
      G4 P5000
    {% endif %}
  {% endfor %}    
  {% for extruder in recovery.extruder|sort(attribute='tool') %}
    {% if extruder.target != 0.0 %}
      {extruder.tool}
      {% set txt = "WAIT FOR HEATING %s %s" % (extruder.tool, extruder.target) %}
      RESPOND MSG="{txt}"
      M109 S{extruder.target} {extruder.tool}     
      M83
      G1 E{user_vars.purge_len} F250
      M400
      M300
      G4 P5000
    {% endif %}     
  {% endfor %} 
#================================================================================== 
### restore Print cooling fan  
 {% if 'fan' in printer %}
  M106 S{recovery.print_fan.speed*255}
 {% endif %}
#================================================================================== 
  ### restore FANs generic
 {% if 'fan_generic' in printer %}
  RESPOND MSG=" SET ALL FANS SPEED"
  {% for extruder in recovery.extruder|sort(attribute='tool') %}
    SET_FAN_SPEED FAN={extruder.fan.name} SPEED={extruder.fan.speed}
  {% endfor %} 
 {% endif %}
#==================================================================================  
  ### restore gcode_move 
  {% if recovery.gcode_move.absolute_extrude %} M82 {% else %} M83{% endif %}  
  {% if recovery.gcode_move.absolute_coordinates %} G90 {% else %} G91 {% endif %}  
  M220 S{recovery.gcode_move.speed_factor * 100}
  M221 S{recovery.gcode_move.extrude_factor * 100} 
#==================================================================================
  ### restore active toolhead   
  ACTIVATE_EXTRUDER EXTRUDER={recovery.toolhead}
#==================================================================================
  RESTORE_USER_VARIABLE 
#==================================================================================
  ### restore position befor PLR
  #SET_GCODE_OFFSET X=0 Y=0 Z=0 
  #SET_GCODE_OFFSET X_ADJUST={recovery.gcode_move.homing_origin.x} Y_ADJUST={recovery.gcode_move.homing_origin.y} Z_ADJUST={recovery.gcode_move.homing_origin.z}  
  G92 E{recovery.gcode_move.gcode_position.e}
  G1 X{recovery.gcode_move.gcode_position.x} Y{recovery.gcode_move.gcode_position.y} F60000               
  G1 Z{recovery.gcode_move.gcode_position.z}
  G1 F{recovery.gcode_move.speed}
  ### reset PLR info
  {% set default = {'enable' : recovery.enable, 
                    'recover': False} %} 
  SAVE_VARIABLE VARIABLE=power_loos_recovery VALUE="{default}"
  SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=z_hop VALUE={restore_z_hop}
  RESPOND MSG="RESUME PRINT AFTER POWER LOSS RECOVERY"
  ### Select SD file and position for continue printing      
  M23 {"/%s" % recovery.file_path} ; set file
  M26 S{recovery.file_position}    ; set old file position
  M24                              ; start print
  
#########################################################################################  

[gcode_macro SAVE_USER_VARIABLE]
description: 
gcode: 
 
 {% set recovery = printer.save_variables.variables.user_variable %}
 {% set _dummy = recovery.update({'recover': True}) %}
 
 ### save active tool
 {% set _dummy = recovery.update({'active_tool': printer['gcode_macro VARIABLE'].active_tool}) %}
###
 {% set _dummy = recovery.update({'default_T0': printer['gcode_macro T0'].default_tool}) %}
 {% set _dummy = recovery.update({'default_T1': printer['gcode_macro T1'].default_tool}) %}
 
 {% set _dummy = recovery.update({'auto_park': printer['gcode_macro VARIABLE'].auto_park}) %}
 {% set _dummy = recovery.update({'z_hop': printer['gcode_macro VARIABLE'].z_hop}) %}
 {% set _dummy = recovery.update({'min_estep': printer['gcode_macro VARIABLE'].min_estep}) %}
 {% set _dummy = recovery.update({'mode_605': printer['gcode_macro VARIABLE'].mode_605}) %}
 {% set _dummy = recovery.update({'dual_extruder_mode': printer['gcode_macro VARIABLE'].dual_extruder_mode}) %}

 {% set _dummy = recovery.update({'tower_y': printer['gcode_macro REGENERATION_TOWER'].tower_y}) %}
 {% set _dummy = recovery.update({'tower_x': printer['gcode_macro REGENERATION_TOWER'].tower_x}) %}
 {% set _dummy = recovery.update({'layer_z': printer['gcode_macro REGENERATION_TOWER'].layer_z}) %}
 {% set _dummy = recovery.update({'tower_0_z': printer['gcode_macro REGENERATION_TOWER'].tower_0_z}) %}
 {% set _dummy = recovery.update({'tower_1_z': printer['gcode_macro REGENERATION_TOWER'].tower_1_z}) %} 
   
   SAVE_VARIABLE VARIABLE=user_variable VALUE="{recovery}" 
#########################################################################################  

[gcode_macro RESTORE_USER_VARIABLE]
description: 
gcode: 
  
  {% set recovery = printer.save_variables.variables.user_variable %}  
  {% if recovery.recover %}
  ### restore active tool  
   T{recovery.active_tool} 
  ###   
  SET_GCODE_VARIABLE MACRO=T0 VARIABLE=default_tool VALUE={recovery.default_T0}
  SET_GCODE_VARIABLE MACRO=T1 VARIABLE=default_tool VALUE={recovery.default_T1}
  
  SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=auto_park VALUE={recovery.auto_park}
  SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=z_hop VALUE={recovery.z_hop}
  SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=min_estep VALUE={recovery.min_estep}
  SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=mode_605 VALUE={recovery.mode_605}
  SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=dual_extruder_mode VALUE={recovery.dual_extruder_mode}
  
  SET_GCODE_VARIABLE MACRO=REGENERATION_TOWER VARIABLE=tower_y VALUE={recovery.tower_y}
  SET_GCODE_VARIABLE MACRO=REGENERATION_TOWER VARIABLE=tower_x VALUE={recovery.tower_x}
  SET_GCODE_VARIABLE MACRO=REGENERATION_TOWER VARIABLE=layer_z VALUE={recovery.layer_z}
  SET_GCODE_VARIABLE MACRO=REGENERATION_TOWER VARIABLE=tower_0_z VALUE={recovery.tower_0_z}
  SET_GCODE_VARIABLE MACRO=REGENERATION_TOWER VARIABLE=tower_1_z VALUE={recovery.tower_1_z}
  
  ### reset info
  {% set default = {'recover': False} %}
    SAVE_VARIABLE VARIABLE=user_variable VALUE="{default}"  
  {% endif %} 
 