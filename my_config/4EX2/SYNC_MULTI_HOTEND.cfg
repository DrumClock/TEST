 
# sync_switching_tool : 'T0': {0:'extruder', 1: 'extruder2'}, 'T1':{ 0:'extruder1', 1: 'extruder3'  }
# multi_hotend = {1: 'extruder3', 0: 'extruder1', 'unload': 40, 'load': 60, 'speed': 25, 'parking': [-32, 278], 'feedrate': 30000}
     
##########################################################################
[gcode_macro SYNC_MULTI_HOTEND]  
description:  SYNC_MULTI_HOTEND  EXTRUDERS={extruder,extruder2} 
gcode:

    {% set user_vars = printer["gcode_macro VARIABLE"] %}     
    {% set systems = 'TOOL'  if 'gcode_macro SWITCHING_EXTRUDER' in  printer  or  'gcode_macro SWITCHING_HOTEND' in  printer
                      else  'EXTRUDER'       %}             
      
      ### filament insertion check for SYNC-MULTI hotend during printing    
  {% if  params.EXTRUDERS is defined and params.EXTRUDERS.split(",")|length == 2 %}      
       {% set target_extruder_0 = params.EXTRUDERS.split(",")[0] | default(user_vars.toolhead[0][0]) %}    #  default = carriage 0 / tool 0 
       {% set target_extruder_1 = params.EXTRUDERS.split(",")[1] | default(user_vars.toolhead[1][0]) %}    #  default = carriage 1 / tool 0 

    {% if target_extruder_0 != user_vars.multi_hotend.0 %}

#    {action_respond_info("target_extruder_0 = %s" % target_extruder_0 )} 
#    {action_respond_info("target_extruder_1 = %s" % target_extruder_1 )}  
       
      ## ! cariiages must be unsync !
                       
      ### parking carriages                  
           SYNC_MULTI_HOTEND_PARKING  

# >>>>>>>>>>>>>>>>>>>> 
              
     ###  sync unload filament 
           MULTI_CHANGE_FILAMENT ACTION=unload                 
           G4 P2000      
         
     ### sync load filament  
          ACTIVATE_{systems} EXTRUDER={target_extruder_1} 
          ACTIVATE_{systems} EXTRUDER={target_extruder_0} 
          SYNC_EXTRUDER_MOTION EXTRUDER={user_vars.toolhead[1][0]} MOTION_QUEUE={target_extruder_0}
          MULTI_CHANGE_FILAMENT ACTION=load 
          G4 P2000             
 

     ### update and save variable after sync change filament  
         SYNC_MULTI_HOTEND_UPDATE_VARIABLE EXTRUDERS={target_extruder_0 + "," + target_extruder_1} 
     
      ### restore parking carriages 
           SYNC_MULTI_HOTEND_RESTORE_PARKING    

      {% endif %} 
   
   {% else %}       
     {action_respond_info("Not defined params EXTRUDERS !")}        
   {% endif %}  

############################################################################  
[gcode_macro SYNC_MULTI_HOTEND_PARKING]  
gcode:     

    {% set user_vars = printer["gcode_macro VARIABLE"] %} 
    {% set init = user_vars.multi_hotend %}   

    {% set axis =  printer.configfile.settings.dual_carriage.axis  
           if 'dual_carriage' in printer['motion_report'].steppers  
           else 'x' %}   

   ### actual position crriage 0 / 1     
    {% set pos_carr_0 = printer['dual_carriage'].init_mode_positions[0][ (0 if axis == 'x' else 1) |int] %}
    {% set pos_carr_1 = printer['dual_carriage'].init_mode_positions[1][ (0 if axis == 'x' else 1) |int] %}  

    ### parking the carriage 0 to position 
       SET_DUAL_CARRIAGE CARRIAGE=0   
       G1 {axis + ( user_vars.multi_hotend.parking.0|string)}  F{user_vars.multi_hotend.feedrate}  
          
    ### parking the carriage 1 
        SET_DUAL_CARRIAGE CARRIAGE=1      
        G1 {axis + ( user_vars.multi_hotend.parking.1|string)}  F{user_vars.multi_hotend.feedrate}  
          
     ### create variable 'gcode_position'  
        {% set _dummy = init.update( {'gcode_position':{ 'axis':axis , 'pos_carr_0':pos_carr_0|float, 'pos_carr_1':pos_carr_1|float }}  ) %}
           SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=multi_hotend  VALUE="{init}" 
        
   
############################################################################  
[gcode_macro SYNC_MULTI_HOTEND_RESTORE_PARKING]  
gcode:       

      {% set user_vars = printer["gcode_macro VARIABLE"] %} 
      {% set init = user_vars.multi_hotend %}
     
      {% set axis = init.gcode_position.axis %}
      {% set pos_carr_0 = init.gcode_position.pos_carr_0 %}
      {% set pos_carr_1 = init.gcode_position.pos_carr_1 %}
      
      ### restore position befor park carrige 0  
       SET_DUAL_CARRIAGE CARRIAGE=0
       G1 {axis + ( pos_carr_0|string)}  F{user_vars.multi_hotend.feedrate}   
      
      ### restore position befor park carrige 1
       SET_DUAL_CARRIAGE CARRIAGE=1    
       G1 {axis + ( pos_carr_1|string)}  F{user_vars.multi_hotend.feedrate}    


     ### delete variable 'gcode_position'           
       {% set _dummy = init.pop( 'gcode_position' ) %}
          SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=multi_hotend  VALUE="{init}"     
  

############################################################################ 
[gcode_macro SYNC_MULTI_HOTEND_UPDATE_VARIABLE]  
gcode:  

    {% set user_vars = printer["gcode_macro VARIABLE"] %} 
    {% set name = "multi_hotend" %}          # name variable
    {% set init = user_vars.multi_hotend %}     # default preset

    {% set target_extruder_0 = params.EXTRUDERS.split(",")[0] | default(user_vars.toolhead[0][0]) %}    #  default = carriage 0 / tool 0 
    {% set target_extruder_1 = params.EXTRUDERS.split(",")[1] | default(user_vars.toolhead[1][0]) %}    #  default = carriage 1 / tool 0 
 

 ### update and save variable after sync change filament  
          {% set _dummy = init.update( {0 : target_extruder_0} ) %}
          {% set _dummy = init.update( {1 : target_extruder_1} ) %}
               
           SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
           SAVE_VARIABLE VARIABLE={name} VALUE="{init}"
                    