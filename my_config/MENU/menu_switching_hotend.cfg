##########################################################################################
### info : gcode_macro VARIABLE 
 
# e.g. switching_hotend = {'enable': True, 
#                          'name': {0: 'tool_1', 1: 'tool_2'},
#                          'park': {0: 'extruder', 1: 'extruder3'},
#                          'turn_off': {0: False, 1: False},
#                          'extruder3': {'delay': 200, 'index':1, 'off': False, 'angle': 135, 'servo': 'tool_2'},
#                          'extruder1': {'delay': 200, 'index':0, 'off': False, 'angle': 135, 'servo': 'tool_1'},
#                          'extruder2': {'delay': 200, 'index':1, 'off': False, 'angle': 45,  'servo': 'tool_2'},
#                          'extruder':  {'delay': 200, 'index':0 ,'off': False, 'angle': 45,  'servo': 'tool_1'}
#                         }


###############################################################
#         Define LCD menu  "Switching Angle settings"  
################################################################
# Main
# ... 
#   + Other settings
#     + Hotend Angle
#        + Active: <config_name>
#        + Angle : (in real time)
#        + Save on SD card
#==================================================================

### menu Hotend Angle settings ###

[menu __main __user __hotend_angle]
type: list
enable: { 'gcode_macro SWITCHING_HOTEND' in  printer and printer['virtual_sdcard'].is_active != true}      
name: Hotend Angle


#==================================================================

[menu __main __user __hotend_angle __active]
#enable:  {printer['virtual_sdcard'].is_active != true}
type: input
index: 0
name: Active: Ex{menu.input|int}
input:  { printer["gcode_macro VARIABLE"].switching_hotend.active.lstrip("extruder") if printer["gcode_macro VARIABLE"].switching_hotend.active.lstrip("extruder")|length != 0 else 0 }
input_min: 0
input_max:  { printer["gcode_macro VARIABLE"].tool |length  -1 }
input_step: 1
gcode:

    {% set name = "extruder" if  menu.input|int == 0  else  ("extruder%s" %  ( menu.input|int)) %}   
    
    ### update  switching_hotend variable
    {% set init = printer["gcode_macro VARIABLE"].switching_hotend %}
    {% set _dummy = init.update( {'active': name|string} ) %} 
    SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=switching_hotend  VALUE="{init}"

    SWITCHING_HOTEND  E={name|string}
             
#==================================================================

# 'extruder2': {'delay': 200, 'index':1, 'off': False, 'angle': 45,  'servo': 'tool_2'}

[menu __main __user __hotend_angle __angle]
#enable:  {printer['virtual_sdcard'].is_active != true}
type: input
name: Angle: { menu.input|int}~degrees~
input: {printer["gcode_macro VARIABLE"].switching_hotend[printer["gcode_macro VARIABLE"].switching_hotend.active].angle}
input_min: 0
input_max: { printer.configfile.settings[ ("servo %s"  % (printer["gcode_macro VARIABLE"].switching_hotend[printer["gcode_macro VARIABLE"].switching_hotend.active].servo)) ].maximum_servo_angle  }
input_step: 5          
realtime: True
gcode:

    {% set name = printer["gcode_macro VARIABLE"].switching_hotend.active %}  
    
    SET_ANGLE_HOTEND  EXTRUDER={name}  ANGLE={menu.input|int}


#====### save variable on  to SD 


[menu __main __user __hotend_angle __save]
enable: {printer.save_variables.variables.switching_hotend is defined }
name: Save on SD card.
type: command

gcode:

    SAVE_USER_VARIABLE VAR=switching_hotend  