###############################################################
#         Define LCD menu  "Hotend offset"  in User settings
################################################################
# Main
# ... 
#   + User settings
#     + Hotend offset
#       + Set Tool: Tx
#       + Set Offset
#           +  Offset X:00.00
#           +  Offset Y:00.00
#           +  Offset Z:0.000
#       +  Test X move +-10mm
#       +  Test Y move +-10mm
#       +  Tool Position
#           + Set position
#           + Adjust Z:0.000
#       + Save offset to SD card
#       + Edit T0: Disable / Enable   
    


#==================================================================


### menu Tool offset ###

[menu __main __user __hotend_offset]
type: list
enable: {printer.toolhead.homed_axes == "xyz" and  'gcode_macro M218' in printer}
name: Hotend offset


### menu Set Tool: Tx ###

[menu __main __user __hotend_offset __set_tool]
type: input
name: Set Tool: T{menu.input|int}
input: {({'extruder':0,'extruder1':1,'extruder2':2,'extruder3':3})[printer.toolhead.extruder]} 
input_min: 0  
input_max: { (printer.heaters.available_heaters|length) -2  } 
input_step: 1
#realtime: True

gcode: 
        T{menu.input|int}  
  

### menu Set Offset ###

[menu __main __user __hotend_offset __set_offsets]
type: list
name: Set Offset


### menu Offset X ###

[menu __main __user __hotend_offset __set_offsets __x]
type: input
enable: {printer["gcode_macro VARIABLE"].hotend_offset.change_T0 or printer.toolhead.extruder != "extruder"}
name:  offset X:{'%05.2f' % menu.input}
input: {printer.gcode_move.homing_origin.x}
input_min: -15
input_max: 15
input_step: 0.05
realtime: True
gcode: 

     SET_GCODE_OFFSET X={'%.2f' % menu.input} MOVE=1    
 
     {% set user_vars = printer["gcode_macro VARIABLE"] %}      
     {% set tool = ({'extruder':0,'extruder1':1,'extruder2':2,'extruder3':3})[printer.toolhead.extruder] %} 
     {% set new_offset = user_vars.hotend_offset %}

     {% set _dummy = new_offset[tool|int].update( { 'x' : printer.gcode_move.homing_origin.x  }) %}                             
     SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE=hotend_offset  VALUE="{new_offset}"   

    #{action_respond_info("hotend_offset_%s > %s" % (tool|string, new_offset))} 


       
     

 ### menu Offset Y ###  
 
[menu __main __user __hotend_offset __set_offsets __y]
type: input
enable: {printer["gcode_macro VARIABLE"].hotend_offset.change_T0 or printer.toolhead.extruder != "extruder"}
name:  offset Y:{'%05.2f' % menu.input}
input: {printer.gcode_move.homing_origin.y}
input_min: -5
input_max: 5
input_step: 0.05
realtime: True
gcode:
 
     SET_GCODE_OFFSET Y={'%.2f' % menu.input} MOVE=1

     {% set user_vars = printer["gcode_macro VARIABLE"] %}      
     {% set tool = ({'extruder':0,'extruder1':1,'extruder2':2,'extruder3':3})[printer.toolhead.extruder] %} 
     {% set new_offset = user_vars.hotend_offset %}

     {% set _dummy = new_offset[tool|int].update( { 'y' : printer.gcode_move.homing_origin.y  }) %}                             
     SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE=hotend_offset  VALUE="{new_offset}"   



 ### menu Offset Z ###
  
[menu __main __user __hotend_offset __set_offsets __z]
type: input
enable: {printer["gcode_macro VARIABLE"].hotend_offset.change_T0 or printer.toolhead.extruder != "extruder"}
name:  offset Z:{'%05.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:

      SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1
  
     {% set user_vars = printer["gcode_macro VARIABLE"] %}      
     {% set tool = ({'extruder':0,'extruder1':1,'extruder2':2,'extruder3':3})[printer.toolhead.extruder] %} 
      {% set new_offset = user_vars.hotend_offset %}

     {% set _dummy = new_offset[tool|int].update( { 'z' : printer.gcode_move.homing_origin.z  }) %}                             
     SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE=hotend_offset  VALUE="{new_offset}"   


### Test X move 10mm: ###

[menu __main __user __hotend_offset __test_x]
name: Test X move <-10-> mm
type: command
gcode:
    SAVE_GCODE_STATE NAME=__test__x
    {% set act_x = printer.gcode_move.gcode_position.x %}
    G90
    G1 X{act_x +10} F600   
    G1 X{act_x -10}   
    G1 X{act_x}
    RESTORE_GCODE_STATE NAME=__test__x


### Test Y move 10mm: ###

[menu __main __user __hotend_offset __test_y]
name: Test Y move <-10-> mm
type: command
gcode:
    SAVE_GCODE_STATE NAME=__test__y
    {% set act_y = printer.gcode_move.gcode_position.y %}
    G90
    G1 Y{act_y +10}  F600
    G1 Y{act_y -10}
    G1 Y{act_y}
    RESTORE_GCODE_STATE NAME=__test__y




### menu Tool position ###

[menu __main __user __hotend_offset __tool_position]
type: list
enable: {printer.toolhead.homed_axes == "xyz"}
name: Tool Position

### menu Set def. position ###

[menu __main __user __hotend_offset __tool_position __set]
type: command
name: Set position for calibrate tools or camera.
gcode:
     # set position for calibrate tools
      G1 X165 Y50 Z21.4 F6000

### menu Adjust Z: ###

[menu __main __user __hotend_offset __tool_position __adjust_z]
type: input
name: Adjust Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 0.1
realtime: True
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis          


### save offset to SD variable

[menu __main __user __hotend_offset __save]
type: command
enable: {printer.save_variables.variables.hotend_offset}
name: Save offset to SD card.
gcode:
   
     SAVE_USER_VARIABLE VAR=hotend_offset


###  menu Change Tool 0: Disable / Enable       

[menu __main __user __hotend_offset __change_tool_0]
type: input
name: Edit T0: {'Enable' if menu.input else 'Disable'}
input: {  1 if printer["gcode_macro VARIABLE"].hotend_offset.change_T0 else 0 }
input_min: 0
input_max: 1
input_step: 1
gcode:
  
   {% set user_vars = printer["gcode_macro VARIABLE"] %}  
   {% set init = user_vars.hotend_offset %}

   {% set _dummy = init.update({'change_T0': True if menu.input else False}) %}      
     
     SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE=hotend_offset  VALUE="{init}"   

  
  
  
  
 


