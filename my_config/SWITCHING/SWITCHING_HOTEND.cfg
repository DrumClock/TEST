# This file contains a configuration snippet for SWITCHING HOTEND 
#
# See docs/Config_Reference.md for a description of parameters.

#####################################################################
#  add HW config printer for switching hotend (nozzle)  ...
#####################################################################
# 
# [servo tool_1]      - servo for switching hotend (nozzle)
#

#####################################################################
# All variables in this configuration, KLIPPER merges
# into one configuration  file [gcode_macro VARIABLE] .
#
# ATTENTION:
# If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_switching_hotend: { }      # do not edit ! 


# e.g. switching_hotend = {'enable': True, 
#                          'name': {0: 'tool_1', 1: 'tool_2'},
#                          'park': {0: 'extruder', 1: 'extruder3'},
#                          'turn_off': {0: False, 1: False},
#                          'extruder3': {'delay': 200, 'index':1, 'off': False, 'angle': 135, 'servo': 'tool_2'},
#                          'extruder1': {'delay': 200, 'index':0, 'off': False, 'angle': 135, 'servo': 'tool_1'},
#                          'extruder2': {'delay': 200, 'index':1, 'off': False, 'angle': 45,  'servo': 'tool_2'},
#                          'extruder':  {'delay': 200, 'index':0 ,'off': False, 'angle': 45,  'servo': 'tool_1'}
#                         }


#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _G_INIT_SWITCHING_HOTEND]          
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %} 
  
   {% set var_name = "switching_hotend " %}    # name variable
   {% set init = {  'enable': false  } %}     # default preset   
   
   {% if user_vars.servo.index is defined %}   

   ### update switching_hotend variable by configuration of printer     

    ### update  { 'name' and 'turn_off' }
    {% set ns = namespace(index=0|int) %}
    {% set _dummy = init.update( { 'name': { } }) %}
    {% set _dummy = init.update( { 'turn_off': { } }) %}

    {% for object in printer.configfile.config|sort %}        
       {% if 'servo ' is in object  %}             
          {% if object.split(' ')[0] == 'servo' %} 
            {% set _dummy = init.name.update( { ns.index : (object.split(' ')[1])} ) %}
            {% set _dummy = init.turn_off.update( { ns.index : False } ) %}
            {% set ns.index =  ns.index + 1 %}  
          {% endif %}
       {% endif %} 
     {% endfor %}  
     
     ### update { 'extruder' } by configuration of toolhead variable   
    {% for index in user_vars.toolhead|sort %}  
      {% for tool in user_vars.toolhead[index] %}
       {% set angle = 45 if loop.index0 == 0 else 135 %}  
        {% set _dummy = init.update( {'enable':True, tool: { 'index': index,'angle': angle|int,  'delay' :200 , 'off':  False, 'servo': init.name[index] }} ) %}     
       {% endfor %}
    {% endfor %}

    {% if printer.configfile.settings['menu __main __user __hotend_angle'] is defined  %}  
       {% set _dummy = init.update( { 'active':'extruder'} ) %}
    {% endif %}
  
    {action_respond_info("Creating a list of variables switching_hotend" ) if printer.save_variables.variables.dump_list}

 {% endif %}

   ### update variables  
   SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={var_name} VALUE="{init}"
   

#####################################################################
  
[gcode_macro _GG_INIT_PARK_SWITCHING_HOTEND]
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %}
 
  {% if user_vars.switching_hotend.enable and user_vars.toolhead|length >= 2 %} 
  
    {% set name = "switching_hotend" %}    
    {% set upd_init = user_vars.switching_hotend %}     
    
    ### define toolhead park position for 'extruder' (hotend)

    {% set toolhead_0_hotend = user_vars.toolhead[0][0] %}   # e.g. 'extruder'   
     
    {% if user_vars.toolhead[1]|length > 1 %}  
     {% set toolhead_1_hotend =  user_vars.toolhead[1][1] %} # e.g  'extruder3'
    {% else %}     
     {% set toolhead_1_hotend =  user_vars.toolhead[1][0] %} # e.g  'extrude2'
    {% endif %}
  
      {% set _dummy = upd_init.update( { 'park' :{ 0: toolhead_0_hotend, 1: toolhead_1_hotend }} ) %}  
      
    ### update variables 'switching_hotend'
      SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{upd_init}"
     
   {% endif %}     

  
#####################################################################
# PRINTER SWITCHING SERVO MANAGEMENT
# Function description: switching servo for define extruder (nozzle).
#####################################################################


[gcode_macro SWITCHING_HOTEND]
description: Set : SWITCHING_HOTEND  E=(name)
gcode:
     ### params.E = [extruder|extruder1|extruder2|extruder3]
     
    {% set user_vars = printer["gcode_macro VARIABLE"] %}
    {% set tool_name = params.E %} 

#    {% if user_vars.switching_hotend.enable %}

         {% set index = user_vars.switching_hotend[tool_name].index %}  
         {% set name =  user_vars.switching_hotend[tool_name].servo %}
         {% set angle = user_vars.switching_hotend[tool_name].angle %}
         {% set delay =user_vars.switching_hotend[tool_name].delay %}
         
            SET_SERVO SERVO={name} angle={angle}
             G4 P{delay} 

        {% if 'gcode_macro LED_SERVO' in printer %}
           ### LED indication of angle
              LED_SERVO
         {% endif %}

          ### update info "angle" variable.servo  for M280
         {% if printer['gcode_macro M280'] is defined %}  
           {% set var_servo = user_vars.servo %}
           {% set _dummy = var_servo.angle.update( { index|int : angle } ) %} 
           SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=servo VALUE="{var_servo}"
         {% endif %}  
 
           ### turn off the servos after 15 seconds   
         {% if user_vars.switching_hotend[tool_name].off  %}            
            ### update info "turn_off" variable       
             {% set servo = user_vars.switching_hotend %} 
             {% set _dummy =servo.turn_off.update( {index|int: True}  ) %}
               SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=switching_hotend  VALUE="{servo}"             
               UPDATE_DELAYED_GCODE ID=SERVO_OFF  DURATION=15              
           {% endif %}   

      
#    {% else %}
#       RESPOND MSG=" SWITCHING HOTEND is disabled !"
#    {% endif %}

#####################################################################

[gcode_macro PARK_SWITCHING_HOTEND]
description: Parking the active hotend befor change carriages.
gcode:
    
    {% set user_vars = printer["gcode_macro VARIABLE"] %}
    
    {% set act_tool = printer.toolhead.extruder %}  # extruder2
    {% set ns = namespace(act_toolhead=0|int) %}

    ### define toolhead
     {% for index in user_vars.toolhead %}  
       {% if act_tool in user_vars.toolhead[index] %}
         {% set ns.act_toolhead = index|int %}    # 1                      
       {% endif %}
     {% endfor %}  

    {% set park_tool =  user_vars.switching_hotend.park[ns.act_toolhead] %}      #  extruder / extruder3

    ### Parking 'extruder' (hotend) befor carriage change        
     {% if  park_tool !=  act_tool %}                             
       SWITCHING_HOTEND E={park_tool}       
     {% endif %} 


#####################################################################   

[gcode_macro CENTER_SWITCHING_HOTEND]
description: The servo for the switching hotend will be centered.
gcode:
     
  {% set user_vars = printer["gcode_macro VARIABLE"] %}
  
  {% set macro_name = "VARIABLE" %}  
  {% set name = "switching_hotend" %}  
  {% set init = user_vars[name] %}   
 
  {% set servo_center = {} %}  
  
### define servo - angle  
   {% for tool in init|sort %}         
      {% if 'extruder' in tool %}                      
         {% for servo in init[tool]|sort %}                                
	       {% if 'servo' in servo %}       
             {% set _dummy = servo_center.update( {init[tool].servo:[init[tool].angle]} ) 
                          if servo_center[init[tool].servo] is not defined  
                       else servo_center[init[tool].servo].append(init[tool].angle) %} 
            {% endif %}			 
	     {% endfor %}
      {% endif %}
    {% endfor %}

    # {action_respond_info("servo angle = %s" % servo_center)}    


  {% if printer['virtual_sdcard'].is_active == False %} 
    ### set all servos to center  
     {% for servo in servo_center|sort %}       
        {% set center = servo_center[servo]|sum / 2 %}    ; calculates the average from the array   

        SET_SERVO  SERVO={servo}   ANGLE={center|int}
        G4 P1000  
        
        ### info 
        {action_respond_info("Servo '%s' has end angles %s, %s deg. It will be centered at %s deg." 
                               % (servo, servo_center[servo][0], servo_center[servo][1], center))}  
                               
        ### append variable "servo_center"
           {% set _dummy = init.update({ 'servo_center' : { servo : center|int}}) 
                       if 'servo_center' not in init 
                      else init.servo_center.update({servo : center|int}) %}   
      {% endfor %}  
    {% else %}
       {action_respond_info("The change is only made when printing is not in progress!")}
    {% endif %} 
     
  ### update variables "switching_hotend" 
       SET_GCODE_VARIABLE MACRO={macro_name} VARIABLE={name} VALUE="{init}"   
                 
     ### save variables "switching_hotend" 
   #   SAVE_VARIABLE VARIABLE={name}  VALUE="{init}"
  

#####################################################################

[gcode_macro SET_ANGLE_HOTEND]
description: Set : SET_ANGLE_HOTEND  EXTRUDER=(name) ANGLE=(angle)
gcode:
      ### params.EXTRUDER = [extruder|extruder1|extruder2|extruder3.....]
      ### params.ANGLE = [160]
     
      {% set user_vars = printer["gcode_macro VARIABLE"] %}
      
      {% set macro_name = "VARIABLE" %}  
      {% set name = "switching_hotend" %}  
      {% set init = user_vars[name] %}   
       
      {% if params.EXTRUDER |lower  in  init %}
          {% set tool_name = params.EXTRUDER|default((printer.toolhead.extruder)|string ) %} 
          {% set tool_angle = (params.ANGLE |default(user_vars.switching_hotend[tool_name].angle)|int ) %}          
          {% set servo_name = ("servo %s"  %   user_vars.switching_hotend[tool_name].servo) %}
          {% set servo_max_angle =  printer.configfile.config[servo_name].maximum_servo_angle|int  %}
          {% set servo_initial_angle = printer.configfile.config[servo_name].initial_angle|int %}
          
            ### angle safety test
            {% if tool_angle > servo_max_angle %}  
               {action_respond_info("Angle must be max %s"  %  servo_max_angle)}
            {% elif tool_angle == user_vars.switching_hotend[tool_name].angle %}
               {action_respond_info("The angle is unchanged.")}               
            {% else %}           
                   
               {% set _dummy = init[tool_name|lower].update( {'angle':tool_angle|int}  ) %} 
              
                 ### update variables
                 SET_GCODE_VARIABLE MACRO={macro_name} VARIABLE={name} VALUE="{init}"   
                 
                 ### save variables
                 SAVE_VARIABLE VARIABLE={name}  VALUE="{init}"
                 
                 ### set angle hotend
                 SWITCHING_HOTEND  E={tool_name}
                 {action_respond_info("The new angle for %s is %s"  %  (tool_name, tool_angle) )}  
 
                 # {action_respond_info("switching_hotend = %s" % init)}

            {% endif %}        
        {% else %}   
             {action_respond_info("name %s not defined for SWITCHING HOTEND macro" % params.EXTRUDER)}
        {% endif %}
     
    
    
#####################################################################
####   TURN SERVO_OFF  - delayed_gcode 
#####################################################################

[delayed_gcode SERVO_OFF]
initial_duration: 0.0
gcode:
   
   {% set user_vars = printer["gcode_macro VARIABLE"] %}
      
     ### switching servo OFF   
   {% for count in range(0, user_vars.switching_hotend.turn_off|length)  %}  
      {% if  user_vars.switching_hotend.turn_off[count] %}
          {% set servo_name =  user_vars.switching_hotend.name[count] %}   
             SET_SERVO SERVO={servo_name}   WIDTH=0    
           {action_respond_info("Switching servo %s turn off" % (servo_name))}    
          
          ### update info "turn_off" variable       
             {% set servo = user_vars.switching_hotend %} 
             {% set _dummy =servo.turn_off.update( {count|int: False}  ) %}
               SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=switching_hotend  VALUE="{servo}"          
        {% endif %}                   
   {% endfor %}

