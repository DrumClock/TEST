######################################################################################
# This file contains a configuration snippet for IDEX_SHAPER_CALIBRATE.
#
#
# Define HW configuration in printer.cfg
# 
#
# [input_shaper]
# #Intentionally empty for IDEX printer
#
# ## carriage 0 / extruder
# [adxl345 extruder]  ## -- don't change name! --
#
# [resonance_tester]
# accel_chip: adxl345 extruder
# probe_points: 134, 175, 5   ## X = 1/2 bed size
#
# ## carriage 1 / extruder 1
# [adxl345 extruder1]  ## -- don't change name! --
#
#

#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_input_shaper:  { }

  # example:  { 0: {'shaper_type_x': 'ei', 'shaper_freq_x': '29.0', 'shaper_type_y': 'mzv', 'shaper_freq_y': '28.2'},
  #             1: {'shaper_type_x': 'mzv', 'shaper_freq_x': '39.0', 'shaper_type_y': 'mzv', 'shaper_freq_y': '33.0'} }

                                    
#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _INIT_INPUT_SHAPER_IDEX]
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %}
  {% set recovery = printer.save_variables.variables %}
  {% set init = 'input_shaper' %}  
  
  {% if recovery[init] is defined %}     
      
    ### Settings input shaper for carriage 1
    {% if 1 in recovery[init] %}   
        ### axis X
        {% set dual_carriage_shaper = recovery[init].1.shaper_type_x %} 
        {% set dual_carriage_freq =  recovery[init].1.shaper_freq_x %} 
        ### axis Y
        {% set y_shaper = recovery[init].0.shaper_type_y %} 
        {% set y_freq = recovery[init].0.shaper_freq_y %} 
  
        SET_DUAL_CARRIAGE CARRIAGE=1
        SET_INPUT_SHAPER SHAPER_TYPE_X={dual_carriage_shaper} SHAPER_FREQ_X={dual_carriage_freq} SHAPER_TYPE_Y={y_shaper} SHAPER_FREQ_Y={y_freq}   
    {% endif %} 
  
    ### Settings input shaper for carriage 0
    {% if 0 in recovery[init] %}
        ### axis X
        {% set primary_carriage_shaper = recovery[init].0.shaper_type_x %} 
        {% set primary_carriage_freq = recovery[init].0.shaper_freq_x %} 
        ### axis Y
        {% set y_shaper = recovery[init].0.shaper_type_y %} 
        {% set y_freq = recovery[init].0.shaper_freq_y %} 
 
        SET_DUAL_CARRIAGE CARRIAGE=0
        SET_INPUT_SHAPER SHAPER_TYPE_X={primary_carriage_shaper} SHAPER_FREQ_X={primary_carriage_freq} SHAPER_TYPE_Y={y_shaper} SHAPER_FREQ_Y={y_freq}  
    {% endif %} 
        
     ### restore input_shaper variable from SD card 
     SET_GCODE_VARIABLE  MACRO=VARIABLE   VARIABLE={init}  VALUE="{recovery[init]}"
              
     {action_respond_info("Settings IDEX input shaper.") if printer.save_variables.variables.dump_list }  
  {% endif %}   
  
######################################################################
# IDEX_SHAPER_CALIBRATE  - MANAGEMENT
# Function description: 
#
#      automatic calibration for carriage 0 and carriage 1 
#      including saving to SD card and setting during firmware restart
#
#     !! do not confirm SAVE_CONFIG !!
#
#####################################################################

[gcode_macro IDEX_SHAPER_CALIBRATE]
gcode: 
  {% set user_vars = printer["gcode_macro VARIABLE"] %} 
  {% set name = "input_shaper" %}      #  name variable 
  {% set init = user_vars[name] %}     # default preset   

        
  ### Homing
  {% if "xy" not in printer.toolhead.homed_axes %} 
     G28    
  {% endif %}  
      
     
    ### activate carriage / extruder
   {% if 'gcode_macro ACTIVATE_CARRIAGE' in printer %}  
      ACTIVATE_CARRIAGE EXTRUDER=extruder
   {% else %}         
      ACTIVATE_EXTRUDER EXTRUDER=extruder
   {% endif %}
   
  ### shaper calibrate tool 0
  SET_DUAL_CARRIAGE CARRIAGE=0
  SHAPER_CALIBRATE CHIPS=extruder        #FREQ_START=20 FREQ_END=30
  SAVE_SHAPER_CALIBRATE CARRIAGE=0  
  
  RESPOND MSG=" !! do not confirm SAVE_CONFIG !!"
  M117 !! do not confirm SAVE_CONFIG !!

  ### activate carriage / extruder
   {% if 'gcode_macro ACTIVATE_CARRIAGE' in printer %}  
      ACTIVATE_CARRIAGE EXTRUDER=extruder1
   {% else %}   
      ACTIVATE_EXTRUDER EXTRUDER=extruder1
   {% endif %}
   
  ### shaper calibrate  tool 1
  SET_DUAL_CARRIAGE CARRIAGE=1
  SHAPER_CALIBRATE CHIPS=extruder1       #FREQ_START=20 FREQ_END=30
  SAVE_SHAPER_CALIBRATE CARRIAGE=1  

  RESPOND MSG=" !! do not confirm SAVE_CONFIG !!"
  M117 !! do not confirm SAVE_CONFIG !!
  
  ### save variable to SD card
  SAVE_USER_VARIABLE VAR={name}
  
  RESPOND MSG="FIRMWARE RESTART for the measurement application."
  M117 FIRMWARE RESTART for the measurement application. 

######################################################################

[gcode_macro SAVE_SHAPER_CALIBRATE]
gcode:  

  {% set user_vars = printer["gcode_macro VARIABLE"] %} 
  {% set name = "input_shaper" %}    #  name variable 
  {% set init = user_vars[name] %}     # default preset  
  
  {% set carriage = params.CARRIAGE|default(0) %}  
  {% set _dummy = init.update( { carriage|int : printer.configfile.save_config_pending_items[name] } ) %}     
     
  ### save variable 
  SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"  


######################################################################

 
[gcode_macro GET_SAVE_CONFIG]
gcode:  
  {action_respond_info("save_config = %s" % printer.configfile.save_config_pending_items)}  
  
  
#######################################################################
  
  
  
