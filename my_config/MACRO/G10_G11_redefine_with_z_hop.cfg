##########################################################
# Define HW configuration  (printer.cfg)
##########################################################

### enable G-code G10/G11
[firmware_retraction]
retract_length: 0.6
retract_speed: 30
unretract_extra_length: 0
unretract_speed: 30


#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:
 
variable_retract_z_hop: { }    # example:  {'enable': False, 'step': '0.400', 'speed': 4.0}


#####################################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#####################################################################

[gcode_macro _INIT_RETRACT_Z_HOP]
gcode:
  {% set user_vars = printer["gcode_macro VARIABLE"] %}

 ### init defautl param
   {% set name = "retract_z_hop" %}    # name variable
   {% set init = { } %}                # default preset   

   {% set val_step = printer.configfile.config['extruder'].nozzle_diameter %}
   {% set val_speed = printer.configfile.config['printer'].max_z_velocity %}
     
   {% set _dummy = init.update({'enable': false, 'step':val_step, 'speed': val_speed }) %} 
    
    {action_respond_info("Creating a list of variables for z-hop") if printer.save_variables.variables.dump_list}   
      SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
  
##########################################################
# PRINTER MANAGEMENT -  G10 / G11 with Z-HOP 
# Redefine G-code command G10 / G11 
#
#  SET_RETRACT_Z_HOP ENABLE=[0|1]  - "enable / disable"   Z-hop with retraction
#  SET_RETRACT_Z_HOP STEP=0.4      - set Z-hop step (mm)
#  SET_RETRACT_Z_HOP SPEED=600     - set Z-hop speed (mm/s)
#
#  GET_RETRACT_Z_HOP               - list actual variable 'retract_z_hop'
#
##########################################################

[gcode_macro SET_RETRACT_Z_HOP]
description: SET_RETRACT_Z_HOP  ENABLE=[0|1]  STEP=0.4   SPEED=60
gcode:
 
     {% set user_vars = printer["gcode_macro VARIABLE"] %} 
     {% set name = "retract_z_hop" %}    # name variable
     {% set init = user_vars[name] %}   


 {% if not params %}
    ### no params defined
    {action_respond_info("The ENABLE, STEP, or SPEED  parameters are not defined for the  SET_RETRACT_Z_HOP command")}  
    
 {% else %}      
     {% set enable_param=params.ENABLE|default(1) if params.ENABLE is defined else -1 %}
     {% set step_param=params.STEP|default(0.4) if params.STEP is defined else -1 %}
     {% set speed_param=params.SPEED|default(60) if params.SPEED is defined else -1 %}
       
     {% for key in params %}    
          
        {% if key|lower =='step' %} 
           ### set temporary variable 'change_step'
           {% set _dummy = init.update( {'change_step' : step_param|float} ) %}
                
        {% elif  key|lower =='speed' %} 
           {% set _dummy = init.update( {'speed' : speed_param|int} )  %}
                  
              
        {% elif  key|lower =='enable' %}        
              {% if  enable_param not  in ['0','1'] %}
                 {action_respond_info(" Invalid parameter ENABLE=%s " % enable_param )} 

              {% elif init.enable|lower == 'false' and enable_param|int != 1 %}
                 {action_respond_info("Z-hop with G10/G11 G-code is disabled.")} 

              {% elif  init.enable|lower == 'true' and enable_param|int != 0 %}
                  {action_respond_info("Z-hop with G10/G11 G-code is already active.")} 
                       
              {% else %}      
                 ### set temporary variable 'change_enable'
                 {% set _dummy = init.update( { 'change_enable':true} ) %}      
                 {action_respond_info(" Change ENABLE after G-code G11 " )}
                 
              {% endif %}   
        {% endif %}          
      {% endfor %}      
     
      ### update variable 'retract_z_hop'
        SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE={name}  VALUE="{init}" 
          
 {% endif %}  
 
#------------------------------------------------------------------------------- 

[gcode_macro GET_RETRACT_Z_HOP]
description: list of settings
gcode:
 
     {% set user_vars = printer["gcode_macro VARIABLE"] %} 
     {% set name = "retract_z_hop" %}    # name variable
     {% set init = user_vars[name] %} 
     
     ### list variable 'retract_z_hop'
        {action_respond_info("ENABLE=%s  STEP=%s   SPEED=%s" % (init.enable, init.step, init.speed))}  
          
#---------------------------------------------------------------------------------
         
[gcode_macro G10]
rename_existing: G10.1
description: Overide "G10"  retract macro
gcode:

    {% set user_vars = printer["gcode_macro VARIABLE"] %} 
    {% set name = "retract_z_hop" %}    # name variable
    {% set init = user_vars[name] %}     
    
       ###  firmware retract  
        G10.1

     ###  z-hop after G10  
     {% if init.enable and "xyz" in printer.toolhead.homed_axes %}
       {% set retract_pos = printer['gcode_move'].gcode_position.z %}   
       ### set temporary variable 'layer'
       {% set _dummy = init.update( { 'layer': retract_pos} ) %} 
       ### update variable 'retract_z_hop'
          SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE={name}  VALUE="{init}" 
          
          G91                                           # use relative coordinates
          G1 Z{init.step|float}  F{init.speed*60}       # Z-hop
          G90                                           # use absolute coordinates             
     {% endif %}     

#---------------------------------------------------------------------------------

[gcode_macro G11]
rename_existing: G11.1
description: Overide "G11" unretract macro
gcode:

    {% set user_vars = printer["gcode_macro VARIABLE"] %} 
    {% set name = "retract_z_hop" %}    # name variable 
    {% set init = user_vars[name] %}   
    
	        
     {% if init.enable and "xyz" in printer.toolhead.homed_axes %}
        {%  set unretract_pos = printer['gcode_move'].gcode_position.z %}       
        {%  set retract_pos = init.layer|float + init.step|float %}                         

      ### return Z-hop only in the same layer, not when changing layer height
        {% if retract_pos == unretract_pos %}       
          G91                                                # use relative coordinates
          G1 Z-{init.step|float}  F{init.speed*60}       # Z-hop
          G90                                                # use absolute coordinates             
       {% endif %}     
     {% endif %}
     
     ### firmware unretract     
       G11.1 
 
     ### change "enable" Z-hop after G11  
      {% if 'change_enable' in init %} 
        {% set value = false if init.enable else true %}  
        {% set info = 'enable'  if  value  else  'disable' %}   
          {action_respond_info(" Z-hop with G-code G10/G11 is %s "  % info )}
        
        {% set _dummy = init.update( { 'enable': value} ) %} 
         ### delete temporary variable 'change_enable'
        {% set _dummy = init.pop( 'change_enable' ) %}       

          {% if not value %}
             ### delete temporary variable 'layer'
             {% set _dummy = init.pop( 'layer' ) %} 
          {% endif %}   
                 
          ### update variable 'retract_z_hop'
            SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE={name}  VALUE="{init}" 
      {% endif %}    
      

     ### change "step" Z-hop after G11    
       {% if 'change_step' in init %}
         {action_respond_info(" Change Z-hop step after G-code G11 ")}
         
         {% set _dummy = init.update( { 'step': init.change_step} ) %}  
        ### delete temporary variable 'change_step'
         {% set _dummy = init.pop( 'change_step' ) %}

          ### update variable 'retract_z_hop'
           SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE={name}  VALUE="{init}" 
       {% endif %}    

       
     
      