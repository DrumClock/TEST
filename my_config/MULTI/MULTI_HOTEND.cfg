# This file contains a configuration snippet for MULTI HOTEND
#
# See docs/Config_Reference.md for a description of parameters.

#####################################################################
# All variables in this configuration, KLIPPER merges
# into one configuration  file [gcode_macro VARIABLE] .
#
# ATTENTION:
# If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_multi_hotend : { }

# e.g. = {0: 'extruder', 1: 'extruder2', 'feedrate': 30000, 'unload': 40, 'load': 60, 'parking': [-32, 278], 'speed': 25}

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros in printer
# configuration and runs them.
#
# The order in which macros are run can be defined 
# using names:  _INIT_A_* ,  _INIT_B_* ,  _INIT_C_*  etc.
#############################################################

[gcode_macro _INIT_MULTI_HOTEND]          
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %} 
   {% set recovery = printer.save_variables.variables %}
   
   {% set name = "multi_hotend" %}    # name variable
   {% set init = { } %}     # default preset   


  {% if name in recovery %}    # -------------------------------------------------
     ### restore variable from SD card        
     {action_respond_info("Restore loaded extruder after restart from SD card.") if printer.save_variables.variables.dump_list}  
   
     {% if user_vars.toolhead|length > 1  %}      
       {% set init_toolhead_1 = recovery[name].1 %}          
       {% set _dummy = init.update( {1: init_toolhead_1 } )   %}        
     {% endif %}

     {% set init_toolhead_0 = recovery[name].0 %} 
     {% set _dummy = init.update( {0: init_toolhead_0 } )  %}

   {% else %}  # -------------------------------------------------
   
       ### create variable         
        {% for  hotend in  user_vars.toolhead  %}
           {% set tool = user_vars.toolhead[hotend].0 %}
           {% set _dummy = init.update(  {hotend|int: tool } ) %}
        {% endfor  %}   
        
   {% endif %}  # -------------------------------------------------    

       ### define load/unload params for multi hotend  - load/unload == mm, speed = mm/s 
        {% set _dummy = init.update(  {'unload': 40 , 'load': 60,  'speed' : 25} ) %}
        
       ### define params for parking toolhead > distance 20 mm from endstop         
        {% if 'dual_carriage' in printer['motion_report'].steppers %}
               {% set axis = printer.configfile.settings.dual_carriage.axis %}  
               {% set endstop_0 =  ((printer.configfile.config[('stepper_'+axis)].position_endstop )|int + 20 )   %}
               {% set endstop_1 =  ((printer.configfile.config['dual_carriage'].position_endstop)|int - 20 )  %}
               
               {% set _dummy = init.update( {'parking': [endstop_0, endstop_1 ] , 'feedrate':30000  } ) %}
           
          {% else %}
              {% set endstop_0 =  ((printer.configfile.config[('stepper_x')].position_endstop )|int + 20 )  %}
              {% set _dummy = init.update( {'parking': [endstop_0 ] , 'feedrate':30000  } ) %}
     
         {% endif %}   
       
         
         ### save / update variable
         SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
              {action_respond_info("Creating a list of variables for multi hotend") if printer.save_variables.variables.dump_list}     
      

#####################################################################
# PRINTER MULTI_HOTEND MANAGEMENT
# Function description: 
#####################################################################
#
# Detects and automatically replaces the filament 
# in a multi-hotend type: xx IN 1 OUT
#
#####################################################################
[gcode_macro MULTI_HOTEND]  
description:  MULTI_HOTEND   EXTRUDER=extruder
gcode:

      {% set user_vars = printer["gcode_macro VARIABLE"] %} 

   ### filament insertion check for MULTI hotend during printing 
     {% set act_extruder =  printer.toolhead.extruder %}   
     {% set target_extruder = params.EXTRUDER|default("extruder") %}
     {% set act_carriage = 0 if printer.toolhead.extruder  in user_vars.toolhead[0] else 1 %}  
     {% set target_carriage = 0 if target_extruder in user_vars.toolhead[0] else 1 %}          

     {% if  target_extruder != user_vars.multi_hotend[target_carriage] %} 
            
                  Z_HOP_TOOL 
          
                ### Activate for  single carriage               
               {% if  act_carriage == target_carriage  %}                        
                  MULTI_HOTEND_ACTION  EXTRUDER={target_extruder} 

                  {%  if act_extruder == target_extruder %}
                     ### update variable active
                      {% set active = user_vars.active %}
                      {% set _dummy = active.z.update( {'hop_enable':true} ) %}      
                       SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=active  VALUE="{active}" 
                  {% endif %}

              {% else %}               
                 ### Activate for  dual carriage / gantry system                
                 {%  set systems = 'CARRIAGE' if 'dual_carriage' in printer['motion_report'].steppers
                                             else  'GANTRY'      if   printer.configfile.settings['printer'].kinematics == 'dualgantry_cartesian'    %}  
                        
                 PARK_{systems}       
                 ACTIVATE_TOOL EXTRUDER={target_extruder}      
                 SET_DUAL_CARRIAGE CARRIAGE={target_carriage}                   
                 MULTI_HOTEND_ACTION  EXTRUDER={target_extruder}
                 CHANGE_{systems}
                 TOOLHEAD_PRINT_FAN  
               {% endif %}   
           RESPOND MSG="The filament insertion check for MULTI hotend during printing its right."     
       {% endif %}  

 #####################################################################
[gcode_macro MULTI_HOTEND_ACTION]  
description:  MULTI_HOTEND_ACTION   EXTRUDER=extruder
gcode:
        {% set user_vars = printer["gcode_macro VARIABLE"] %}    
        
        {% set target_extruder = params.EXTRUDER|default("extruder") %}
        {% set target_carriage = 0 if target_extruder  in user_vars.toolhead[0] else 1 %}        
        {% set unload_extruder = user_vars.multi_hotend[target_carriage] %}    

         # {action_respond_info("target : %s  toolhead: %s" % (target_extruder,target_carriage))}     

           ### parking toolhead  
           MULTI_HOTEND_PARKING EXTRUDER={target_extruder}     
                   
           ###  unload filament > user_vars.multi_hotend[target_carriage]                   
           ACTIVATE_TOOL EXTRUDER={unload_extruder}          
           MULTI_CHANGE_FILAMENT ACTION=unload                 
           G4 P2000      
         
           ###  load filament   > target_extruder
           ACTIVATE_TOOL EXTRUDER={target_extruder}
           MULTI_CHANGE_FILAMENT ACTION=load 
           G4 P2000                       
                    
           ### restore parking toolhead     
           MULTI_HOTEND_RESTORE_PARKING  
    
      
 #####################################################################
[gcode_macro MULTI_CHANGE_FILAMENT]  
description: MULTI_CHANGE_FILAMENT ACTION=[load|unload]
gcode:

        {% set user_vars = printer["gcode_macro VARIABLE"] %} 
        {% set name = "multi_hotend" %}          # name variable
        {% set init = user_vars.multi_hotend %}     # default preset

        {% set action = params.ACTION | lower %}  
        {% set act_extruder = printer.toolhead.extruder %} 
        {% set act_carriage = 0 if act_extruder  in user_vars.toolhead[0] else 1 %}   

        {% set max_extrude = printer.configfile.settings[(act_extruder)].max_extrude_only_distance|int %}                
        {% set step = user_vars.multi_hotend[action] // max_extrude|int %} 
        {% set rest = user_vars.multi_hotend[action] % max_extrude|float %}       
       
       ###  only when printing and heated extruder
          {% if printer[act_extruder].can_extrude | lower == 'true'  
                and  printer['virtual_sdcard'].is_active %}

           SAVE_GCODE_STATE NAME=MULTI_HOTEND
           ###  load/unload activation for "max_extrude_only_distance"    
             M83
             G92 E0             
             {% for n in range(step) %}
               G1 E{max_extrude  if action =='load' else max_extrude*-1 } F{(user_vars.multi_hotend.speed * 60)|int}
             {% endfor %}       
             {% if rest > 0.0 %}
               G1 E{rest if action =='load' else rest*-1 } F{(user_vars.multi_hotend.speed * 60)|int} 
             {% endif %}  
             
               {% if action =='load' %}
                ### update and save variable after load filament  
                {% set _dummy = init.update( {act_carriage|int : act_extruder} ) %}
                SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
                SAVE_VARIABLE VARIABLE={name} VALUE="{init}"
              {% endif %}  

          RESTORE_GCODE_STATE NAME=MULTI_HOTEND
          {% endif %}   

 #####################################################################
[gcode_macro MULTI_HOTEND_PARKING]  
description:  MULTI_HOTEND_PARKING  EXTRUDER=extruder  POS=position  ( default is endstop + 20 mm )
gcode:     
 
         {% set user_vars = printer["gcode_macro VARIABLE"] %}  
         {% set gcode_position = user_vars.multi_hotend %}
          
         {% set target_extruder = params.EXTRUDER|default("extruder") %}
         {% set target_carriage = 0 if target_extruder  in user_vars.toolhead[0] else 1 %}           
         {% set parking_pos = params.POS|default(user_vars.multi_hotend.parking[target_carriage])  %}  
             
         {% set axis =  printer.configfile.settings.dual_carriage.axis  
                       if 'dual_carriage' in printer['motion_report'].steppers  
                          else 'x' %}       
    
       {%  set axis_pos = printer.gcode_move.gcode_position[axis] %}
         
        ### create variable 'gcode_position'    
        {% set _dummy = gcode_position.update( {'gcode_position':{ 'axis':axis , 'value':axis_pos|float }}  ) %}
           SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=multi_hotend  VALUE="{gcode_position}" 
    
         ### parking the active carriage to position 
             G1 {axis + ( parking_pos|string)}  F{user_vars.multi_hotend.feedrate}  
               
               
 #####################################################################
[gcode_macro MULTI_HOTEND_RESTORE_PARKING]  
description:  MULTI_HOTEND_RESTORE_PARKING  
gcode:     
 
    {% set user_vars = printer["gcode_macro VARIABLE"] %}  
    {% set init = user_vars.multi_hotend %}
       
    {% set axis = init.gcode_position.axis %}
    {% set position = init.gcode_position.value %}

    ### restore position befor park carrige         
       G1 {axis + ( position|string)}  F{user_vars.multi_hotend.feedrate}    

     ### delete variable 'gcode_position'           
       {% set _dummy = init.pop( 'gcode_position' ) %}
          SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=multi_hotend  VALUE="{init}"          
               

               
    
     
