# Still accurate as of 02 July 2024.
# Change to BTT klipper by entering the following via SSH

# cd ~/klipper
# git remote add eddy https://github.com/bigtreetech/klipper
# git fetch eddy
# git checkout eddy/eddy


###############################################
# BIGTRRETECH Eddy V1.0 - Leveling probe 
# info: https://github.com/bigtreetech/Eddy
###############################################

#----------- This section is only relevant for Eddy USB -------------------------

#[mcu eddy]
#serial: /dev/serial/by-id/usb-Klipper_rp2040_eddy-if00 
#restart_method: command

#[temperature_sensor btt_eddy_mcu]
#sensor_type: temperature_mcu 
#sensor_mcu: eddy  
#min_temp: 10 
#max_temp: 100 

#[temperature_probe btt_eddy]
#sensor_type: Generic 3950
#sensor_pin: eddy:gpio26
#horizontal_move_z: 2

#---------------------------------------------------------------------------------
[probe_eddy_current btt_eddy]
sensor_type: ldc1612
i2c_mcu: EBB_42  
i2c_bus: i2c3_PB3_PB4  
x_offset: 0
y_offset: -22
z_offset: 1
data_rate: 500

# after calibrate SAVE CONFIG - AL 3mm
reg_drive_current = 15
calibrate =
    0.050000:3258134.350,0.100000:3257646.209,0.150000:3257223.820,
    0.200000:3256720.200,0.250000:3256278.970,0.300000:3255873.164,
	0.350000:3255437.503,0.400000:3255031.030,0.450000:3254638.749,
	0.500000:3254248.266,0.550000:3253878.959,0.600000:3253502.593,
	0.650000:3253111.923,0.700000:3252742.269,0.750000:3252449.842,
	0.800000:3252039.396,0.850000:3251735.198,0.900000:3251381.340,
	0.950000:3251113.779,1.000000:3250802.411,1.050000:3250464.810,
	1.100000:3250161.281,1.150000:3249873.876,1.200000:3249567.575,
	1.250000:3249276.927,1.300000:3248984.411,1.350000:3248711.477,
	1.400000:3248473.616,1.450000:3248214.995,1.500000:3247961.017,
	1.550000:3247691.260,1.600000:3247462.318,1.650000:3247215.637,
	1.700000:3247004.793,1.750000:3246744.498,1.800000:3246542.620,
	1.850000:3246304.937,1.900000:3246084.641,1.950000:3245865.317,
	2.000000:3245654.939,2.050000:3245464.042,2.100000:3245266.008,
	2.150000:3245049.996,2.200000:3244872.926,2.250000:3244702.728,
	2.300000:3244488.688,2.350000:3244304.466,2.400000:3244123.673,
	2.450000:3243920.426,2.500000:3243754.002,2.550000:3243600.136,
	2.600000:3243416.528,2.650000:3243248.582,2.700000:3243089.670,
	2.750000:3242933.533,2.800000:3242781.998,2.850000:3242642.001,
	2.900000:3242479.983,2.950000:3242317.946,3.000000:3242187.652,
	3.050000:3242045.795,3.100000:3241878.229,3.150000:3241769.558,
	3.200000:3241638.502,3.250000:3241510.061,3.300000:3241344.041,
	3.350000:3241228.072,3.400000:3241103.178,3.450000:3240964.253,
	3.500000:3240853.941,3.550000:3240750.354,3.600000:3240614.319,
	3.650000:3240504.608,3.700000:3240395.819,3.750000:3240272.492,
	3.800000:3240132.618,3.850000:3240071.308,3.900000:3239941.996,
	3.950000:3239854.010,4.000000:3239718.456,4.050000:3239622.404	
calibration_temp = 0.000000


[bed_mesh]
speed: 120
horizontal_move_z: 1
mesh_min: 20,20
mesh_max: 260,280
algorithm: bicubic
probe_count: 10
scan_overshoot: 8
fade_start: 1.0
fade_end: 5.0

####################################################################

[gcode_macro TEST_SCAN_MODE_RAPID]
gcode:
    ##  Bed Mesh Rapid Scan - Eddy probe
    
       {% if 'probe_eddy_current' in printer['probe'].name %}
         {% if "xy" not in printer.toolhead.homed_axes %} G28 {% endif %}   

         SAVE_GCODE_STATE NAME=rapid                   
         BED_MESH_CALIBRATE METHOD=scan SCAN_MODE=rapid   
         RESTORE_GCODE_STATE NAME=rapid MOVE=1 MOVE_SPEED=200
         
         _GET_MESH_INFO         
         
       {% endif %}


#----------------------------------------------

[gcode_macro VARIABLE]
gcode:

variable_heightmap: { 'index': 0 }  # 'index': 0

#----------------------------------------------

[gcode_macro _GET_MESH_INFO]
gcode: 

     {% set user_vars = printer["gcode_macro VARIABLE"] %}
     {% set name = "heightmap" %}    # name variable
     {% set init = user_vars[name] %}     # default preset 
     {% set index = (user_vars[name].index) + 1 %}
     
     {% set mesh = {'points':[ ]} %}
     {% set points = (printer.configfile.save_config_pending_items['bed_mesh default']['points'])|replace("\n", ",") %}
      
        #{action_respond_info("points : %s" % points )}
 
      {% for count in points.split(",") %} 
        {% if count != "" %}
          {% set _dummy = mesh.points.append( count|float) %}
        {% endif %}
      {% endfor %}   

        # {action_respond_info("mesh = %s" % mesh )}
     
      {% set bed_min = (mesh.points|min)|round(3) %}     
      {% set bed_max = (mesh.points|max)|round(3) %}  
      {% set bed_range = (bed_max - bed_min)|round(3) %}  
       
         {action_respond_info("points= %s  min= %s  max= %s  range= %s" % ( mesh.points|length, bed_min, bed_max,bed_range))}


     {% set _dummy = init.update({'index': index  }) %}      
     {% set _dummy = init.update({ index : {'min':bed_min , 'max':bed_max, 'range':bed_range } }) %}      
     
     ### save variable 
      SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"  

     {% if index < 5 %}
   #     UPDATE_DELAYED_GCODE ID=_MEASURING_REPEAT DURATION=3
     {% endif %}

#----------------------------------------------

[delayed_gcode _MEASURING_REPEAT]
gcode: 

      BED_MESH_CALIBRATE METHOD=scan SCAN_MODE=rapid   
     _GET_MESH_INFO         
      GET_USER_VARIABLE VAR=heightmap
      