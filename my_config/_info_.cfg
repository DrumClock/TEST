default_t_extruder    >>> tool
default_carriage_tool  >>> toolhead
carriage_park       >>>  dual_carriage

---------------------------------------
printer['gcode_macro VARIABLE']

 {% set tool_nr = ( tool_name.lstrip("extruder") if tool_name.lstrip("extruder")|length != 0 else 0 )|int %}
 {% set tool_name = 'extruder' if tool_nr|int == 0 else 'extruder%s'% tool_nr|string %}
   
------------------------------------------
 # SET_GCODE_VARIABLE MACRO=<macro_name> VARIABLE=<name> VALUE=<value>
 " vzor pto _INIT_ makra "
 
 {% set macro_name = "VARIABLE" %}  # macro_name
 {% set name = "dual_carriage" %}  # variable name
 {% set init = { } %}         # default value   
 
 {% set _dummy = init.update( { } ) %} 
 {% set _dummy = init.update({ 'motion': [name] })  if init.motion is not defined  else  init.motion.append(name) %}
 {% set _dummy = init.update({ 'current': {stepper : run }})  if init.current is not defined else init.current.update( {stepper : run} ) %}  

 
  SET_GCODE_VARIABLE MACRO={macro_name} VARIABLE={name} VALUE="{init}"
  
------------------------------------------
  update variable bez u'extruder' 
  nutno použít  extruder.lower() nikoliv extruder|lower
  
  {% set extruder = params.EXTRUDER|default('extruder') %}  
  {% if extruder|lower in printer.heaters.available_heaters %}   
  {% set _dummy = init.update(  { tool : extruder.lower() } )  %}

------------------------------------------

 " převed params True/False na boolean hodnotu "
 {% set mode = true if params.WAIT|default(false)|lower == 'true' else false  %}   
 
--------------------------------------------

 {% set info = "Heating is ON." %}  
 {% set msg  = "%s  Printer cannot be switched off !" % info %}
  RESPOND MSG=" '{msg}' "  
  
--------------------------------------------  
  {% set hotend = params.T|int %}    # T= 0 | 1 | 2 | 3
  {% set hotend_map = {0: 0, 1: 0} %}
  {% set new_hotend = hotend_map.get(hotend, 9999) %}  #new_hotend  = 0 | 0 | 9999 | 99999

-------------------------------------------- 
 ###  check/set actual carriage according to the location of the 'extruder' on the 'toolhead'
 
    {% set ns=namespace(act_carriage=0) %}
    {% for index in user_vars.toolhead %}  
      {% if printer.toolhead.extruder in user_vars.toolhead[index] %}
        {% set ns.act_carriage = index %}    
      {% endif %}
    {% endfor %}    
    
   {action_respond_info("carriage = %s " % ns.act_carriage)}   
   
   ###  
   {action_respond_info("carriage = %s " % ns.act_carriage) if printer.save_variables.variables.dump_list }   # list = True/False
   {action_respond_info("carriage = %s " % ns.act_carriage) if printer.save_variables.variables.dump_list else action_respond_info("disable") }  
    
==================================================
'dual_carriage'
printer['toolhead'].dual_carriage = {'active_carriage': 'CARRIAGE_0', 'init_mode_positions': (None, None), 'mode': 'FULL_CONTROL'}

'dual_gantry'
printer['toolhead'].dual_carriage = {'mode': 'FULL_CONTROL', 'active_carriages': [0], 'actuator_carriage': 0}

------------------------ stejná funkce více variant -------------------------
1.
  {% if sensor_type == 'temperature_mcu' %}
    {% set icon = 'mcu'  %}
  {% elif sensor_type == 'temperature_host' %}
    {% set icon = 'mcu' %} 
  {% else %}
    {% set icon = 'temp' %} 
  {% endif %}

2.
  {% set icon = 'mcu' if sensor_type == 'temperature_mcu' 
            else 'mcu' if sensor_type == 'temperature_host' 
            else 'temp' %}
            
3.
  {% set icon = 'mcu' if sensor_type in ['temperature_mcu','temperature_host'] else 'temp' %}
  
  
 
------------------------ stejná funkce dve varianty -------------------------
1.
  {% if 'gcode_macro MULTI_HOTEND' in  printer 
     and act_extruder != user_vars.multi_hotend[act_carriage] 
     and printer['virtual_sdcard'].is_active == true %}
   {% set  act_extruder = user_vars.multi_hotend[act_carriage]  %}   
  {% endif %}   
  
  
2.
  {% set act_extruder = user_vars.multi_hotend[act_carriage] 
      if 'gcode_macro MULTI_HOTEND' in printer 
       and act_extruder != user_vars.multi_hotend[act_carriage] 
       and printer['virtual_sdcard'].is_active == true 
      else printer.toolhead.extruder %}   

   
-------------------------------------------------------------------------------

# tool = {'extruder':0, 'extruder1':0, 'extruder2':1, 'extruder3':1 }
# head_0 = " extruder , extruder1 "
# head_1 = " extruder2 , extruder3 "
 
  {% set ns=namespace(head_0=[], head_1=[])%}
      
  {% for extruder in  tool  %} 
   {% if tool[extruder] == 0  %}
     {% set _dummy = ns.head_0.append(extruder)  %} 
   {% elif tool[extruder] == 1  %}
     {% set _dummy = ns.head_1.append(extruder)  %}
   {% endif %}   
 {% endfor %} 
 
# you now have to lists that you can use anywhere 
# if you need a string output do 

{% set head_0 = ns.head_0|join(",") %}  
{% set head_1 = ns.head_1|join(",") %}  


------------------------ stejná funkce dve varianty -------------------------
1.
  ### Activate tool / carriage / gantry   
  {% if 'dual_carriage' in printer['motion_report'].steppers %}
    ACTIVATE_CARRIAGE  EXTRUDER={target_extruder}
  {% elif printer.configfile.settings['printer'].kinematics == 'dualgantry_cartesian' %}  
    ACTIVATE_GANTRY  EXTRUDER={target_extruder}
  {% else %}  
    ACTIVATE_TOOL EXTRUDER={target_extruder}
  {% endif %}   

2.
  {%  set systems = 'CARRIAGE' if 'dual_carriage' in printer['motion_report'].steppers
           else  'GANTRY'   if   printer.configfile.settings['printer'].kinematics == 'dualgantry_cartesian'  
           else  'TOOL'  %}  
         
          ACTIVATE_{systems}  EXTRUDER={target_extruder}

-------------------------------------------------------------------------------



 ------------------------------------------------------------------
 SET_ENDLESS_SPOOL ENABLE=1
 TRIGGER_RUNOUT SENSOR=extruder
 LED_SERVO_INFO S=tool_1 A=45
 
 M117 Regen. ~extruder~~right_arrow~~right_arrow~ ~s_extruder4~
 
------------------------ 17.1.2023 ---------------------------------------------
 
printer['gcode_macro VARIABLE'].aaa = {'printer': '4EX2'}
printer['gcode_macro VARIABLE'].active = {'z': {'restore': 0.0, 'print_offset': 0.0, 'hop': 4.0}, 'mode': 0}
printer['gcode_macro VARIABLE'].beeper = {'enable': True, 'silent': False, 'output_pin': 'beeper'}
printer['gcode_macro VARIABLE'].dual_carriage = {'movespeed': 500, 'auto_exchange': True, 'feedrate': 30000, 'sync_exchange': True, 'parking': [-52, 298]}
printer['gcode_macro VARIABLE'].endless_spool = {'retract': 1, 'extrude': 2, 'enable': False}
printer['gcode_macro VARIABLE'].extrude_factor = {'extruder3': 1.0, 'extruder1': 1.0, 'extruder2': 1.0, 'extruder': 1.0}
printer['gcode_macro VARIABLE'].fan = {'active': 0, 'menu': True, 'index': ['fan', 'fan1']}
printer['gcode_macro VARIABLE'].filament_sensor = {'defined': True, 'count': 4, 'switch': ['extruder', 'extruder1', 'extruder2', 'extruder3']}
printer['gcode_macro VARIABLE'].heater = {1: 'heater_1'}
printer['gcode_macro VARIABLE'].hotend_offset = {0: {'y': 0.0, 'x': 0.0, 'z': 0.0}, 1: {'y': 0.0, 'x': -10.0, 'z': 0.0}, 2: {'y': 0.0, 'x': 0.0, 'z': 0.0}, 3: {'y': 0.0, 'x': -10.0, 'z': 0.0}, 'change_T0': False}
printer['gcode_macro VARIABLE'].idex_mode = {'active': 1, 'movespeed': 500, 'feedrate': 30000, 'position': {'dupl_max': 120, 'dupl_min': 52, 'mirrored': 240}, 'carriage_offset': 0}
printer['gcode_macro VARIABLE'].neopixel = {'index': {0: 'axis_X'}, 'RGB': {0: '0,0,0'}, 'enable': True, 'menu': {'active': 0}}
printer['gcode_macro VARIABLE'].offset_temp = {'extruder3': 0, 'extruder1': 0, 'extruder2': 0, 'extruder': 0}
printer['gcode_macro VARIABLE'].print_mode = {'active': 1, 'enable': False}
printer['gcode_macro VARIABLE'].restore_variable = ['hotend_offset']
printer['gcode_macro VARIABLE'].servo = {'index': {0: 'tool_1', 1: 'tool_2'}, 'enable': True, 'angle': {0: '--', 1: '--'}, 'menu': {'active': 0, 'angle_2': 135, 'angle_1': 45}}
printer['gcode_macro VARIABLE'].switching_extruder = {'enable': True, 'extruder1': 'extruder', 'extruder3': 'extruder2'}
printer['gcode_macro VARIABLE'].switching_hotend = {'enable': True, 'name': {0: 'tool_1', 1: 'tool_2'}, 'park': {0: 'extruder', 1: 'extruder3'}, 'turn_off': {0: False, 1: False}, 'extruder3': {'delay': 200, 'index': 1, 'angle': 135, 'off': False}, 'extruder1': {'delay': 200, 'index': 0, 'angle': 135, 'off': False}, 'extruder2': {'delay': 200, 'index': 1, 'angle': 45, 'off': False}, 'extruder': {'delay': 200, 'index': 0, 'angle': 45, 'off': False}}
printer['gcode_macro VARIABLE'].sync_switching_tool = {'active': 'T0', 'enable': True, 'T0': {0: 'extruder', 1: 'extruder2'}, 'T1': {0: 'extruder1', 1: 'extruder3'}}
printer['gcode_macro VARIABLE'].tmp = 0
printer['gcode_macro VARIABLE'].tool = {0: 'extruder', 1: 'extruder1', 2: 'extruder2', 3: 'extruder3'}
printer['gcode_macro VARIABLE'].tool_change = {'delay': {'extruder3': 250, 'extruder1': 250, 'extruder2': 250, 'extruder': 250}, 'menu': 'extruder', 'enable': True, 'axis_z': {'restore': 0.0, 'hop': 3.0}, 'filament': {'load': 0.5, 'speed': 45, 'unload': 1.0}}
printer['gcode_macro VARIABLE'].toolhead = {0: ['extruder', 'extruder1'], 1: ['extruder2', 'extruder3']}
printer['gcode_macro VARIABLE'].tower = {'tool': {0: {'nozzle': 0.4, 'z': 0.0}, 1: {'nozzle': 0.4, 'z': 0.0}, 2: {'nozzle': 0.6, 'z': 0.0}, 3: {'nozzle': 0.8, 'z': 0.0}}, 'enable': False, 'pos': {'y': 200.0, 'x': 200.0}, 'change': True, 'gap': {'y': 40, 'x': 50}}

_A_INIT_TOOL
_B_INIT_TOOLHEAD
_C_INIT_HOTEND_OFFSET
_D_INIT_TOOL_CHANGE_PARAM
_E_INIT_SERVO
_F_INIT_SWITCHING_EXTRUDER
_G_INIT_SWITCHING_HOTEND
_GG_INIT_PARK_SWITCHING_HOTEND
_INIT_AUTO_POWER_OFF
_INIT_BEEPER
_INIT_DUAL_CARRIAGE
_INIT_ENDLESS_SPOOL
_INIT_EXTRUDE_FACTOR
_INIT_FAN_GENERIC
_INIT_FILAMENT_SENSOR
_INIT_HEATER_GENERIC
_INIT_IDEX_MODE
_INIT_NEOPIXEL
_INIT_OFFSET_TEMP
_INIT_SET_PRINT_MODE
_INIT_SYNC_CHANGE_CARRIAGE
_INIT_SYNC_SWITCHING_TOOL
_INIT_TEMP_SENSOR
_INIT_WIPE_TOWER
_Z_INIT_RESTORE_USER_VARIABLE