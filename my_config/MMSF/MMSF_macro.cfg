##########################################################
# Define HW configuration in printer.cfg
#
#  -- Same name for [extruder_stepper] and [servo] -- 
#
#  -- for material 0,1 --
# [extruder_stepper switching_0]  
# [servo switching_0]
#
#  -- for material 2,3 --
# [extruder_stepper switching_1]  
# [servo switching_1]
#
#                               etc.
##########################################################


#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_multi_material: { }   


# e.g.  multi_material = { 'active': None, 'feedrate': 30000, 'unload': 40, 'load': 60, 'speed': 25, 'count':4,
#                          0 : {'index':'switching_0', 'sync':'extruder', 'angle':45,  'rotation': 1 },
#                          1 : {'index':'switching_0', 'sync':'extruder', 'angle':135, 'rotation': -1 },
#                          2 : {'index':'switching_1', 'sync':'extruder', 'angle':45,  'rotation': - },
#                          3 : {'index':'switching_1', 'sync':'extruder', 'angle':135, 'rotation': -1 },
#                        'stepper': ['switching_0', 'switching_1'],
#				         }


#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################
  
[gcode_macro _INIT_MULTI_MATERIAL]
gcode:

     {% set user_vars = printer["gcode_macro VARIABLE"] %}
     {% set recovery = printer.save_variables.variables %}
     
     {% set name = "multi_material" %}    # name variable   
     {% set init = user_vars[name] %}     # default preset 
     {% set ns = namespace(nr_filament=0|int) %}   
   
     {% set _dummy = init.update({ 'active': None , 'feedrate': 30000, 'unload': 40, 'load': 60, 'speed': 25})  %}

     {% for object in printer.configfile.config|sort %}
   
       {% if object.split(' ')[0] == 'extruder_stepper' %}  
        # {action_respond_info("object = %s" % (object))}        
       
       {% set index = object.split(' ')[1] %} 
       {% set sync = printer.configfile.settings[object].extruder  %} 

       {% set _dummy = init.update({ 'stepper': [index] })  if init.stepper is not defined  else  init.stepper.append(index) %}
            
       ### Defines only two filaments for each servo / stepper
        {% for count in range(0, 2) %}
          {% set angle = 45 if loop.index0 == 0 else 135 %}     
          {% set rotation = 1 if loop.index0 == 0 else -1 %}
                          
          {% set _dummy = init.update({ ns.nr_filament: {'index': index , 'sync': sync, 'angle': angle|int, 'rotation': rotation|int} })  %}
                                     
          {% set ns.nr_filament =  ns.nr_filament + 1 %}
        {% endfor %} 
     
      {% endif %}
    {% endfor %}  
     
       {% set _dummy = init.update({ 'count': ns.nr_filament|int })  %}
      
       {% if name in recovery %}    
              ### restore variable from SD card        
               {action_respond_info("Restore loaded materialr after restart from SD card.") if printer.save_variables.variables.dump_list}  
               {% set _dummy = init.update( {'active': recovery[name].active } )   %}        
       {% endif %}
            
    SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
       #{action_respond_info("%s = %s" % (name,init))}      
      {action_respond_info("Creating a list of multi_material variables ") if printer.save_variables.variables.dump_list}

     
#####################################################################
# Multi Material - Switching Filament (MMSF) MANAGEMENT
# Function description: 
#####################################################################   
      
[gcode_macro T0]
gcode: 
  DEFINE_MATERIAL  T=0
           
[gcode_macro T1]
gcode: 
  DEFINE_MATERIAL  T=1
 
[gcode_macro T2]
gcode: 
  DEFINE_MATERIAL  T=2
          
[gcode_macro T3]
gcode: 
  DEFINE_MATERIAL  T=3 	  

[gcode_macro T4]
gcode: 
  DEFINE_MATERIAL  T=4 	  

[gcode_macro T5]
gcode: 
  DEFINE_MATERIAL  T=5 	 
  

####################################################################
				   				   
[gcode_macro DEFINE_MATERIAL]
description: Define the material for G-code 'Txx'.
gcode:

    {action_respond_info("-- DEFINE_MATERIAL T=%s " % (params.T))}
    ### params.T = [0|1|2|3]
        
      {% set user_vars = printer["gcode_macro VARIABLE"] %}
      {% set target_material = params.T|default(0)|int %}   
      {% set act_speed = printer.gcode_move.speed %}   

     {% if user_vars.multi_material.count  <  target_material + 1 %}
        ### ignore G-code Tx command if not defined material
         {action_respond_info("The T%s is not defined for material." % (target_material))} 
     {% else %} 

      {% if target_material != user_vars.multi_material.active %}
     
# ------- cutting material ----------------------    
   
         {% if 'gcode_macro CUTTING_MATERIAL' in printer and  user_vars.multi_material.active != None  %}
              CUTTING_MATERIAL
          {% endif %}  
        
# ------- unload material ----------------------  
 
         {% if 'gcode_macro CHANGE_MATARIAL ' in printer  and  user_vars.multi_material.active != None %}
               CHANGE_MATARIAL  ACTION=unload
          {% endif %}  
 
# ---------------------------   
            
          {% if 'gcode_macro SET_SWITCHING_MATERIAL' in printer  %} 
               SET_SWITCHING_MATERIAL    T={target_material}
          {% endif %}  
 
# -------- load material --------------------  

          {% if 'gcode_macro CHANGE_MATARIAL ' in printer %}
               CHANGE_MATARIAL  ACTION=load
          {% endif %}  
    
# ----------------------------   
       ### restore speed
       G1 F{act_speed} 
     {% else %}  
        {action_respond_info("The T%s for the material is already set." % (target_material))} 
     {% endif %}   
  {% endif %}    				   
       
       
####################################################################	

[gcode_macro SET_SWITCHING_MATERIAL]
description: SET_SWITCHING_MATERIAL    T=0
gcode:

     {action_respond_info("-- SET_SWITCHING_MATERIAL  T=%s " % (params.T))}
     ### params.T = [0|1|2|3]  
        
      {% set user_vars = printer["gcode_macro VARIABLE"] %}      
      
      {% set target_material = params.T|default(0)|int %}   
                  
      {% set sync_index =  user_vars.multi_material[target_material].index %}
      {% set sync_extruder =  user_vars.multi_material[target_material].sync %}
      {% set servo_angle =  user_vars.multi_material[target_material].angle %}
      {% set rotation  =  user_vars.multi_material[target_material].rotation %}         
      {% set distance = printer.configfile.settings['extruder_stepper '+sync_index].rotation_distance  %}      
  
         
      ### Disable other synchronization SWITCHING extruder_stepper         
        {% for stepper in user_vars.multi_material.stepper %}
          {% if sync_index != stepper %}
             SYNC_EXTRUDER_MOTION EXTRUDER={stepper}  MOTION_QUEUE=     
          {% endif %}
        {% endfor %}     
  
  
        ### set SWITCHING extruder_stepper 
             SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER={sync_index} DISTANCE={distance * rotation }      
             SYNC_EXTRUDER_MOTION EXTRUDER={sync_index}  MOTION_QUEUE={sync_extruder}      
             
             
        ### set SWITCHING servo
              SET_SERVO SERVO={sync_index} angle={servo_angle}
              G4 P300 

        ### update info "angle" variable.servo  for M280
         {% if 'gcode_macro M280' is defined %} 
            {% set var_servo = user_vars.servo %}
              {% for name in var_servo.index|sort %}
                {% if sync_index == var_servo.index[name] %}        
                  {% set _dummy = var_servo.angle.update( { name|int : servo_angle } ) %} 
                  SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=servo VALUE="{var_servo}"
                {% endif %} 
              {% endfor %} 
         {% endif %}        
              
        ### LED indication of angle
         {% if 'gcode_macro LED_SERVO' is defined %} LED_SERVO {% endif %}

        ### update variable for active matarial
          {% set name = "multi_material" %}    # name variable   
          {% set init = user_vars[name] %}     # default preset 
          {% set _dummy = init.update({ 'active': target_material })  %}
      
          SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
          
              
####################################################################	  
   
[gcode_macro  CUTTING_MATERIAL]  
description: CUTTING_MATERIAL    
gcode:            
        {action_respond_info("-- CUTTING_MATERIAL")}
        
        {% set user_vars = printer["gcode_macro VARIABLE"] %} 
        
       

####################################################################	  
   
[gcode_macro  CHANGE_MATARIAL]  
description: CHANGE_MATARIAL   ACTION=[load|unload]
gcode:            
        {action_respond_info("-- CHANGE_MATARIAL ACTION=%s " % (params.ACTION))}
        ### params. ACTION=[load|unload]  
         
        {% set user_vars = printer["gcode_macro VARIABLE"] %} 
        {% set action = params.ACTION | lower %}  

         
         
        
        