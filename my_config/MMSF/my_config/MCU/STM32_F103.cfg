#  1)
#    make menuconfig
#
#  [*] Enable extra low-level configuration options
#    Micro-controller Architecture (STMicroelectronics STM32)  --->
#    Processor model (STM32F103)  --->
#  [ ] Only 10KiB of RAM (for rare stm32f103x6 variant)
#  [ ] Disable SWD at startup (for GigaDevice stm32f103 clones)
#    Bootloader offset (8KiB bootloader)  --->
#    Clock Reference (8 MHz crystal)  --->
#    Communication interface (USB (on PA11/PA12))  --->
#    USB ids  --->
#  ()  GPIO pins to set at micro-controller startup
#
#
#  2) 
#    set BOOT0 -> 0 
#        BOOT1 -> 1
#
#  3)
#    make flash FLASH_DEVICE=1eaf:0003
#
#  4) 
#    set BOOT0 -> 0 
#        BOOT1 -> 0

#---------------------------------------

[mcu STM_F103]
serial:/dev/serial/by-id/usb-Klipper_stm32f103xe_52FF70067875535649421167-if00

[temperature_sensor STM_F103]
sensor_mcu: STM_F103
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100


#-------------------------------

[output_pin led_lower_0]   
pin: STM_F103:PB12
value: 0

[output_pin led_upper_0]   
pin:  STM_F103:PB13
value: 0

[output_pin led_lower_1]   
pin:  STM_F103:PB14
value: 0

[output_pin led_upper_1]   
pin:  STM_F103:PB15
value: 0



########################################################################################## 

# HW configuration
#
# for servo index 0
# [output_pin led_lower_0]   
# [output_pin led_upper_0]   
#
# for servo index 1
# [output_pin led_lower_1]   
# [output_pin led_upper_1]   
#
#
#  macro use variable:
#  user_vars.servo = {'index': {0: 'tool_1', 1: 'tool_2'}
#
#  --------------------------------------------------------------------
#
# Each servo has two LEDs:
#
# led_lower - lights up when the angle is 0-89
# led_upper - lights up when the angle is 91-180
#
# When the servo angle is 90 - both LEDs light up
#
#  --------------------------------------------------------------------
 
[gcode_macro LED_SERVO]
gcode:
   
  {% set user_vars = printer["gcode_macro VARIABLE"] %}
                  
   {% for servo_nr in user_vars.servo.index %}
      {% set servo_index = ("servo %s") % ( user_vars.servo.index[servo_nr|int] ) %}
      {% set led_lower = 0 %} 
      {% set led_upper = 0 %} 
          
      {% if printer[servo_index].value != 0.0 %}     
        {% set cfg = printer.configfile.settings[servo_index|lower] %}
        {% set calc_angle = (printer[servo_index].value * 0.020 - cfg.minimum_pulse_width) / 
            ((cfg.maximum_pulse_width - cfg.minimum_pulse_width) / cfg.maximum_servo_angle) %}
     
         {% set led_lower = 1  if  calc_angle|int <= 90 else 0 %}        # led lower position servo
         {% set led_upper = 1  if  calc_angle|int >= 90 else 0 %}        # led upper position servo
              
       {% endif %}

     SET_PIN PIN={'led_lower_'+servo_nr|string}    VALUE={led_lower }      
     SET_PIN PIN={'led_upper_'+servo_nr|string}    VALUE={led_upper }        
             
   {% endfor %}

################################################################################################xx

[gcode_macro _INIT_INFO_MULTI_HOTEND]          
gcode:
 
#
# [output_pin led_lower_0]     >> T0
# [output_pin led_upper_0]     >> T1
#
# [output_pin led_lower_1]     >> T2
# [output_pin led_upper_1]     >> T3
#
# 
        
  {% set user_vars = printer["gcode_macro VARIABLE"] %}
  {% set recovery = printer.save_variables.variables %} 

 {% if 'multi_hotend' in recovery %}
   SET_PIN PIN=led_lower_0  VALUE={1 if recovery.multi_hotend.0 == 'extruder' else 0 }
   SET_PIN PIN=led_upper_0  VALUE={1 if recovery.multi_hotend.0 == 'extruder1' else 0 } 

   ### for IDEX
   {% if user_vars.toolhead|length > 1  %}   
     SET_PIN PIN=led_lower_1  VALUE={1 if recovery.multi_hotend.1 == 'extruder2' else 0 }
     SET_PIN PIN=led_upper_1  VALUE={1 if recovery.multi_hotend.1 == 'extruder3' else 0 }
   {% endif %}  
 {% endif %}
  
    
     


  
     