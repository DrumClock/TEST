#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_filament_sensor:  {  } 

# e.g. filament_sensor {'defined': True,
#                        'motion': ['extruder', 'extruder1'],
#                        'switch': ['filament', 'filament1'],
#                        'count': 4}

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _INIT_FILAMENT_SENSOR] 
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %}
   
   ### update filament_sensor variable by configuration of printer  

   {% set name = "filament_sensor" %}      # name variable
   {% set init = { 'defined' : False } %}  # default preset 
   {% set ns = namespace(index=1|int) %}
   
   ### search filament sensor 
    {% for object in printer.configfile.config|sort %}        

       {% if object.split(' ')[0] == 'filament_switch_sensor' %}   
           {% set type = 'switch' %}           
       {% elif object.split(' ')[0] == 'filament_motion_sensor' %} 
           {% set type = 'motion' %}           
       {% else %}
            {% set type = 'false' %}              
       {% endif %}  

       ### update variable  
       {% if type != 'false' %}  
          {% set _dummy = init.update(  {'defined' : True } ) %}         
             {% set name =  (object.split(' ')[1]) %}
            
        {% if type == 'motion' %}  
            {% set _dummy = init.update({ 'motion': [name]})  if init.motion is not defined  else  init.motion.append(name) %}
        {% elif type == 'switch' %}  
            {% set _dummy = init.update({ 'switch': [name]})  if init.switch is not defined  else  init.switch.append(name) %}
        {% endif %}  

        ## LCD menu
        {% set _dummy = init.update({ 'active': 0|int })  %}
        {% set _dummy = init.update({ 'index': [name]})  if init.index is not defined  else  init.index.append(name) %}
        {% set _dummy = init.update({ 'count': ns.index })  %}
        {% set ns.index = ns.index + 1 %}

       {% endif %}
     {% endfor %}   

     ### save variable 
     SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"

    ### get info 
    # {action_respond_info("%s = %s" % (name,init))} 
     {action_respond_info("Creating a list of variables for filament sensor." ) if printer.save_variables.variables.dump_list}


###############################################################################

[gcode_macro TRIGGER_RUNOUT]
gcode:
 
   {% set user_vars = printer["gcode_macro VARIABLE"] %}     

  ### params.TOOL= <tool>
   {% set  trig_tool =  params.TOOL |int %}
  ### params.SENSOR= < switch / motion >
   {% set  trig_sensor =  params.SENSOR |lower %}  

    # {action_respond_info("Tool %s  Sensoer %s" % (trig_tool, trig_sensor))}	


   {% if trig_sensor == 'switch' %}
    {action_respond_info("Activated runout switch sensor")}	
	## include mainsail.cfg 
    PAUSE X=60 Y=0 Z_MIN=20    
     {% if 'gcode_macro SET_BEEPER' in printer %}  
       SET_BEEPER P=250 R=3
     {% endif %}
   RESPOND MSG="End of filament!"
   M117 End of filament!
	
   
   {% elif trig_sensor == 'motion' %}
     {action_respond_info("Activated runout encoder sensor")}	 
	 ## include mainsail.cfg 
     PAUSE X=60 Y=0 Z_MIN=20    
     {% if 'gcode_macro SET_BEEPER' in printer %}  
       SET_BEEPER P=125 R=3
     {% endif %}
   RESPOND MSG="Filament does not move!"
   M117 Filament does not move!
      
   {% else %}   
     {action_respond_info("params SENSOR = %s not defined" % trig_sensor) } 
   
   {% endif %}