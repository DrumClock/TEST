# -------------------------------------------------------------------
# Define HW configuration in printer.cfg
#
#
# [gcode_button safety_switch]    ## detect filament OUT
# pin:  PC8                                  
# press_gcode: 
#  
#
# ---------------------------------------------------------------


#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
############################################################# 
 
[gcode_macro _INIT_SAFETY_SWITCH]  
gcode:           
 
   #  {% set user_vars = printer["gcode_macro VARIABLE"] %}
         
   #  {% set name = "change" %}    # name variable   
   #  {% set init = user_vars[name] %}     # default preset           

     ### Define the distance, load = cutting filament to switch / unload = switch to park filament
     #{% set _dummy = init.update({ 'switch':  {'unload': 50, 'load': 110, 'speed': 20} })  %}
	 
     ### update variable 'change'
      #SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
      #{action_respond_info("%s = %s" % (name,init))}      
     # {action_respond_info("Creating a list of Change variables ") if printer.save_variables.variables.dump_list}


#####################################################################
# SAFETY SWITCH MANAGEMENT
# Function description: 
#####################################################################   

[gcode_macro SAFETY_SWITCH]  
description: SAFETY_SWITCH   ACTION=[load|unload] 
gcode:     

        ## info: QUERY_BUTTON button=safety_switch    RELEASED / PRESSED
        ## filament detected -  'RELEASED'
        ## filament not detected - 'PRESSED'  
        
        {% set user_vars = printer["gcode_macro VARIABLE"] %} 
        {% set name = "change" %}    # name variable   
        {% set init = user_vars[name] %}     # default preset
        
        {% set action = params.ACTION |default('unload')| lower %}  
        {% set switch_state = printer['gcode_button safety_switch'].state %}    
 
        {% if switch_state == 'RELEASED' and action == 'unload' %}    ; filament not unload
         ### safety unload filament
            SAFETY_STEP_SWITCH  ACTION=unload
 
        {% elif switch_state == 'PRESSED' and action == 'load' %}    ; filament not load
         ### safety load filament 
            SAFETY_STEP_SWITCH  ACTION=load
 
        {% endif %}


#############################################################################################
[gcode_macro SAFETY_STEP_SWITCH]  
description: SAFETY_STEP_SWITCH  ACTION=[load|unload]
gcode:        

        ## ACTION=[load|unload]

        {% set user_vars = printer["gcode_macro VARIABLE"] %} 
        {% set name = "change" %}    # name variable   
        {% set init = user_vars[name] %}     # default preset
        
        {% set action = params.ACTION |default('unload')| lower %}          
        {% set rotation  = -1  if  action =='unload'  else  1 %}
        {% set switch_state = 'RELEASED' if  action =='unload' else 'PRESSED'  %}
        
#------------------------------------------------      

    ### load/unload step for activation switch  
        {% set  step = 15|int %}           # number of repeat
        {% set  repeat_length = 2|int %}   # in mm
       
        {% for count in range(0, step) %}      # e.g. 2*15= 30 mm         
           {% if  printer['gcode_button safety_switch'].state == switch_state %}            
             M83
             G92 E0             
             G1 E{repeat_length * rotation}   F{init.switch.speed *60}   
           {% endif %}  
        {% endfor %}    
        
          G1 E{repeat_length *2 * rotation}   F{init.switch.speed *60} 
          REST_STEP_SWITCH  ACTION={action}
          
#########################################################################

[gcode_macro REST_STEP_SWITCH]  
description: REST_STEP_SWITCH  ACTION=[load|unload]
gcode:        

        ## ACTION=[load|unload]

        {% set user_vars = printer["gcode_macro VARIABLE"] %} 
        {% set name = "change" %}    # name variable   
        {% set init = user_vars[name] %}     # default preset
        
        {% set action = params.ACTION |default('unload')| lower %}          
        {% set rotation  = -1  if  action =='unload'  else  1 %}
        {% set switch_state = 'RELEASED' if  action =='load' else 'PRESSED'  %}

         {% set msg = ("Switch %s " % (printer['gcode_button safety_switch'].state)) %}   
         {% if printer.configfile.config['display'] %}   M117 {msg}   {% endif %}  
         RESPOND MSG='{msg}' 
         PAUSE

   {% if printer['gcode_button safety_switch'].state == switch_state %}
   
      ### load/unload to position on print  
        {% set distance  = init.switch[action] %}  
        {% set act_extruder = printer.toolhead.extruder %} 
        
        {% set max_extrude = printer.configfile.settings[(act_extruder)].max_extrude_only_distance|int %}  
        {% set step = distance // max_extrude|int %}
        {% set rest = distance % max_extrude|float %}        

         M83
         G92 E0                
          {% for n in range(step) %}
            G1 E{max_extrude * rotation} F{init.switch.speed *60}
          {% endfor %}	
          {% if rest > 0.0 %}
            G1 E{rest * rotation} F{init.switch.speed *60} 
          {% endif %}  
         M400
         
    {% else %}    
         {% set msg = ("Material not %s to safety switch" % (action)) %}   
         {% if printer.configfile.config['display'] %}   M117 {msg}   {% endif %}  
         RESPOND MSG='{msg}' 
         PAUSE
   
    {% endif %}

        
                     
  
         
  
