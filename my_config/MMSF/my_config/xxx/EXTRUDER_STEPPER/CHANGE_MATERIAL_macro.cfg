##########################################################
# Define HW configuration in printer.cfg
#
# [gcode_button safety_switch]     ## -- don't change name! --
# pin: ^PB13        ## E3-STOP 
# press_gcode: 
#                               
##########################################################

#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_change: { }   

# e.g. change = {'loaded': false/true, 
#                'position': [240, 240],
#                'feedrate': {'move': 30000},
#                'action':   {'unload': 140, 'load': 140, 'speed': 20}
 

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################
  
[gcode_macro _INIT_CHANGE_MATERIAL]
gcode:

     {% set user_vars = printer["gcode_macro VARIABLE"] %}
     {% set recovery = printer.save_variables.variables %}
     
     {% set name = "change" %}    # name variable   
     {% set init = user_vars[name] %}     # default preset 
     
     
     ## User define variable - position[X,Y], feedrate, speed .....
     {% set _dummy = init.update({ 'loaded': false if user_vars.active.material == None else true })  %}
     {% set _dummy = init.update({ 'position': [120, 120] })  %}
     {% set _dummy = init.update({ 'feedrate': {'move': 30000} })  %}
     {% set _dummy = init.update({ 'action':   {'unload': 150, 'load': 150, 'speed': 20} })  %}
     
      SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
      #{action_respond_info("%s = %s" % (name,init))}      
      {action_respond_info("Creating a list of Change variables ") if printer.save_variables.variables.dump_list}
      
#####################################################################
# CHANGE MATERIAL MANAGEMENT
# Function description: 
#####################################################################

[gcode_macro CHANGE_MATERIAL]  
description: CHANGE_MATERIAL   ACTION=[load|unload]  LENGTH=[40]
gcode:            
        
        ### params ACTION=[load|unload]  
        ### params LENGTH=[40] 
                              
        {% set user_vars = printer["gcode_macro VARIABLE"] %} 
        {% set name = "change" %}    # name variable   
        {% set init = user_vars[name] %}     # default preset
             
        {% set act_extruder = printer.toolhead.extruder %}             
   
   {% if params.ACTION is undefined %}
        ### no params defined
        {action_respond_info("The ACTINO must be defined")}   
        
   {% else %} 
       ### only when heated extruder 
        {% if printer[act_extruder].can_extrude | lower == 'true' %}
           SAVE_GCODE_STATE NAME=CHANGE_MATERIAL

           {% set msg = ("%s Fil. %s" % (params.ACTION |capitalize, user_vars.active.material+1 if user_vars.active.material != None else '')) %}           
           {% if printer.configfile.config['display'] %}   M117 {msg}   {% endif %}  
           RESPOND MSG='{msg}' 
 
           {% set action = params.ACTION | lower %}          
        
           {% if  params.LENGTH  is undefined %}
              {% set  distance  =  init.action.unload  if  action =='unload'  else   init.action.load  %}             
           {% else %} 
              {% set  distance  = params.LENGTH |int   %}
           {% endif %}  

           {% set max_extrude = printer.configfile.settings[(act_extruder)].max_extrude_only_distance|int %}  
           {% set step = distance // max_extrude|int %}
           {% set rest = distance % max_extrude|float %}
           {% set multiplier =  -1  if  action =='unload'  else   1 %}

                 
          ###  if Homing 
            {% if "xyz" in printer.toolhead.homed_axes %} 
              ### set X,Y position for change material
              G1 X{init.position[0]}  Y{init.position[1]}    F{init.feedrate.move}     
            {% endif  %}
         
           ###  load/unload activation    
             M83
             G92 E0                
              {% for n in range(step) %}
                G1 E{max_extrude * multiplier} F{init.action.speed *60}
              {% endfor %}	
              {% if rest > 0.0 %}
                G1 E{rest * multiplier} F{init.action.speed *60} 
              {% endif %}  
             M400
            
           ###   safety unload filament switch 
           {% if 'gcode_macro SAFETY_SWITCH' in printer %} 
              #SAFETY_SWITCH  ACTION={action} 
           {% endif %}          
          
           ### update and save variable after load/unload filament 
           {% set _dummy = init.update( { 'loaded' : false  if action =='unload' else  true } ) %}
             SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"

           
          {% if action =='unload' %}  
            ### update and save variable_active = 'material'
            {% set name1 = "active" %} 
            {% set init1 = user_vars[name1] %}          
            {% set _dummy =init1.update( {'material':  None } )   %}   
            SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name1}  VALUE="{init1}" 
            SAVE_VARIABLE VARIABLE={name1} VALUE="{init1}"
          {% endif %}
                                         
             RESTORE_GCODE_STATE NAME=CHANGE_MATERIAL  #MOVE=1
             
       {% else %}
          RESPOND TYPE="error" MSG="For change material must be extruder heated !"       
       {% endif %}           
       
    {% endif %}    


