# This file contains a configuration snippet for ENDLESS SPOOL MODE.
#
#
# Define HW configuration in printer.cfg
# 
# For runout filament sensor define this name
# ... 'filament', 'filament1', 'filament2', 'filament3' ... etc
# ...
# runout_gcode:
#   {% if printer["gcode_macro VARIABLE"].endless_spool.enable %}
#      ACTIVATE_CHANGE_SPOOL SENSOR=switch TOOL=0
#   {% else %}
#      TRIGGER_RUNOUT SENSOR=switch TOOL=0
#    {% endif %}
 
# [include /home/pi/printer_data/config/my_config/MACRO/TRIGGER_RUNOUT.cfg]

#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_endless_spool: { }     

# e.g. endless_spool =  { 'enable': False , 'retract':1,  'extrude':2 }          

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _INIT_ENDLESS_SPOOL]  
gcode:


# printer['filament_switch_sensor filament'].enabled = True
# printer['filament_switch_sensor filament'].filament_detected = True

# printer.configfile.config['filament_switch_sensor filament'].pause_on_runout = False

# printer.configfile.settings['filament_switch_sensor filament'].pause_on_runout = False
# printer.configfile.settings['filament_switch_sensor filament'].pause_delay = 0.5
# printer.configfile.settings['filament_switch_sensor filament'].event_delay = 3.0



    {% set user_vars = printer["gcode_macro VARIABLE"] %} 

   ### init defautl variable
     {% set name = "endless_spool" %}    #  name variable 
     {% set init = { } %}     # default preset   
       
     {% set _dummy = init.update( { 'enable': False, 'empty': [ None ] } )%}
       
      ### save variable 
  SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE={name} VALUE="{init}"  
   
  {action_respond_info("Creating a list of variables for endless spool mode.") if printer.save_variables.variables.dump_list}

    
#####################################################################
# ENDLESS SPOOL MODES  - MANAGEMENT
# Function description: 
#
# ACTIVATE_CHANGE_SPOOL SENSOR=switch TOOL=0
# or 
# ACTIVATE_CHANGE_SPOOL SENSOR=motion TOOL=0
#
#####################################################################

[gcode_macro SET_ENDLESS_SPOOL] 
description: Enable Endless spool.  SET_ENDLESS_SPOOL ENABLE=[0|1] 
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %}
   {% set param_enable = True if params.ENABLE|int == 1 else False %}  
   
   {% if user_vars.tool|length >= 2 and user_vars.filament_sensor.defined %}
     {% set init = user_vars.endless_spool %}       
     {% set _dummy = init.update( { 'enable': param_enable } ) %} 
     ### update variable 
     SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=endless_spool VALUE="{init}" 
   {% else %}
     RESPOND MSG="Configuration is not for Endless spool mode"
   {% endif %}
         


#####################################################################

[gcode_macro ACTIVATE_CHANGE_SPOOL]
description:  ACTIVATE_CHANGE_SPOOL  SENSOR=switch   TOOL=0
gcode:

      ### params.TOOL= < 0 / 1 / 2 / 3 > 
      ### params.SENSOR= < switch / motion >      
     
      {% set user_vars = printer["gcode_macro VARIABLE"] %}    
    
      {% set  trig_sensor =  params.SENSOR |lower %}  
      {% set  trig_filament = params.TOOL |int %}        
      {% set  act_filament = user_vars.active.material %} 
      
         {action_respond_info("TOOL=%s  SENSOR=%s" % (trig_filament, trig_sensor))}	
    
   {% if trig_filament == act_filament %}
    
      {% if user_vars.endless_spool.enable %}   
    
         ### check for all runout sensors ( seting first filament detected ) 
         
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>   

# SET_FILAMENT_SENSOR SENSOR=filament ENABLE=1
# SET_FILAMENT_SENSOR SENSOR=filament ENABLE=0


          {% set ns = namespace(detect=false, extruder=false) %}           

          {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
            {% if 'extruder' in tool and ns.detect|lower == "false" %}  
             {% set type = 'motion' if  tool  in  user_vars.filament_sensor.motion  else 'switch'  %}  
             {% set ns.detect = printer[("filament_%s_sensor %s" %  (type,tool))].filament_detected %} 
             {% set ns.extruder = tool if ns.detect|lower == "true" else false %}              
           {% endif %}
          {% endfor %}
          
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>     

         {% if ns.extruder|lower != "false" %}
             REDEFINE_NEW_FILAMENT   FILAMENT={ns.extruder}	                     
         {% else %}
            ### parking toolhead and pause print 
            RESPOND MSG="Warning : The other toolhead is out of filament too !"
           _WARNING_FILAMENT
         {% endif %}	
            
      {% else %}                          
            ### parking toolhead and pause print 
             RESPOND MSG="Warning : active tool "{act_filament}" is out of filament !"
             _WARNING_FILAMENT                       
      {% endif %}
       
    {% else %}
          RESPOND MSG="Sensor "{trig_filament}" not detected filament !"  
    {% endif %}                      

#####################################################################
 
[gcode_macro _WARNING_FILAMENT] 
gcode:  

      ### pause printing and warning info / sound 

          {% if 'gcode_macro M601' in  printer %}
              M601   ### park toolhead and pause print 
          {% else %}
              ## include mainsail.cfg 
              PAUSE X=60 Y=0 Z_MIN=20  
          {% endif %}
                       
          {% if 'gcode_macro SET_BEEPER' in  printer %}
             SET_BEEPER R=4   ## repeat beep 4x
          {% endif %}  
                        
          RESPOND MSG="Please check filament and resume printing."         
    
#####################################################################
# REDEFINE_NEW_FILAMENTTOOL  - MANAGEMENT
# Function description: 
#
#####################################################################

[gcode_macro REDEFINE_NEW_FILAMENT] 
gcode:
        ### params.FILAMENT = 0|1|2|3 ....

        {% set user_vars = printer["gcode_macro VARIABLE"] %}

 ## include mainsail.cfg 
 PAUSE X=60 Y=0 Z_MIN=20   

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>   

         ### active tool info        
         {% set active_extruder = printer.toolhead.extruder %}
         {% set act_temp = printer[active_extruder].target %}     

          ### new tool info
         {% set new_extruder = params.FILAMENT %}
         {% set temp_new_extruder = printer[new_extruder].target %}

         ### actual position Z befor tool change
         {% set trigger_z = printer.toolhead.position.z|float %} 
         
   {% if temp_new_extruder >= act_temp %}
          ### turn off heater active extruder
            G1 E-{user_vars.endless_spool.retract} 
            SET_HEATER_TEMPERATURE HEATER="{active_extruder}" TARGET=0
	        RESPOND MSG="Turn off heating "{active_extruder}	 
           ### set new extruder
            SETINGS_TOOL   EXTRUDER={new_extruder}
            SET_HEATER_TEMPERATURE HEATER="{new_extruder}" TARGET={act_temp} 
    {% else %}           
       ### turn off heater active extruder 
           G1 E-{user_vars.endless_spool.retract} 
           SET_HEATER_TEMPERATURE HEATER="{active_extruder}" TARGET=0
           RESPOND MSG="Turn off heating "{active_extruder}	 	
           
           ### set new extruder
           SETINGS_TOOL   EXTRUDER={new_extruder}
           
          ### heating new extruder and wait
           SET_HEATER_TEMPERATURE HEATER="{new_extruder}" TARGET={act_temp}
           RESPOND MSG="Wait on heating "{new_tool}
           TEMPERATURE_WAIT SENSOR="{new_extruder}" MINIMUM={act_temp - 2.0} MAXIMUM={act_temp + 2.0}
  {% endif %}
       ### extrusion and resume print 
          G1 E{user_vars.endless_spool.extrude} 
          G1 Z{trigger_z}

      ### redefine variable 'tool'
         {% set name = "tool" %}    
         {% set init_tool =  user_vars.tool %}     
          
      ### set new extruder for all empty sensors or set reset extruder for detect sensor
         {% for tool in printer.heaters.available_heaters|sort %} 
            {% if 'extruder' in tool %}  
             {% set tool_nr = (tool.lstrip("extruder") if tool.lstrip("extruder")|length != 0 else 0)|int %}        
             {% set type = 'motion' if  tool in user_vars.filament_sensor.motion  else 'switch'  %}  
             {% set detect = printer[("filament_%s_sensor %s" %  (type,tool))].filament_detected %}    
          
               {% set extruder = new_extruder if not detect else tool %} 
               {% set _dummy = init_tool.update( { tool_nr : extruder } )  %}
           
            {% endif %}
         {% endfor %}                    
      
         SET_GCODE_VARIABLE MACRO=VARIABLE    VARIABLE={name}  VALUE="{init_tool}"
         RESPOND MSG="Set new tool "{new_extruder}

  ## include mainsail.cfg 
  RESUME          

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>       
        