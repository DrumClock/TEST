# This file contains a configuration snippet for M280 - Set servo position
# A G-code M280 P<index> S<pos>

# See docs/Config_Reference.md for a description of parameters.

#####################################################################
# All variables in this configuration, KLIPPER merges
# into one configuration  file [gcode_macro VARIABLE] .
#
# ATTENTION:
# If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
description: HELP: for list of variables send DUMP_MACRO_GCODE
gcode:

variable_servo: {  } 

#e.g.  {'enable': true, 'index': {0: 'tool_1', 1: 'tool_2'}, 'angle': {0: '--', 1: '--'}, 'menu': {'active': 0, 'angle_2': 135, 'angle_1': 45}} 
                      
#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################


[gcode_macro _E_INIT_SERVO]
gcode: 

  {% set user_vars = printer["gcode_macro VARIABLE"] %}

  {% set servo = { 'enable': false } %}
  {% set ns = namespace(nr_servo=0|int, enable=0|int) %}
    
    {% for object in printer.configfile.config|sort %}        
       {% if 'servo ' is in object  %}             
  
         {% if object.split(' ')[0] == 'servo' %}  

         {% if servo.index is not defined %}             
             {% set _dummy = servo.update( {'index': {  }} ) %}
         {% endif %} 

         {% if servo.angle is not defined %}             
            {% set _dummy = servo.update( {'angle': {  }} ) %}
         {% endif %}  

           {% set _dummy = servo.index.update( { ns.nr_servo: (object.split(' ')[1])} ) %} 
           {% set _dummy = servo.angle.update( { ns.nr_servo: '--' } ) %} 
           {% set ns.nr_servo =  ns.nr_servo + 1 %}   
           {% set ns.enable = 1 %}  
         {% endif %}  

       {% endif %} 
   {% endfor %}  

   {% if ns.enable == 1 %}
     {% set _dummy = servo.update( { 'enable': true } ) %}  
   {% endif %}

    ### init variable for LCD menu : 'menu': { 'active': 0, 'angle_1': 45, 'angle_2': 135} 
  {% if servo.index is defined %}    
    {% if printer.configfile.settings['menu __main __user __servo'] is defined  %}  
      {% set _dummy = servo.update( { 'menu': { 'active': 0, 'angle_1': 60|int, 'angle_2': 125|int}} ) %}
    {% endif %}
  {% endif %}

     SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=servo VALUE="{servo}"

     {action_respond_info("Creating a list of variables for servo ") if printer.save_variables.variables.dump_list}

##########################################################
# PRINTER SERVO MANAGEMENT
# Define G-code command M280
##########################################################
# Function description:
#
# Parameters:
# P[index] - Servo Index
# S[angle] - Angle 
#
# Example: 
#          M280          - print all last servo position from variable
#          M281 P1       - print last servo[1] position from variable
#          M280 P1 S50   - set servo index[1] to 50 deg.
#
#####################################################################

[gcode_macro M280]
description: Servo Position macro Usage: M280 P<index> S<pos>

gcode: 
    {% set user_vars = printer["gcode_macro VARIABLE"] %}
    {% set servo = user_vars.servo %}

    {% if params.P is defined %}
      {% set target_servo = params.P|default(0)|int %}  

      {% if user_vars.servo.index|length  <  target_servo + 1 %}
          {action_respond_info("The indesx P%s is not defined for servo." % (target_servo|string))} 
        {% else %}

           {% if params.S is defined %}
             SET_SERVO SERVO={user_vars.servo.index[target_servo]} ANGLE={params.S}
             {action_respond_info("Servo %s set to %s deg. " % (user_vars.servo.index[target_servo],params.S))}
              ### update servo angle
             {% set _dummy = servo.angle.update( { params.P|int : params.S } ) %} 
             SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=servo VALUE="{servo}"

              {% if 'gcode_macro LED_SERVO' in printer %}
                ### LED indication of angle
                 LED_SERVO
              {% endif %}

           {% else %}

              ### servo is not activated.
             {% set cfg_name = ("servo %s" %  user_vars.servo.index[target_servo]  ) %}
             {% if printer[cfg_name].value == 0.0 %}
               {action_respond_info("servo '%s' is not activated. Last angel : %s deg. " % (user_vars.servo.index[target_servo], user_vars.servo.angle[target_servo]))}
             {% else %}
              {action_respond_info("servo '%s' actual angel : %s deg. " % (user_vars.servo.index[target_servo], user_vars.servo.angle[target_servo]))}
             {% endif %}
            
              # SET_SERVO SERVO={user_vars.servo.index[params.P|int]} WIDTH=0
              # {action_respond_info("Servo %s is OFF " % (user_vars.servo.index[target_servo]))}

           {% endif %}
       {% endif %}
    {% else %}
       ### view all last servo position      
        {% for count in range(0, user_vars.servo.index|length)  %}            
           {% set name = user_vars.servo.index[count] %}  
           {% set angle = user_vars.servo.angle[count] %}
             ### servo is not activated.
             {% set cfg_name = ("servo %s" %  name ) %}
             {% if printer[cfg_name].value == 0.0 %}
               {action_respond_info("servo '%s' is not activated. Last angel : %s deg. " % (name, angle))}
            {% else %}
              {action_respond_info("servo '%s' actual angel : %s deg. " % (name, angle))}
            {% endif %}
        {% endfor %}       
    {% endif %}


##########################################################################################      
[gcode_macro PWM_ANGLE_CALC]
description: Servo info Angle macro Usage: PWM_ANGLE_CALC SERVO=(index) 
gcode:

    {% set user_vars = printer["gcode_macro VARIABLE"] %}

    {% if params.SERVO is defined %} 
        {% set servo_index = ("servo %s") % ( user_vars.servo.index[params.SERVO|int] ) %}
    
        {% set cfg = printer.configfile.settings[servo_index|lower] %}

        {% set calc_angle = (printer[servo_index].value * 0.020 - cfg.minimum_pulse_width) / 
                       ((cfg.maximum_pulse_width - cfg.minimum_pulse_width) / cfg.maximum_servo_angle) %}
     
       ### {action_respond_info("Angle = (%s * 0.02 - %s) / ((%s - %s) / %s )" % (printer[servo_index].value, cfg.minimum_pulse_width, cfg.maximum_pulse_width, cfg.minimum_pulse_width, cfg.maximum_servo_angle))}

       {% if printer[servo_index].value != 0.0 %}
        {% if params.SERVO is defined %} 
            {action_respond_info("Printer %s = %s deg " % (servo_index, calc_angle))}
        {% else %}  
            {action_respond_info("Active menu: %s = %s deg " % (servo_index, calc_angle))}
        {% endif %}
     {% else %} 
        {action_respond_info("The servo was not activated.")}
    {% endif %}
    
    {% else %}    
        {action_respond_info("The SERVO parameter must be specified")}
    {% endif %}

##########################################################################################      
[gcode_macro INITIAL_ANGLE_SERVO]
description: All Servos to set initial angles from cfg. 
gcode:

    {% set user_vars = printer["gcode_macro VARIABLE"] %}
    
 ### initial angle for servo  
   {% if 'gcode_macro M280' in printer and printer['virtual_sdcard'].is_active == False %}         
     {% for servo in user_vars.servo.index|sort %}   		 
       
       {% set servo_name =  user_vars.servo.index[servo] %}
	   {% set initial_angle = printer.configfile.config[("servo %s"  % servo_name )].initial_angle %}
         {action_respond_info("Servo %s set to %s deg. " % (servo_name, initial_angle))}

         SET_SERVO SERVO={servo_name} ANGLE={initial_angle}
		 G4 P1000
	  
     {% endfor %}  
   {% else %}
       {action_respond_info("The change is only made when printing is not in progress!")}
   {% endif %}