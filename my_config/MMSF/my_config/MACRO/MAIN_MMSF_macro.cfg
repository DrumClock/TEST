#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_active: { }  

# e.g. {'material': 0, 'count':4, 'z':{ 'hop':4.0, 'restore': 0.0}  }

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _A_INIT_ACTIVE]
gcode:

     {% set user_vars = printer["gcode_macro VARIABLE"] %}  
     {% set recovery = printer.save_variables.variables %}
     
     {% set name = "active" %}    # name variable   
     {% set init = user_vars[name] %}     # default preset   
     
     {% set _dummy = init.update({'material': None, 'count':0, 'z':{ 'hop':4.0, 'restore': 0.0 } }) %} 


      ### restore variable from SD card     
      {% if name in recovery %}
       {action_respond_info("Restore loaded materialr after restart from SD card.") if printer.save_variables.variables.dump_list}  
        {% set _dummy = init.update( {'material': recovery[name].material } )  %}
      {% endif %}
  
        SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
    
       {action_respond_info("Creating a list of active variable") if printer.save_variables.variables.dump_list} 


#####################################################################
# Multi Material - Switching Filament (MMSF) MANAGEMENT
# Function description: 
#####################################################################   
      
[gcode_macro T0]
gcode: 
  DEFINE_MATERIAL  T=0
           
[gcode_macro T1]
gcode: 
  DEFINE_MATERIAL  T=1
 
[gcode_macro T2]
gcode: 
  DEFINE_MATERIAL  T=2
          
[gcode_macro T3]
gcode: 
  DEFINE_MATERIAL  T=3 	  

[gcode_macro T4]
gcode: 
  DEFINE_MATERIAL  T=4 	  

[gcode_macro T5]
gcode: 
  DEFINE_MATERIAL  T=5 	 

  
##################################################################### 
 
[gcode_macro DEFINE_MATERIAL]
description: Define the material for G-code 'Txx'.
gcode:
   
    ### params.T = [0|1|2|3]
    
    # active = { 'material': 0, 'count':4, }
        
      {% set user_vars = printer["gcode_macro VARIABLE"] %}
      {% set name = "active" %}    # name variable   
      {% set init = user_vars[name] %}     # default preset  
       
      {% set target_material = params.T|default(0)|int %}   
      
     {% if init.count  <  target_material + 1 %}
        ### ignore G-code Tx command if not defined material
         {action_respond_info("The T%s is not defined for material." % (target_material))} 
     {% else %} 

      {% if target_material != init.material %}
             SAVE_GCODE_STATE name=DEFINE_MATERIAL  
    
           ### z-hop before action, only when printing
          {% if   printer['virtual_sdcard'].is_active %}
                Z_HOP  
          {% endif %}  
        
# ------- enable [extruder_stepper] and [servo] ----------------------
               
          {% if 'gcode_macro RESTORE_SWITCHING_MATERIAL' in printer %}       
               RESTORE_SWITCHING_MATERIAL
          {% endif %}                  
                  
# ------- cutting or unload shaping material ----------------------    
   
          {% if 'gcode_macro CUTTING_MATERIAL' in printer and  init.material != None  %}
#                  CUTTING_MATERIAL
          {% elif  'gcode_macro SHAPING_SEQUENCE' in printer  and  init.material != None %}
#                  SHAPING_SEQUENCE
          {% endif %}  

# ------- unload material ---------------------- 
 
          {% if 'gcode_macro CHANGE_MATERIAL ' in printer  and  init.material != None %}
               CHANGE_MATERIAL  ACTION=unload
          {% endif %}  
 
# ------- switching extruder ------------------   
            
          {% if 'gcode_macro SWITCHING_MATERIAL' in printer  %} 
               SWITCHING_MATERIAL    T={target_material}
          {% endif %}  
 
# -------- load material --------------------  

          {% if 'gcode_macro CHANGE_MATERIAL ' in printer %}
               CHANGE_MATERIAL  ACTION=load
          {% endif %}  

# ------- disable [extruder_stepper] and center [servo] ----------------------
          
          {% if 'gcode_macro DISABLE_SWITCHING_MATERIAL' in printer %}
              DISABLE_SWITCHING_MATERIAL
          {% endif %}          
       
# -----------------------------------------------   

             M117 Exchange Complet
             {% if 'delayed_gcode clear_display' is defined %}
               UPDATE_DELAYED_GCODE ID=clear_display DURATION=3    ; clear display after 3 sec.
             {% endif %} 
             
             RESTORE_GCODE_STATE name=DEFINE_MATERIAL  MOVE=1 

     {% else %}  
        {action_respond_info("The T%s for the material is already set." % (target_material))} 
     {% endif %}   
  {% endif %}    				   
 
 ##################################################################### 

[gcode_macro Z_HOP]
description: z-hop before action toolhead
gcode:

  # active = { 'z': {'hop': 5.0, 'restore': 0, }
    
     {% set user_vars = printer["gcode_macro VARIABLE"] %}	
     {% set name = "active" %}    # name variable   
     {% set init = user_vars[name] %}     # default preset 
     
     {% set z_hop_tool = params.Z|default(init.z.hop)|float %}
     
      ### Only when printing
     {% if z_hop_tool > 0.0  %}          
          {% set max_z = printer.toolhead.axis_maximum.z|float %}
          {% set cur_z = printer.toolhead.position.z|float %}
          {% set z_safe = z_hop_tool if cur_z < (max_z - z_hop_tool) else (max_z - cur_z) %}       
    
              G91
              G1 Z{z_safe}
              G90
              
            ### save variable z_safe to user variable 
            {% set restore = init.z.restore + z_safe  %} 
            {% set _dummy = init.z.update( { 'restore': restore } ) %} 
                 SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
     {% endif %}  
   
 #####################################################################  

[gcode_macro RESTORE_Z]
description: restore z-hop after action toolhead
gcode:

     # active = { 'z': {'hop': 5.0, 'restore': 0, }
       
     {% set user_vars = printer["gcode_macro VARIABLE"] %}	
     {% set name = "active" %}    # name variable   
     {% set init = user_vars[name] %}     # default preset 
          
     {% if init.z.restore != 0 %}
           G91
           G1 Z-{init.z.restore}
           G90
    
         ### save variable z_safe to user variable 
            {% set _dummy = init.z.update( { 'restore': 0} ) %} 
             SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"

      {% endif %}

     
        
     
     

 
