# This file contains a configuration snippet for users variables 
# for all [gcode_macro]
#
# See docs/Config_Reference.md for a description of parameters.

[save_variables]
filename: /home/pi/printer_data/config/my_config/save_variables.cfg

#####################################################################
# All variables in this configuration, KLIPPER merges
# into one configuration  file [gcode_macro VARIABLE] .
#
# ATTENTION:
# If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
description: HELP: for list of variables send GET_USER_VARIABLE
gcode:

###  ------ write all user variables under this line ------ ###
#variable_my_name : my_value 

variable_aaa : {'MMSF' : 'Multi Material - Switching Filament' }    
variable_tool: { }                # e.g. { 0: 'extruder', 1: 'extruder1' } 
variable_toolhead: { }            # e.g. { 0: ['extruder'], 1: ['extruder1'] }
variable_tmp : 0                  # independent temporary variable
variable_restore_variable : ['hotend_offset']   
                            
# e.g. :
# restore_variable = [ 'all' ]   - restore all variables from SD card
# restore_variable = [ 'none' ]  - do not restore variables from SD card
# restore_variable : [ 'active', 'hotend_offset', 'tool_change']  - restore only defined variables from SD card

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _A_INIT_TOOL]
gcode:
  {% set user_vars = printer["gcode_macro VARIABLE"] %}

 ### init defautl T for extruder
  {% set name = "tool" %}    # name variable
  {% set init = { } %}     # default preset   
   
  {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
    {% if 'extruder' in tool %}      
      {% set tool_nr = tool.lstrip("extruder") if tool.lstrip("extruder")|length != 0 else 0 %}
      {% set _dummy = init.update({tool_nr|int: tool}) %}                    
    {% endif %}
  {% endfor %}
  
    SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
    
    {action_respond_info("Creating a list of variables for %s extruder" % (init|length)) if printer.save_variables.variables.dump_list}   

  #{% set name = "active" %}    # name variable
  #{% set init = { } %}     # default preset   
  #{% set _dummy = init.update({'mode': 0, 'z':{ 'hop':4.0, 'restore': 0.0, 'print_offset':0.0 , 'hop_enable': true } }) %} 
  
  # SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"


#==============================================================================================

[gcode_macro _B_INIT_TOOLHEAD]
gcode:

  # Define 'extruder' for each toolhead
  # user_vars.tool = {0: 'extruder', 1: 'extruder1', 2: 'extruder2', 3: 'extruder3'}

  {% set user_vars = printer["gcode_macro VARIABLE"] %} 
  {% set count_extruder =  user_vars.tool|length %} 
  {% set name = "toolhead" %}  # name variable
  {% set init = { } %}      # default preset    
  
  {% if 'dual_carriage' in printer['motion_report'].steppers 
     or printer.configfile.settings['printer'].kinematics == 'dualgantry_cartesian' %}
    
     ### setting for dual-carriage  or dual-gantry config      
     {% set ns=namespace(extruder=0|int) %} 
     {% set count_0 = count_extruder - count_extruder // 2 %}   # first half 'tool'
     {% set count_1 = count_extruder // 2 %}              # rest of the 'tool'
   
     {% for toolhead in range(0, 2) %}          
       {% for extruder in range(0, count_0  if toolhead == 0 else count_1) %}    
         {% set _dummy = init.update({ toolhead: [user_vars.tool[ns.extruder]] })  if init[toolhead] is not defined  else init[toolhead].append(user_vars.tool[ns.extruder]) %}   
         {% set ns.extruder = ns.extruder + 1 %}
       {% endfor %} 
     {% endfor %} 

    #  =============================================================
    #  the principle of dividing 'tool' into 'toolhead'
    # 
    #  toolhead = {0: ['extruder'],                             1: ['extruder1']}
    #  toolhead = {0: ['extruder', 'extruder1'],                1: ['extruder2']}
    #  toolhead = {0: ['extruder', 'extruder1'],                1: ['extruder2', 'extruder3']}
    #
    # e.g.
    #  toolhead = {0: ['extruder', 'extruder1', 'extruder2'],   1: ['extruder3', 'extruder4']}
    #  toolhead = {0: ['extruder', 'extruder1', 'extruder2'],   1: ['extruder3', 'extruder4', 'extruder5']} 
    #
    #  =============================================================

  {% else %}   
     ### setting for single-carriage config
     {% for extruder in range(0, count_extruder) %}         
      {% set _dummy = init.update({ 0: [user_vars.tool[extruder]] }) if init.0 is not defined  else init.0.append(user_vars.tool[extruder]) %}          
     {% endfor %}   
   
        
  {% endif %}
 
      {action_respond_info("Creating a list of variables for user configuration extruder / carriages.") if printer.save_variables.variables.dump_list}
  
      ### save variable 
      SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE={name}  VALUE="{init}" 

#==============================================================================================

[gcode_macro _Z_INIT_RESTORE_USER_VARIABLE]          
gcode:
             
     ### restore variable from SD card (only defined variables)
     {% if printer.save_variables.variables.restore_variable is defined %}
         RESTORE_USER_VARIABLE
     {% endif %}
   
  
#####################################################################
###       GET / SAVE / RESTORE VARIABLE MANAGMENT                 ###     
#####################################################################


[gcode_macro GET_USER_VARIABLE]
description: GET_USER_VARIABLE VAR=<name>  
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %}
    
    {% if params.VAR is defined %} 
       {% set parameter = params.VAR|lower %}
          {% if parameter in user_vars %}
             {% set  value = user_vars[parameter] %}
              ### print define variable  
             {action_respond_info("printer['gcode_macro VARIABLE'].%s = %s" % ( parameter,value ))}
          {% else %}
             {action_respond_info(" VAR=%s not in user variable." % params.VAR )}
         {% endif %}
    {% else %} 
            ### print all variables 
          {% set out = [] %} 
              {% for parameter, value in printer["gcode_macro VARIABLE"].items()|sort %}
                {% set _dummy = out.append("printer['gcode_macro VARIABLE'].%s = %s" % (parameter, value)) %}
              {% endfor %}  
           {action_respond_info(out|join("\n"))}
    {% endif %}


#####################################################################

[gcode_macro DUMP_LIST]
gcode:
 
    {% set user_vars = printer["gcode_macro VARIABLE"] %}
    {% set value = false if printer.save_variables.variables.dump_list else true %} 

    # enables/disables  variable listing
     SAVE_VARIABLE VARIABLE=dump_list VALUE={value}
    {action_respond_info("set > %s " % value )}
 
 
#####################################################################

[gcode_macro SAVE_USER_VARIABLE]
description:  SAVE_USER_VARIABLE VAR=<name>
gcode:
 
    {% set user_vars = printer["gcode_macro VARIABLE"] %}

    {% if params.VAR is defined %} 
      {% set parameter = params.VAR|lower %}
        {% if parameter in user_vars %}
          {% set  value = user_vars[parameter] %}
          ### save variable to SD card file 
          SAVE_VARIABLE VARIABLE={parameter} VALUE="{value}"
        {% else %}
          {action_respond_info(" VAR=%s not in user variable." % params.VAR )}
       {% endif %}
    {% else %} 
      ### read all variable  
      {% for parameter,value in printer["gcode_macro VARIABLE"].items()|sort %}
        ### save variable to SD card file 
        SAVE_VARIABLE VARIABLE={parameter} VALUE="{value}"              
      {% endfor %}  
    {% endif %}

       
#####################################################################  
    
[gcode_macro RESTORE_USER_VARIABLE]
description: 
gcode:   
    
  {% set recovery = printer.save_variables.variables %}

  {% if 'none' in recovery.restore_variable %}
        ### do not restore variables
        {action_respond_info("No variables were restored !")}    

  {% elif 'all' in recovery.restore_variable %}
       ###  restore all variable
        {% for parameter,value in printer["gcode_macro VARIABLE"].items()|sort %}
         {% if parameter in recovery %}
            ### restore variable from SD card           
            {% set value = recovery[parameter] %}
            SET_GCODE_VARIABLE  MACRO=VARIABLE   VARIABLE={parameter}   VALUE="{value}"
          {% endif %}
         {% endfor %} 
         {action_respond_info("All variables restored from SD card !")}     
    
    {% else %}
       ###  restore define variable
       {% for parameter,value in printer["gcode_macro VARIABLE"].items()|sort %}
         {% if parameter in recovery.restore_variable %}
            ### restore variable from SD card           
            {% set value = recovery[parameter] %}
              SET_GCODE_VARIABLE  MACRO=VARIABLE   VARIABLE={parameter}   VALUE="{value}"
          {% endif %}
       {% endfor %} 
        {action_respond_info("From SD card restored this variables : %s" % recovery.restore_variable )}     
    {% endif %}



# ----------------- only  for testing  SAVE / RESTORE ----------------------------  

[gcode_macro DELETE_USER_VARIABLE]
gcode:
     
     {% for variable in printer["gcode_macro VARIABLE"]|sort %}  
         {% set value = { }  %}
           SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE={variable}   VALUE="{value}" 
     {% endfor %} 


[gcode_macro DELETE_SAVE_VARIABLE]
description: for delete send:  DELETE_SAVE_VARIABLE YES=  
gcode:

  {% if params.YES is defined  %}
      {% for variable in printer.save_variables.variables|sort %}
        {% set value =  { }  %}     
         SAVE_VARIABLE VARIABLE={variable} VALUE="{value}"    
      {% endfor %}  
        {action_respond_info(" DELETED ")}
   {% else %}
        {action_respond_info(" NOT DELETED - for delete send:  DELETE_SAVE_VARIABLE YES= ")}
   {% endif %}
  

# -----------------------------------------------------------------------------------


