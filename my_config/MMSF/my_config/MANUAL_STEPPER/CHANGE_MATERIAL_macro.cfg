#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_change: { }   

# e.g. change = {'loaded': false/true, 
#                'position': [240, 240],
#                'feedrate': {'move': 30000},
#                'end_stop': {'park': 50, 'switch': 40, 'out':80, 'speed': 40} 
 

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################
  
[gcode_macro _INIT_CHANGE_MATERIAL]
gcode:

     {% set user_vars = printer["gcode_macro VARIABLE"] %}
     {% set recovery = printer.save_variables.variables %}
     
     {% set name = "change" %}    # name variable   
     {% set init = user_vars[name] %}     # default preset 
     
     
     ## User define variable - position[X,Y], feedrate, speed .....
     {% set _dummy = init.update({ 'loaded': false if user_vars.active.material == None else true })  %}
     {% set _dummy = init.update({ 'position': [120, 120] })  %}
     {% set _dummy = init.update({ 'feedrate': {'move': 30000} })  %}
          
     ## User define variable 'end_stop' 
     ## info picture: toolhead_4-in-1.png
     # 'park'  =   distance between park position and  end_stop switch
     # 'switch' =  distance between end_stop switch and position when filament is outside extruder
     # 'out' =     distance between end of filament (nozzle, heatbreak, cutting) and position when filament is outside extruder 
     {% set _dummy = init.update({ 'end_stop': {'park': 50, 'switch': 40, 'out':80, 'speed': 40} })  %}
     
     
      SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
      #{action_respond_info("%s = %s" % (name,init))}      
      {action_respond_info("Creating a list of Change variables ") if printer.save_variables.variables.dump_list}
      
#####################################################################
# CHANGE MATERIAL MANAGEMENT
# Function description: 
#####################################################################

[gcode_macro CHANGE_MATERIAL]  
description: CHANGE_MATERIAL   ACTION=[load|unload]  
gcode:            
        
        ### params ACTION=[load|unload]  
                                      
        {% set user_vars = printer["gcode_macro VARIABLE"] %} 
        {% set name = "change" %}    # name variable   
        {% set init = user_vars[name] %}     # default preset
             
        {% set act_extruder = printer.toolhead.extruder %}             
   
   {% if params.ACTION is undefined %}
        ### no params defined
        {action_respond_info("The ACTINO must be defined")}   
        
   {% else %} 
       {% set action = params.ACTION | lower %} 
       ### only when heated extruder 
        {% if printer[act_extruder].can_extrude | lower == 'true' %}
           SAVE_GCODE_STATE NAME=CHANGE_MATERIAL

           {% set msg = ("%s Fil. %s" % (params.ACTION |capitalize, user_vars.active.material+1 if user_vars.active.material != None else '')) %}           
           {% if printer.configfile.config['display'] %}   M117 {msg}   {% endif %}  
           RESPOND MSG='{msg}' 
                  
          ###  if Homing 
            {% if "xyz" in printer.toolhead.homed_axes %} 
              ### set X,Y position for change material
              G1 X{init.position[0]}  Y{init.position[1]}    F{init.feedrate.move}     
            {% endif  %}   
             
          {% set target_material = user_vars.active.material|default(0)|int %}           
          {% set man_stepper =  user_vars.switching[target_material].index %}  
          {% set rotation  =  user_vars.switching[target_material].rotation %}  

          ### Example :{'park': 50, 'switch': 40, 'out':80, 'speed': 30}
          ### info picture: toolhead_4-in-1.png      
          {% set park  = init.end_stop.park|int %}      ; distance between park position and  end_stop switch
          {% set switch  = init.end_stop.switch|int %}  ; distance between end_stop switch and position when filament is outside extruder
          {% set out  = init.end_stop.out|int %}        ; distance between end of filament (nozzle, heatbreak, cutting) and position when filament is outside extruder    
          {% set speed  = init.end_stop.speed|int %}    ; load/unload speed in mm/s

          ### define max extrude steps
          {% set max_extrude = printer.configfile.settings[(act_extruder)].max_extrude_only_distance|int %}   
          
### LOAD FILAMENT ###   
        {% if action == 'load' %}  
          {% set step = (switch + out) // max_extrude|int %}
          {% set rest = (switch + out) % max_extrude|float %} 
          
          ### load filament to end_stop switch             
            MANUAL_STEPPER STEPPER={man_stepper}  SET_POSITION=0  MOVE={(park + 15 )* rotation}  SPEED={speed}  STOP_ON_ENDSTOP=-1
            
          ### load filament to extruder            
           MANUAL_STEPPER STEPPER={man_stepper}  SET_POSITION=0  MOVE={(switch + out) * rotation}  SPEED={speed}  SYNC=0
           
           M83
           G92 E0                
           {% for n in range(step) %}
             G1 E{max_extrude} F{speed*60} 
           {% endfor %}	
           {% if rest > 0.0 %}
              G1 E{rest } F{speed*60}
           {% endif %}  
           M400
           
### UNLOAD FILAMENT ###
        {% elif action == 'unload' %}
          {% set step = (out) // max_extrude|int %}
          {% set rest = (out) % max_extrude|float %} 
          
         ### unload filament from extruder
          MANUAL_STEPPER STEPPER={man_stepper}  SET_POSITION=0  MOVE={(out)* rotation *-1}  SPEED={speed}  SYNC=0  
           
          M83
          G92 E0                
          {% for n in range(step) %}
            G1 E{max_extrude *-1} F{speed*60}
          {% endfor %}	
          {% if rest > 0.0 %}
           G1 E{rest*-1} F{speed*60}
          {% endif %}  
          M400
       
         ### unload filament to end_stop pin          
          MANUAL_STEPPER STEPPER={man_stepper}  SET_POSITION=0  MOVE={(switch + 15) * rotation *-1}  SPEED={speed}  STOP_ON_ENDSTOP=1 
          
         ### unload filament to park_filament position
          MANUAL_STEPPER STEPPER={man_stepper}  SET_POSITION=0  MOVE={(park)* rotation *-1}   SPEED={speed} 
          
     {% endif %}
     
         ### disable TMC driver for 'extruder' after load/unload action
         SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0 
        
### END LOAD/UNLOAD ### 
 
           ### update and save variable after load/unload filament 
           {% set _dummy = init.update( { 'loaded' : false  if action =='unload' else  true } ) %}
             SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
           
          {% if action =='unload' %}  
            ### update and save variable_active = 'material'
            {% set name1 = "active" %} 
            {% set init1 = user_vars[name1] %}          
            {% set _dummy =init1.update( {'material':  None } )   %}   
            SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name1}  VALUE="{init1}" 
            SAVE_VARIABLE VARIABLE={name1} VALUE="{init1}"
          {% endif %}
                                         
             RESTORE_GCODE_STATE NAME=CHANGE_MATERIAL  #MOVE=1
             
       {% else %}
          RESPOND TYPE="error" MSG="For change material must be extruder heated !"       
       {% endif %}           
       
    {% endif %}    


