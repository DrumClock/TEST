
[force_move]
enable_force_move: True
#   Set to true to enable FORCE_MOVE and SET_KINEMATIC_POSITION
#   extended G-Code commands. The default is false.


#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_cutting: { }   

# e.g. cutting = {'position': [240, 0], 'feedrate': 30000, 'unload': 10, 'speed': 5, 'cut_feedrate': 1500, 'offset_pos': -20}  

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################
  
[gcode_macro _INIT_CUTTING]
gcode:

         {% set user_vars = printer["gcode_macro VARIABLE"] %} 
         {% set name = "cutting" %}    # name variable   
         {% set init = user_vars[name] %}      # default preset  
          
        ## User variable - position[X,Y], feedrate, unload, speed.
         {% set _dummy = init.update({ 'position':[240,0] , 'feedrate': 30000, 'unload': 10, 'speed':5, 'cut_feedrate':1500  })  %}
      
        ### Define cut-offset position
         {% set x_center = ((printer.configfile.config['stepper_x'].position_min|int)|abs + (printer.configfile.config['stepper_x'].position_max)|int) /2 %}   
         {% set offset_pos = 20 if  init.position[0] <= x_center else -20 %}
         
         {% set _dummy = init.update({ 'offset_pos': offset_pos })  %}
        
        SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
       #{action_respond_info("%s = %s" % (name,init))}      
      {action_respond_info("Creating a list of cutting variables ") if printer.save_variables.variables.dump_list}
      
      
#####################################################################
# Toolhead cutting filament (e.g. Bamnu Lab printer)  MANAGEMENT
# Function description: 
#####################################################################   
      
[gcode_macro CUTTING_MATERIAL]  
description: CUTTING_MATERIAL    
gcode:            
        
        {% set user_vars = printer["gcode_macro VARIABLE"] %}   
        {% set name = "cutting" %}    # name variable   
        {% set init = user_vars[name] %}     # default preset   
        
        {% set act_extruder = printer.toolhead.extruder %} 
      
         ###  only when Homing 
        {% if "xy" not in printer.toolhead.homed_axes %} 
              RESPOND TYPE="error" MSG="For Cutting mode must be home axis first !!"    
                            
        {% elif  init.active != None  %}        
             SAVE_GCODE_STATE name=CUTTING_MATERIAL   
                 
                 ## set X,Y position
                 G1 X{init.position[0] + (init.offset_pos *1) }  Y{init.position[1]}    F{init.feedrate}
                                                  
                 ## set run_current for X-stepper
                 {% for object in printer.configfile.config|sort %}
                    {% if 'tmc' is in object  and   object.split(' ')[1] =='stepper_x' %}
                        SET_TMC_CURRENT STEPPER=stepper_x   CURRENT=2.0
                        G4 P1000   ## Wait just a second… (give StallGuard registers time to clear) 
                    {% endif %}
	             {% endfor %} 
             
                 ## set cutting X position
                 G1  X{init.position[0]}    F{init.cut_feedrate}        

                 ## restore run_current for X-stepper
                  {% for object in printer.configfile.config|sort %}
                       {% if 'tmc' is in object  and   object.split(' ')[1] =='stepper_x' %}	   
		                 {%set run_current = printer.configfile.settings[object].run_current  %}
		                    SET_TMC_CURRENT STEPPER=stepper_x   CURRENT={run_current}
                            G4 P2000   ## Wait just a second… (give StallGuard registers time to clear)
                        {% endif %}
	               {% endfor %}
                
                 ## unload cuttig filament with extruder heating
                  {% if printer[act_extruder].can_extrude | lower == 'true' %}
                    M83
                    G92 E0  
                    G1 E{init.unload *-1} F{init.speed *60}

                 ## unload cuttig filament without extruder heating
                  {% else %}                  
                      ### set servo for switchin to center position
                       {% for servo in user_vars.multi_material.stepper %}          
	                     SET_SERVO SERVO={servo} angle={printer.configfile.config['servo '+servo].initial_angle}    # 90 deg.                        
                       {% endfor %}                      
                      FORCE_MOVE STEPPER={act_extruder} DISTANCE={init.unload * -1} VELOCITY={init.speed}
                  {% endif %}               
                
                 ## set offset-X for load filament ( release of the cutting knife )
                 ###  Set to Relative Positioning    
                 G91                
                 G1 X{init.offset_pos}    F{init.cut_feedrate}
                 G4 P1000       
                  
              RESTORE_GCODE_STATE name=CUTTING_MATERIAL  #MOVE=1 
         {% endif %}

                 
        