
[force_move]
enable_force_move: True
#   Set to true to enable FORCE_MOVE and SET_KINEMATIC_POSITION
#   extended G-Code commands. The default is false.


#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_cutting: { }   

# e.g. cutting = {'position': [240, 0], 
#                 'feedrate': {'move': 30000, 'cut':1500},
#                 'unload':   {'length':2 'speed':5},
#                 'offset_pos': -20 }  

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################
  
[gcode_macro _INIT_CUTTING]
gcode:

         {% set user_vars = printer["gcode_macro VARIABLE"] %} 
         {% set name = "cutting" %}    # name variable   
         {% set init = user_vars[name] %}      # default preset  
          
        ## User variable - position[X,Y], feedrate, unload
         {% set _dummy = init.update({ 'position':[120,120]  })  %}
         {% set _dummy = init.update({ 'feedrate': { 'move': 30000, 'cut':1500}  })  %}
         {% set _dummy = init.update({ 'unload': { 'length':2, 'speed':5 }  })  %}
      
        ### Define cut-offset position
         {% set x_center = ((printer.configfile.config['stepper_x'].position_min|int)|abs + (printer.configfile.config['stepper_x'].position_max)|int) /2 %}   
         {% set offset_pos = 20 if  init.position[0] <= x_center else -20 %}
         
         {% set _dummy = init.update({ 'offset_pos': offset_pos })  %}
        
        SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
        #{action_respond_info("%s = %s" % (name,init))}      
         {action_respond_info("Creating a list of cutting variables ") if printer.save_variables.variables.dump_list}
      
      
#####################################################################
# Toolhead cutting filament (e.g. Bamnu Lab printer)  MANAGEMENT
# Function description: 
#####################################################################   
      
[gcode_macro CUTTING_MATERIAL]  
description: CUTTING_MATERIAL    
gcode:            
        
        {% set user_vars = printer["gcode_macro VARIABLE"] %}   
        {% set name = "cutting" %}    # name variable   
        {% set init = user_vars[name] %}     # default preset   
        
        {% set act_extruder = printer.toolhead.extruder %} 
        {% set ns = namespace(run_current=0.9) %}
      
        ###  if not Homing 
        {% if "xyz" not in printer.toolhead.homed_axes %} 
            RESPOND  MSG="For Cutting mode must be home axis first."    
            G28
        {% endif  %}
        
         SAVE_GCODE_STATE name=CUTTING_MATERIAL   

         {% set msg = ("Cutting material") %}   
         {% if printer.configfile.config['display'] %}   M117 {msg}   {% endif %}  
         RESPOND MSG='{msg}' 
                 
                 ## set X,Y position befor cutting
                 G1 X{init.position[0] + init.offset_pos}  Y{init.position[1]}    F{init.feedrate.move}
                                                  
                 ## set run_current for X-stepper
                 {% for object in printer.configfile.config|sort %}
                    {% if 'tmc' is in object  and   object.split(' ')[1] =='stepper_x' %}
                       {%set ns.run_current = printer.configfile.settings[object].run_current  %}
                        SET_TMC_CURRENT STEPPER=stepper_x   CURRENT=2.0
                        G4 P1000   ## Wait just a secondâ€¦ (give StallGuard registers time to clear) 
                    {% endif %}
	             {% endfor %} 
             
                 ## set X position for cutting
                    G1 X{init.position[0]}   F{init.feedrate.cut}        

                 ## restore run_current for X-stepper
                    SET_TMC_CURRENT STEPPER=stepper_x   CURRENT={ns.run_current}
                                      
                 ## unload cuttig filament with extruder heating
                  {% if printer[act_extruder].can_extrude | lower == 'true' %}
                    M83
                    G92 E0  
                    G1 E{init.unload.length*-1} F{init.unload.speed *60}    
                    
                 ## unload cuttig filament without extruder heating
                  {% else %}        
                  
                 # ------------- SWITCHING MATERIAL -----------------------------------------     
                   {% if 'gcode_macro SWITCHING_MATERIAL' in printer  %} 
                    ### set servo for switchin to center position
                     {% for servo in user_vars.switching.stepper %}          
	                   SET_SERVO SERVO={servo} angle={printer.configfile.config['servo '+servo].initial_angle}    # 90 deg.                        
                    {% endfor %}       
	               {% endif %}          
                 # -------------------------------------------------------------------------  
                 
                      FORCE_MOVE STEPPER={act_extruder} DISTANCE={init.unload.length * -1} VELOCITY={init.unload.speed} 
                  {% endif %}               

                
                 ## set offset-X for load filament ( release of the cutting knife )
                 ###  Set to Relative Positioning    
                 G91                
                 G1 X{init.offset_pos}    F{init.feedrate.cut}
                 G4 P1000       

                ## return filament after cutting
                {% if printer[act_extruder].can_extrude | lower == 'true' %}                  
                    G1 E{init.unload.length} F{init.unload.speed *60}
                {% else %}   
                    FORCE_MOVE STEPPER={act_extruder} DISTANCE={init.unload.length } VELOCITY={init.unload.speed}
                {% endif %}
                  
           RESTORE_GCODE_STATE name=CUTTING_MATERIAL  #MOVE=1 
        

                 
        