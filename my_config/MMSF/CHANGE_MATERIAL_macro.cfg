##########################################################
# Define HW configuration in printer.cfg
#
# [gcode_button filament]    ## detect filament OUT
# pin: ^PB13        ## E3-STOP 
# press_gcode: 
#                               
##########################################################

#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_change: { }   

# e.g. change = {'loaded': false/true, 
#                'position': [240, 240],
#                'feedrate': {'move': 30000},
#                'action':   {'unload': 10, 'load': 20, 'speed': 5}
 

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################
  
[gcode_macro _INIT_CHANGE_MATERIAL]
gcode:

     {% set user_vars = printer["gcode_macro VARIABLE"] %}
     {% set recovery = printer.save_variables.variables %}
     
     {% set name = "change" %}    # name variable   
     {% set init = user_vars[name] %}     # default preset 
     
     
     ## User define variable - position[X,Y], feedrate, speed .....
     {% set _dummy = init.update({ 'loaded': false if user_vars.active.material == None else true })  %}
     {% set _dummy = init.update({ 'position': [120, 120] })  %}
     {% set _dummy = init.update({ 'feedrate': {'move': 30000} })  %}
     {% set _dummy = init.update({ 'action':   {'unload': 140, 'load': 140, 'speed': 20} })  %}
     
      SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
      #{action_respond_info("%s = %s" % (name,init))}      
      {action_respond_info("Creating a list of Change variables ") if printer.save_variables.variables.dump_list}
      
#####################################################################
# CHANGE MATERIAL MANAGEMENT
# Function description: 
#####################################################################

[gcode_macro CHANGE_MATERIAL]  
description: CHANGE_MATERIAL   ACTION=[load|unload]  LENGTH=[40]
gcode:            
        
        ### params ACTION=[load|unload]  
        ### params LENGTH=[40] 
                              
        {% set user_vars = printer["gcode_macro VARIABLE"] %} 
        {% set name = "change" %}    # name variable   
        {% set init = user_vars[name] %}     # default preset
             
        {% set act_extruder = printer.toolhead.extruder %}         
     
   
   {% if params.ACTION is undefined %}
        ### no params defined
        {action_respond_info("The ACTINO must be defined")}   
        
   {% else %} 
       ### only when heated extruder 
        {% if printer[act_extruder].can_extrude | lower == 'true' %}
           SAVE_GCODE_STATE NAME=CHANGE_MATERIAL
 
           {% set action = params.ACTION | lower %}          
        
           {% if  params.LENGTH  is undefined %}
              {% set  distance  =  (init.action.unload  * -1)  if  action =='unload'  else   init.action.load  %}  
           {% else %} 
               {% set  distance  =  (params.LENGTH |int  * -1)  if  action =='unload'  else   params.LENGTH |int  %}
           {% endif %}  
            
        ###  if not Homing 
        {% if "xyz" not in printer.toolhead.homed_axes %} 
              RESPOND  MSG="For Change material mode must be home axis first."    
              G28
        {% endif  %}
          
           ### set X,Y position for change material
             G1 X{init.position[0]}  Y{init.position[1]}    F{init.feedrate.move}     
         
           ###  load/unload activation    
             M83
             G92 E0             
             G1 E{distance}   F{init.action.speed *60}
             M400
            
           ###   safety unload filament switch 
           {% if 'gcode_macro SAFETY_SWITCH' in printer %} 
             # SAFETY_SWITCH  ACTION={action} 
           {% endif %}

           {% if 'gcode_macro CUTTING_MATERIAL' in printer and  action == 'load' %}
              G92 E0             
              G1 E{user_vars.cutting.unload.length}   F{init.action.speed *60}
           {% endif %}             
          
           ### update and save variable after load/unload filament 
           {% set _dummy = init.update( { 'loaded' : false  if action =='unload' else  true } ) %}
               
             SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
                                         
             RESTORE_GCODE_STATE NAME=CHANGE_MATERIAL  #MOVE=1
             
       {% else %}
          RESPOND TYPE="error" MSG="For change material must be extruder heated !"       
       {% endif %}           
       
    {% endif %}    


########################################################################################### 

[gcode_macro SAFETY_SWITCH]  
description: SAFETY_SWITCH   ACTION=[load|unload] 
gcode:           
        
        {% set user_vars = printer["gcode_macro VARIABLE"] %} 
        {% set name = "change" %}    # name variable   
        {% set init = user_vars[name] %}     # default preset
        
         {% set action = params.ACTION |default('unload')| lower %}   
         {% set  rotation  =  -1  if  action =='unload'  else  1  %}  
          

        {% if 'gcode_button filament' in printer  %} 
           ## info: QUERY_BUTTON button=filament    RELEASED / PRESSED
         
                                           
                    {% set  step = 5|int %}         # number of repeat
                    {% set  repeat_length = 5|int %}   # in mm
                 
                  {% for count in range(0, step) %}      # e.g. 5*5 = 25 mm
                        ### load/unload step for activation switch  
                            {% if  printer['gcode_button filament'].state == 'RELEASED' %}
                                ## filament in = switch open
                                M83
                                G92 E0             
                                G1 E{repeat_length * rotation}   F{init.action.speed *60}   
                            {% endif %}  
                    {% endfor %}        
        
                     ### safety unload out of filament path
                     G1  E{repeat_length * rotation *2 }   F{init.action.speed *60}         # e.g. 5*-1*2 = -10 mm
      
                                            
                   {% if  printer['gcode_button filament'].state == 'PRESSED' %}    
                       ## filament out = switch close
                          {action_respond_info("Filament loaded/unloaded correctly.." )}   
                                                                
                   {% endif %}                            
                         
       {% endif %}
         
  
