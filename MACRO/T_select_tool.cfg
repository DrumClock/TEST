 # This file contains a configuration snippet for Select Tool.
#
#
#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_active: {  }                     # e.g. {'mode': 0, 'z':{ 'hop':4.0, 'restore': 0.0, 'print_offset':0.0 }  }
variable_default_t_extruder: { }          # e.g. { 0: 'extruder', 1: 'extruder1' } 
variable_default_carriage_tool: { }       # e.g. { 0: ['extruder'], 1: ['extruder1'] }     # default
variable_hotend_offset: { }               # e.g. { 0 : { 'x': 0.0 , 'y': 0.0 , 'z': 0.0 } , 1 : { 'x': -10.0 , 'y': 0.0 , 'z': 0.0 } }  
variable_tool_change : { }                # e.g. { 'menu':'extruder', 'filament' : {'load': 0.5 , 'unload': 1.0,  'speed' : 45 }, 'delay' : { 'extruder': 250, 'extruder1': 300} , 'axis_z' : {'hop': 3.0, 'restore': 0.0 }'enable' : True, }
 
#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _A_INIT_DEFAULT_T_EXTRUDER]
gcode:
  {% set user_vars = printer["gcode_macro VARIABLE"] %}

 ### init defautl T for extruder
  {% set default_t_extruder = { } %}
  {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
    {% if 'extruder' in tool %}      
      {% set tool_nr = tool.lstrip("extruder") if tool.lstrip("extruder")|length != 0 else 0 %}
      {% set _dummy = default_t_extruder.update({tool_nr|int: tool}) %}                    
    {% endif %}
  {% endfor %}
  
    SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=default_t_extruder VALUE="{default_t_extruder}"

  {% set active = { } %}
  {% set _dummy = active.update({'mode': 0, 'z':{ 'hop':4.0, 'restore': 0.0, 'print_offset':0.0 } }) %}    
    SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=active VALUE="{active}"

   {action_respond_info("Creating a list of variables for %s extruder" % (default_t_extruder|length))}   

#---------------------------------------------------------------------------------------

[gcode_macro _B_INIT_DEFAULT_CARRIAGE_TOOL]
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %} 
  {% set count_extruder =  user_vars.default_t_extruder|length %} 
  {% set default_carriage_tool =  { 0: ['extruder']} %}    
  
  {% if printer['dual_carriage'] is defined %}
    ### setting for dual-carriage config 
       {% if count_extruder == 2 %}  
             ##  2 carriage  / 2 extruder       
             {% set _dummy = default_carriage_tool.update( { 0: ['extruder'], 1: ['extruder1'] }   ) %}             
       {% elif count_extruder == 3 %} 
             ##  2 carriage  / 3 extruder
             {% set _dummy = default_carriage_tool.update(  { 0: ['extruder','extruder1'], 1: ['extruder2'] }   ) %} 
       {% elif count_extruder == 4 %}    
              ##  2 carriage  / 4 extruder
             {% set _dummy = default_carriage_tool.update(  { 0: ['extruder','extruder1'], 1: ['extruder2','extruder3'] }  ) %} 
       {% endif %}
       
  {% else %} 
     ### setting for single-carriage config
        {% if count_extruder == 2 %} 
              ## 2 extruder        
              {% set _dummy = default_carriage_tool.update( { 0: ['extruder', 'extruder1'] } ) %}
        {% elif count_extruder == 3 %}   
              ## 3 extruder
              {% set _dummy = default_carriage_tool.update( { 0: ['extruder', 'extruder1', 'extruder2'] } ) %}
        {% elif count_extruder == 4 %}   
              ## 4 extruder
              {% set _dummy = default_carriage_tool.update( { 0: ['extruder', 'extruder1', 'extruder2', 'extruder3'] } ) %}
        {% endif %}
        
  {% endif %}
 
      {action_respond_info("Creating a list of variables for user configuration extruder / carriages.")}
  
      ### save variable 
      SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=default_carriage_tool  VALUE="{default_carriage_tool}" 

#---------------------------------------------------------------------------------------

[gcode_macro _C_INIT_HOTEND_OFFSET]   
description: init or restore hotend offset after restart from [save_variables] file.    
gcode:

 {% set user_vars = printer["gcode_macro VARIABLE"] %} 

 {% if user_vars.default_t_extruder|length > 1 %}

   ### update the variable according to the number of extruders
   {% set new_hotend_offset = user_vars.hotend_offset %} 
     {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
       {% if 'extruder' in tool %} 
          {% set tool_nr = tool.lstrip("extruder") if tool.lstrip("extruder")|length != 0 else 0 %}  
               {% if user_vars.hotend_offset[tool_nr|int] is not defined %}
                 {% set _dummy = new_hotend_offset.update( { tool_nr|int : {'x': 0.0 , 'y': 0.0 , 'z': 0.0}} ) %}                  
              {% endif %}   
          {% endif %}              
      {% endfor %}   

     {% set _dummy = new_hotend_offset.update( {'change_T0': False} ) %}  
     {action_respond_info("Creating a list of variables for macro M218 ")}
   
     ### update the variable
      SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE=hotend_offset  VALUE="{new_hotend_offset}" 
    
  {% else %}   
    {action_respond_info("Configuration not valid for Hotend offset.")}    
  {% endif %}    

#---------------------------------------------------------------------------------------

[gcode_macro _D_INIT_TOOL_CHANGE_PARAM]   
gcode:

 {% set user_vars = printer["gcode_macro VARIABLE"] %} 
 {% set tool_change = {'enable' : False } %}

 {% if user_vars.default_t_extruder|length > 1 %}
  
     ### init 'delay' for extruder
      {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
           {% if 'extruder' in tool %} 
                 {% if tool_change.delay is not defined %}
                     {% set _dummy = tool_change.update( { 'delay': { }} ) %}  
                 {% endif %}
               {% set _dummy = tool_change.delay.update( { tool: 250 } ) %}                    
          {% endif %}
       {% endfor %}

    ### init default variable
       {% set _dummy = tool_change.update( {'filament' : {'load': 0.5 , 'unload': 1.0,  'speed' : 45 }} ) %}                    
       {% set _dummy = tool_change.update( {'axis_z' : {'hop': 3.0, 'restore': 0.0 }} ) %} 
       {% set _dummy = tool_change.update( {'enable' : True} ) %} 

    ### init variable for LCD menu 
      {% if printer.configfile.settings['menu __main __user __toolchange'] is defined  %}  
        {% set _dummy =  tool_change.update( { 'menu': 'extruder'} ) %}
     {% endif %} 

     {action_respond_info("Creating a list of variables for tool change param ")}

 {% endif %}

   SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=tool_change VALUE="{tool_change}"
   
#####################################################################
# SETTINGS TOOL / EXTRUDER / CARRIAGE - MANAGEMENT
# Function description: 
#####################################################################

[gcode_macro T0]
gcode: 
  DEFINE_TOOL  T=0
           
[gcode_macro T1]
gcode: 
  DEFINE_TOOL  T=1
 
[gcode_macro T2]
gcode: 
  DEFINE_TOOL  T=2
          
[gcode_macro T3]
gcode: 
  DEFINE_TOOL  T=3

[gcode_macro T4]
gcode: 
  DEFINE_TOOL  T=4

[gcode_macro T5]
gcode: 
  DEFINE_TOOL  T=5

[gcode_macro T6]
gcode: 
  DEFINE_TOOL  T=6

            
####################################################################

[gcode_macro DEFINE_TOOL]
description: Activate the tool by index 'T'.
gcode:

    ### params.T = [0|1|2|3]
        
    {% set user_vars = printer["gcode_macro VARIABLE"] %}

    {% set target_tool = params.T|default(0)|int %}
    {% set act_extruder = (printer.toolhead.extruder)|string %}   

 
  {% if user_vars.tool_change.enable  %}   
 # {% if user_vars.tool_change.enable  and  printer.dual_carriage.mode == 'FULL_CONTROL' %}

  {% if user_vars.default_t_extruder |length  <  target_tool + 1 %}
    ### ignore G-code Tx command if not defined [extruder]
      {action_respond_info("The tool T%s is not defined for extruder." % (target_tool))} 
  {% else %} 
  
   ### define 'extruder' for G-code Txx
      {% set target_extruder = (user_vars.default_t_extruder[target_tool])|string %}
      # {% set ext_nr = target_extruder.lstrip("extruder")|int  if target_extruder.lstrip("extruder")|length != 0 else  0|int %}
  
     ### set TOOL  
   
     {%  if act_extruder != target_extruder %}
         {action_respond_info("Will now be set '%s'." % (target_extruder))} 
            M400 
       
       ### SAVE actual prtin z-offset for all extruders            
          SAVE_PRINT_OFFSET_Z         
 
 # >>>   
        ### Uload filament befor tool change    
       {% if printer[act_extruder].can_extrude | lower == 'true' and  printer['virtual_sdcard'].is_active == true %}
            G92 E0
            G1 E-{user_vars.tool_change.filament.unload}  F{ (user_vars.tool_change.filament.speed * 60)|int }
       {% endif %}   
     

 #  ### switching servo nozzle/extruder 
 #   {% if 'gcode_macro SWITCHING_SERVO' in printer  %}
 #   {% if user_vars.switching_servo.enable %}              
 #      SWITCHING_SERVO E={target_extruder}
 #   {% endif %}   

# >>> 

      ### z-hop before action toolhead
         Z_HOP_TOOL       
          
     ### Activate tool or carriage    
      {% if printer.dual_carriage is defined  %}
         ACTIVATE_CARRIAGE EXTRUDER={target_extruder}
      {% else %}
         ACTIVATE_TOOL EXTRUDER={target_extruder}
      {% endif %}   

      ### apply offset tool
          APPLY_OFFSETS_TOOL  T={target_extruder}
 # >>> 
   
       ### safety delay after tool change
         G4 P{user_vars.tool_change.delay[target_extruder]}
    
        ### users regeneration tower
        {% if 'gcode_macro PRINT_WIPE_TOWER' in printer  %}
           PRINT_WIPE_TOWER 
        {% endif %}   
  # >>>         
  
        ## restore z-hop if not printing       
            RESTORE_Z_TOOL         
 
  # >>> 
             ### Load filament after tool_change    
        {% if printer[target_extruder].can_extrude | lower == 'true' and  printer['virtual_sdcard'].is_active == true %}
            G92 E0
            G1 E{user_vars.tool_change.filament.load}  F{(user_vars.tool_change.filament.speed* 60)|int }
        {% endif %}      
             
   # >>>  

     {% else %}       
         {action_respond_info("The 'T%s' is alredy activated." % (target_tool))}
     {% endif %}      
   {% endif %} 
 {% else %}     

#   {% set target_extruder = (user_vars.default_t_extruder[target_tool])|string %}
#   {% set ext_nr = ( target_extruder.lstrip("extruder") if target_extruder.lstrip("extruder")|length != 0 else  0 )|int %}

#   {% if 'gcode_macro SYNC_SWITCHING_TOOL' in printer and ext_nr in [0,1] %}    
#      {action_respond_info("T=%s" % ext_nr)}
#       SYNC_SWITCHING_TOOL T={ext_nr} 
#   {% else %}

     {action_respond_info("The tool cahnge is disabled !")} 
     
     ### ignore command in DUPLICATION and MIRRORED modes
     # {action_respond_info("Ignore command in DUPLICATION and MIRRORED modes.")}   

#   {% endif %}


 {% endif %}     
 

####################################################################

[gcode_macro SAVE_PRINT_OFFSET_Z]
gcode:
# {action_respond_info(">>>>> run gcode_macro  SAVE_PRINT_OFFSET_Z")}
      ### save actual print_offset_z variable for Tool 0
       {% set user_vars = printer["gcode_macro VARIABLE"] %} 

       {% if printer.toolhead.extruder == "extruder" %}  
          {% set offset = user_vars.active %}
          {% set _dummy =offset.z.update({'print_offset': printer.gcode_move.homing_origin.z|float }) %} 
          SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=active VALUE="{offset}"
       {% endif %}  
       
####################################################################

[gcode_macro APPLY_OFFSETS_TOOL]
description: Apply Offsets HotEnd (tool) by params T.
gcode:
  #{action_respond_info(">>>>> run gcode_macro  APPLY_OFFSETS_TOOL")}
   ### params.T = [extruder|extruder1|extruder2|extruder3]
   
  {% set user_vars = printer["gcode_macro VARIABLE"] %}
 
 ##### Apply Offsets #####   
   {% set target_tool = params.T|default(printer.toolhead.extruder)%} 

   {% set tool_nr = target_tool.lstrip("extruder") if target_tool.lstrip("extruder")|length != 0 else 0 %} 
   {% set offset =  user_vars.hotend_offset[tool_nr|int] %}   

   # {action_respond_info("tool=%s \n nr=%s \n offset=%s" %(target_tool,tool_nr,offset))}

 # {% if printer['virtual_sdcard'].is_active != true %}   
 #     SET_GCODE_OFFSET X={offset.x} Y={offset.y} Z={offset.z  + user_vars.active.z.print_offset} MOVE=1 MOVE_SPEED=500     
 #  {% else %}
 #     SET_GCODE_OFFSET X={offset.x} Y={offset.y} Z={offset.z  + user_vars.active.z.print_offset} MOVE_SPEED=500    
 #  {% endif %}
 
     {% if printer['virtual_sdcard'].is_active != true %}   
              SET_GCODE_OFFSET X={offset.x} Y={offset.y}  MOVE=1  MOVE_SPEED=500                 
     {% else %}
              SET_GCODE_OFFSET X={offset.x} Y={offset.y}  
      {% endif %}
              ### Apply Z-Offset 
              SET_GCODE_OFFSET  Z={offset.z  + user_vars.active.z.print_offset}  MOVE=1  MOVE_SPEED=500 
 

####################################################################

[gcode_macro Z_HOP_TOOL]
description: z-hop before action toolhead
gcode:
  # {action_respond_info(">>>>> run gcode_macro  Z_HOP_TOOL")}
  
     {% set user_vars = printer["gcode_macro VARIABLE"] %}	
     {% set z_hop_tool = params.Z|default(user_vars.active.z.hop)|float %}

     {% if z_hop_tool > 0.0 %}
       {% set max_z = printer.toolhead.axis_maximum.z|float %}
       {% set cur_z = printer.toolhead.position.z|float %}
       {% set z_safe = z_hop_tool if cur_z < (max_z - z_hop_tool) else (max_z - cur_z) %}       
       G91
       G1 Z{z_safe}
       G90
      
      ### info printer status and save z_restore
       {% set z_restore = user_vars.active %}
       {% if printer['virtual_sdcard'].is_active %}   
          {% set _dummy =z_restore.z.update( {'restore':0.0 }) %}                
       {% else %}
          {% set _dummy =z_restore.z.update( { 'restore': z_safe }) %} 
       {% endif %} 
        
       ### save variable z_safe to user variable z_restore
          SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=active  VALUE="{z_restore}" 
      {% endif %}  

    
    
####################################################################

[gcode_macro RESTORE_Z_TOOL]
description: restore z-hop after action toolhead
gcode:
   #{action_respond_info(">>>>> run gcode_macro  RESTORE_Z_TOOL")}
   
    {% set user_vars = printer["gcode_macro VARIABLE"] %}    
      {% if user_vars.active.z.restore != 0 %}
           G91
           G1 Z-{user_vars.active.z.restore}
           G90
      {% else %}             
     {% endif %}




    