# This file contains a configuration snippet for Oozing prevent.
#
#
#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_oozing_prevent: { }                     # e.g. 'diff_temp'{ 'extruder': 10.0, 'extruder1': 15.0 }

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _INIT_OOZING_PREVENT_PARAM]   
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %} 
 
 {% if user_vars.tool|length > 1 %}
 
      {% set name = "oozing_prevent" %}     # name variable     
      {% set init = { }  %}  # load act preset  
   
      ### init 'diff_temp' for extruder
      {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
           {% if 'extruder' in tool %} 
               ### define difference temperature
              {% set _dummy = init.update({ 'diff_temp': { tool:10.0 }})  if init.diff_temp is not defined  else  init.diff_temp.update({ tool:10.0 }) %}    
          {% endif %}
      {% endfor %}
      
      
       ### init variable for LCD menu 
      {% if printer.configfile.settings['menu __main __user __oozing'] is defined  %}  
         {% set _dummy =  init.update( { 'menu': 'extruder'} ) %}
     {% endif %} 

     {action_respond_info("Creating a list of variables for tool oozing param ") if printer.save_variables.variables.dump_list}

       
       ## update variable "oozing_prevent"
       SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE={name} VALUE="{init}"
     
     {% endif %}  
     
     
################################################################################
# This macro allows the user to inactive extruders prevent oozing 
################################################################################
   
[gcode_macro OOZING_PREVENT]
description: OOZING_PREVENT  ACTUAL=extruder  TARGET=extruder1
gcode:

    ###  params.EXTRUDER =[extruder|extruder1|extruder2|...] 
  
     {% set user_vars = printer["gcode_macro VARIABLE"] %}
    
     {% set target_extruder = params.TARGET|lower %} 
     {% set target_tool = target_extruder.lstrip("extruder") if target_extruder.lstrip("extruder")|length != 0 else 0 %}      
     {% set new_target_temp = (printer[target_extruder].target + user_vars.oozing_prevent.diff_temp[target_extruder])|int %}
     
     
     {% set act_extruder = params.ACTUAL|lower %}
     {% set active_tool = act_extruder.lstrip("extruder") if act_extruder.lstrip("extruder")|length != 0 else 0 %} 
     {% set new_act_temp = (printer[act_extruder].target - user_vars.oozing_prevent.diff_temp[act_extruder])|int %}

      ### inactive extruders prevent oozing       
    
         ### cooling actual extruder 
           {% if printer[act_extruder].can_extrude | lower == 'true'  %}                                           ;  only when heated extruder
              M104  S{new_act_temp}   T{active_tool}            ;    eg. 235  - 15
          # M104 S{printer[act_extruder].target - act_diff_temp }  T{printer.toolhead.extruder.lstrip("extruder") if printer.toolhead.extruder.lstrip("extruder")|length != 0 else 0}   
           {% endif %}              
    
         ###  heating target extruder    
          {% if printer[target_extruder].can_extrude | lower == 'true'  %}                                  ; only when heated extruder
              M104  S{new_target_temp}    T{target_tool}          ;  eg. 225  + 10    
         # M104 S{printer[target_extruder].target + target_diff_temp } T{params.EXTRUDER.lstrip("extruder") if params.EXTRUDER.lstrip("extruder")|length != 0 else 0      }
          {% endif %}


################################################################################
# This macro allows the user to cooling not-active extruders 
################################################################################
[gcode_macro START_OOZING_PREVENT]
gcode:

#-------------------------------------------------------
#
# for Prusa Slicer: 
#
# add start G-code: ( to end of block )
#  START_OOZING_PREVENT
#
#-------------------------------------------------------
      
    {% set user_vars = printer["gcode_macro VARIABLE"] %}   
     
    {% if 'gcode_macro OOZING_PREVENT' in  printer  and  user_vars.tool|length > 1  %}
    
       ### cooling not-active extruders
         {% for tool in printer.heaters.available_heaters|sort %}    ; check for all available heaters
              {% if 'extruder' in tool  !=  printer.toolhead.extruder %}                   
                   {% if printer[tool].can_extrude | lower == 'true'  %}        ;  only when heated extruder
                        {% set  target_temp = (printer[tool].target - user_vars.oozing_prevent.diff_temp[tool])|int %}     
                         M104 S{target_temp }   T{tool.lstrip("extruder") if  tool.lstrip("extruder")|length != 0 else 0}   
                   {% endif %}      
              {% endif %}   
         {% endfor %}    
     
     {% endif %}
         
            
################################################################################
# This macro allows the user to change the value in  'variable_oozing_prevent'
################################################################################

[gcode_macro SET_OOZING_PARAM]
description:  SET_OOZING_PARAM   EXTRUDER=extruder  DIFF_TEMP=10
gcode:
  
      {% set user_vars = printer["gcode_macro VARIABLE"] %}    
      {% set name = 'oozing_prevent' %}   
      {% set init = user_vars.oozing_prevent   %}     						                         
     
   {% for key in params %}       
          
         {% if key|lower =='extruder' %} 
              {% set extruder = params[key]|default('extruder')  %}
               
             {% if  params.DIFF_TEMP is defined  and extruder in  init.diff_temp %}             
                {% set _dummy = init.diff_temp.update( {extruder : params.DIFF_TEMP|int} )  %}
             {% endif%}    
  
        {% endif %}  
  {% endfor %}   
  
       ### update variable 'oozing_prevent'   
       SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name}  VALUE="{init}"  

     # {action_respond_info("variable_%s : %s" % (name,init))}
  
       
        
               
               