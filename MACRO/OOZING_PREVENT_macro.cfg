# This file contains a configuration snippet for Oozing prevent.
#
#
#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_oozing_prevent: { }      # e.g. 'diff_temp'{ 'extruder': 10.0, 'extruder1': 15.0 }
                                  #      'menu':'extruder'
                                  #      'enable': false

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _INIT_OOZING_PREVENT_PARAM]   
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %} 
 
 {% if user_vars.tool|length > 1 %}
 
      {% set name = "oozing_prevent" %}     # name variable     
      {% set init = { 'enable':false }  %}  # load act preset  
   
      ### init 'diff_temp' for extruder
      {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
           {% if 'extruder' in tool %} 
               ### define difference temperature
              {% set _dummy = init.update({ 'diff_temp': { tool:10.0 }})  if init.diff_temp is not defined  else  init.diff_temp.update({ tool:10.0 }) %}    
          {% endif %}
      {% endfor %}
      
      
       ### init variable for LCD menu 
      {% if printer.configfile.settings['menu __main __user __oozing'] is defined  %}  
         {% set _dummy =  init.update( { 'menu': 'extruder'} ) %}
     {% endif %} 

     {action_respond_info("Creating a list of variables for tool oozing param ") if printer.save_variables.variables.dump_list}

       
       ## update variable "oozing_prevent"
       SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE={name} VALUE="{init}"
     
     {% endif %}  

   
# ########################################################################## 
# ##                    OOZING PREVENT MANAGMENT                         ###
# ########################################################################## 
#
#
#
# for Prusa Slicer: 
#
# add start G-code: ( to end of block )
#  SET_OOZING_PREVENT  ENABLE=1
#
# add end G-code: (to beginning of block)
#  SET_OOZING_PREVENT  ENABLE=0
#
#
# ##########################################################################
   
[gcode_macro ACTIVATE_OOZING_PREVENT]
description: ACTIVATE_OOZING_PREVENT  ACTUAL=extruder  TARGET=extruder1
gcode:

    ###  params.EXTRUDER =[extruder|extruder1|extruder2|...] 
  
     {% set user_vars = printer["gcode_macro VARIABLE"] %}

  {% if user_vars.oozing_prevent.enable %} 
     {action_respond_info("Activate oozing prevent extruder.")} 
    
     {% set target_extruder = params.TARGET|lower %} 
     {% set target_tool = target_extruder.lstrip("extruder") if target_extruder.lstrip("extruder")|length != 0 else 0 %}      
     {% set new_target_temp = (printer[target_extruder].target + user_vars.oozing_prevent.diff_temp[target_extruder])|int %}
     
     
     {% set act_extruder = params.ACTUAL|lower %}
     {% set active_tool = act_extruder.lstrip("extruder") if act_extruder.lstrip("extruder")|length != 0 else 0 %} 
     {% set new_act_temp = (printer[act_extruder].target - user_vars.oozing_prevent.diff_temp[act_extruder])|int %}

      ### inactive extruders prevent oozing       
    
         ### cooling actual extruder 
          {% if printer[act_extruder].can_extrude | lower == 'true'  %}  ;  only when heated extruder
             M104  S{new_act_temp}   T{active_tool}                      ;    eg. 235  - 15
          {% endif %}              
    
         ###  heating target extruder    
          {% if printer[target_extruder].can_extrude | lower == 'true'  %}  ; only when heated extruder
             M104  S{new_target_temp}    T{target_tool}                    ;  eg. 225  + 10    
          {% endif %}

  {% else %}
      {action_respond_info("Oozing prevent is disabled.")} 
  {% endif %}

##########################################################################
[gcode_macro SET_OOZING_PREVENT]
description: SET_OOZING_PREVENT ENABLE=[0|1]
gcode:
      
    {% set user_vars = printer["gcode_macro VARIABLE"] %}   
     
    {% if 'gcode_macro ACTIVATE_OOZING_PREVENT' in  printer  and  user_vars.tool|length > 1  %}

      ### ENABLE=1 ...cooling / ENABLE=0 ...heating  - all inactive extruders
      {% set enable=params.ENABLE if params.ENABLE is defined and params.ENABLE|length !=0  else 2 %}  

      ### ignore command if oozing prevent is disabled
      {% if user_vars.oozing_prevent.enable|lower == 'false' and enable|int != 1 %}
          {action_respond_info("Oozing prevent is disabled.")} 

      {% else %}

        ### mode ... -1 = cooling / 1 = heating / 0 = ignore temp inactive extruders
        {% set  mode = -1 if enable|int == 1 
                   else 1 if enable|int == 0 
                   else 0  %}      

          ###  check for all available heaters 
          {% for tool in printer.heaters.available_heaters|sort %}    
             {% if 'extruder' in tool  !=  printer.toolhead.extruder %}  

              ### safety calc for 'min_extrude_temp'
               {% if  ((printer[tool].target + (user_vars.oozing_prevent.diff_temp[tool] *  mode))|int)  >=  ((printer.configfile.config[tool].min_extrude_temp)|int)  %}   
                {% set  _temp = (printer[tool].target + (user_vars.oozing_prevent.diff_temp[tool] *  mode))|int  %}
                {% set  _tool = tool.lstrip("extruder") if  tool.lstrip("extruder")|length != 0 else 0 %}
                   M104 S{_temp}  T{_tool} 
               {% endif %}    

            {% endif %}   
          {% endfor %}    

         ### update variable 'oozing_prevent'
         {% set init = printer["gcode_macro VARIABLE"].oozing_prevent %} 
         {% set _dummy = init.update( { 'enable': False  if enable|int == 0 else  True } ) %} 

          SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=oozing_prevent VALUE="{init}" 

      {% endif %}
    {% endif %}
            
################################################################################
# This macro allows the user to change the value in  'variable_oozing_prevent'
################################################################################

[gcode_macro SET_OOZING_PARAM]
description:  SET_OOZING_PARAM    EXTRUDER=extruder  DIFF_TEMP=10
gcode:
  
      {% set user_vars = printer["gcode_macro VARIABLE"] %}    
      {% set name = 'oozing_prevent' %}   
      {% set init = user_vars.oozing_prevent   %}     						                         
     
   {% for key in params %}       
          
         {% if key|lower =='extruder' %} 
             {% set extruder = params[key]|default('extruder')  %}
               
             {% if  params.DIFF_TEMP is defined  and extruder in  init.diff_temp %}             
                {% set _dummy = init.diff_temp.update( {extruder : params.DIFF_TEMP|int} )  %}
             {% endif%}    
  
         {% endif %}  
    {% endfor %}   
  
       ### update variable 'oozing_prevent'   
       SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name}  VALUE="{init}"  

     # {action_respond_info("variable_%s : %s" % (name,init))}
  
       
        
               
               