
##########################################################
# Define HW configuration in printer.cfg
#
# X1 print cooling fan  define  [fan_generic fan]
# X2 print cooling fan  define  [fan_generic fan1]
# Other FANs define :           [fan_generic fan2] 
#                               [fan_generic fan3]
#                               [fan_generic fan4]
#                               etc.
##########################################################

#####################################################################
# All variables in this configuration, KLIPPER merges
# into one configuration  file [gcode_macro VARIABLE] .
#
# ATTENTION:
# If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_fan : { } 
# e.g.  {'active': 0, 'index': ['fan', 'fan1'] , 'menu': True }

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _INIT_FAN_GENERIC]
gcode: 

 {% set user_vars = printer["gcode_macro VARIABLE"] %} 

 {% set var_fan = { 'menu': False } %}
 {% set ns = namespace(menu=0|int) %}
 
 {% for object in printer.configfile.config|sort %}
    {% if 'fan_generic' is in object %} 
 
      {% if var_fan.index is not defined %}             
       {% set _dummy = var_fan.update( {'index': [ ]} ) %}
      {% endif %} 
    
     {% set _dummy = var_fan.index.append(object.split(' ')[1]) %}
     {% set _dummy = var_fan.update({'active': 0 }) %}
     {% set ns.menu = 1 %}
    {% endif %}
  {% endfor %}  
  
 {% if ns.menu == 1 %}
  {% set _dummy = var_fan.update( { 'menu': True } ) %}  
 {% endif %}
   
  
 SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=fan VALUE="{var_fan}"
 {action_respond_info("Creating a list of variables for FANs ")}


##########################################################
# PRINTER FANS MANAGEMENT
# Redefine G-code command M106 and M107 
##########################################################

[gcode_macro M106]
description: Override "M106" to allow multiple extruders.
gcode:

   
    {% set user_vars = printer["gcode_macro VARIABLE"] %} 
    
    {% set raw_speed = params.S|default(255)|float %}
    {% set fan_speed = (raw_speed / 255.0)|round(2) %} 

    {% if (params.P) is defined %}  
      {% set target_fan = params.P|int %}     
      {% set default_fan = user_vars.fan.index[target_fan] %}  
       SET_FAN_SPEED FAN={default_fan} SPEED={fan_speed}
    {% else %}
       {% if printer.dual_carriage is defined  %}   
        ### carriages print cooling FAN   
        CARRIAGE_PRINT_FAN SPEED={fan_speed}     
       {% else %}
         {% set default_fan = user_vars.fan.index[0] %} 
         SET_FAN_SPEED FAN={default_fan} SPEED={fan_speed}
       {% endif %}
    {% endif %}


#=============================================================== 


[gcode_macro M107]
description: Override "M107" to allow multiple extruders.
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %} 
  
    {% if (params.P) is defined %} 
      M106 S0 P{params.P}
    {% else %}
      ### All Fans OFF  
      {% for fan in user_vars.fan.index|sort %} 
         SET_FAN_SPEED FAN={fan} SPEED=0   
      {% endfor %}
    {% endif %}
  
#===============================================================
 
[gcode_macro CARRIAGE_PRINT_FAN]
description: Set automatically the print fan speed for dual carriages modes 

gcode:
     {% set user_vars = printer["gcode_macro VARIABLE"] %}      
     
    ### FAN speed  
    {% if params.SPEED is defined %}
        {% set fan_speed = params.SPEED|float %}
    {% else %}
        ### read print fan speed from active carriage/extruder        
        {% set fan_speed = printer["fan_generic " + user_vars.fan.index[0]].speed|float %}
        {% set fan1_speed = printer["fan_generic " + user_vars.fan.index[1]].speed|float %}
        {% set fan_speed = [fan_speed, fan1_speed]|max %}
    {% endif %}

  
### ==========  for Cartesian Kinematics  =============================

    ### Active FAN for carriage      
    # {% set active_toolhead =({'extruder':0,'extruder1':1,'extruder2':2,'extruder3':3})[printer['toolhead'].extruder] %}   
    # {% set user_vars = printer["gcode_macro VARIABLE"] %}  

    # {% if user_vars.mode_605 in [2,3] %}
    {% if printer['dual_carriage'].mode != "FULL_CONTROL" %}  ###   Tircown testet 
        ### Duplication, Mirrored mode    
        SET_FAN_SPEED FAN={user_vars.fan.index[0]} SPEED={fan_speed}
        SET_FAN_SPEED FAN={user_vars.fan.index[1]} SPEED={fan_speed} 
    
    # {% elif active_toolhead in [0] %}    ### IDEX define       
    # {% elif active_toolhead in [0,1] %}  ### 4EX2 define
     {% elif printer.dual_carriage.active_carriage == "CARRIAGE_0" %}  ###   for hybrid_corexy or hybrid_corexz Kinematics
   
        ### FAN on carriage X1       
        SET_FAN_SPEED FAN={user_vars.fan.index[0]} SPEED={fan_speed}
        SET_FAN_SPEED FAN={user_vars.fan.index[1]} SPEED=0

    # {% elif active_toolhead in [1] %}    ### IDEX define      
    # {% elif active_toolhead in [2,3] %}  ### 4EX2 define
     {% elif printer.dual_carriage.active_carriage == "CARRIAGE_1" %}  ###   for hybrid_corexy or hybrid_corexz Kinematics
   
        ### FAN on carriage X2        
        SET_FAN_SPEED FAN={user_vars.fan.index[0]} SPEED=0
        SET_FAN_SPEED FAN={user_vars.fan.index[1]} SPEED={fan_speed}
     {% endif %}





