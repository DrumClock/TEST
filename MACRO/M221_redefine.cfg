# This file contains a configuration snippet for G-code M221 Txx 
#
# See docs/Config_Reference.md for a description of parameters.


#####################################################################
# All variables in this configuration, KLIPPER merges
# into one configuration  file [gcode_macro VARIABLE] .
#
# ATTENTION:
# If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_extrude_factor: {  }     # { 'extruder': 1.0, 'extruder1': 1.0  }


#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

 

[gcode_macro _INIT_EXTRUDE_FACTOR]
gcode:
    
   {% set user_vars = printer["gcode_macro VARIABLE"] %}  
   {% set extrude_factor = user_vars.extrude_factor %}

   {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
       {% if 'extruder' in tool  %} 
          ### update variable 'extrude_factor' 
          {% set _dummy = extrude_factor.update( {tool:1.0} ) %}  
       {% endif %}
   {% endfor %} 

    SET_GCODE_VARIABLE MACRO=VARIABLE   VARIABLE=extrude_factor   VALUE="{extrude_factor}"   
   {action_respond_info("Creating a list of variables for macro M221 ")}

##########################################################
# PRINTER EXTRUDE FACTOR MANAGEMENT
# Redefine G-code command M221 
# Function description: 
##########################################################
#
# M221           - view extrude factor for all tool
# M221 S105      - set extrude factor to 105% for all tool 
# M221 S80 T0    - set extrude factor for tool T0 to 80% 
#
##########################################################

[gcode_macro M221]
rename_existing: M221.1
description: Extension "M221" by "T" for 4 extruders

gcode:

    ### reset printer['gcode_move'].extrude_factor to 100%   
      M221.1  S100
    
    ### params.S = <percentage>   
    ### params.T = [0|1|2|3] 
    {% set user_vars = printer["gcode_macro VARIABLE"] %}
    
    {% set raw_flow = params.S|default(100)|int %}   
    {% set extrude_flow = (raw_flow /100)|round(2) %}       
     
               
     {%  if  params.T is not defined  %}
           {% if  params.S is not defined %} 
                    ### view extrude factor for all tool
                    {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
                        {% if 'extruder' in tool %} 
                            {% set flow  = user_vars.extrude_factor[tool|string] * 100 %}                        
                            {action_respond_info("Flow for %s set to %s percent." % (tool, flow|int )) }
                        {% endif %}              
                    {% endfor %}     
            {% else %}        
                    ### set extrude factor for all tool 
                   {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
                        {% if 'extruder' in tool  %} 
                            ### update variable 'extrude_factor' 
                            {% set _dummy =user_vars. extrude_factor.update({tool: extrude_flow }) %}
                            SET_GCODE_VARIABLE MACRO=VARIABLE   VARIABLE=extrude_factor   VALUE="{user_vars.extrude_factor}"  
                         {% endif %}
                    {% endfor %} 

                    ### reset rotation distance for 'active tool'   
                    _SET_ROTATION_DISTANCE  TOOL={user_vars.active_tool}
             {% endif %} 
       {% else %}
                    ### set extrude factor for tool Txx
                    {% if params.T is  defined   and  user_vars.default_t_extruder|length  <  (params.T|int) + 1%}
                        {action_respond_info("The tool T%s is not defined for extrude factoror." % (params.T)) } 
                    {% else %}
                        {% set default_extruder =  user_vars.default_t_extruder[params.T|int] %}   #  default_t_extruder={0:'extruder', 1:'extruder1', 2:'extruder2', 3:'extruder3'}
                          
                        ### update variable 'extrude_factor' 
                        {% set _dummy = user_vars.extrude_factor.update({default_extruder: extrude_flow}) %}
                        SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=extrude_factor  VALUE="{user_vars.extrude_factor}"
                        
                        ### set new rotation distance for Txx
                        _SET_ROTATION_DISTANCE  TOOL={params.T}
                   {% endif %}      
      {% endif %}

 
##########################################################

[gcode_macro _SET_ROTATION_DISTANCE]

gcode:
       
        ### params.T = [0|1|2|3] 
      {% set user_vars = printer["gcode_macro VARIABLE"] %}
      
      {% set default_extruder =  user_vars.default_t_extruder[params.TOOL|int] %}   #  default_t_extruder= {0:'extruder', 1:'extruder1', 2:'extruder2', 3:'extruder3'}
      {% set extrude_flow  = user_vars.extrude_factor[default_extruder]%}               # extrude_factor = {'extruder3': 1.0, 'extruder1': 1.0, 'extruder2': 1.0, 'extruder': 1.0}
       
         ### set new rotation_distance 
        {% if printer.configfile.settings[default_extruder].rotation_distance is defined %}
          {% set settings_rotation = ( printer.configfile.settings[default_extruder].rotation_distance  /  extrude_flow )  %}              
          {% set set_extruder = default_extruder %}  

        {% elif printer['gcode_macro SWITCHING_EXTRUDER'] is defined %}      
              {% set sync_extruder =  user_vars.switching_extruder[default_extruder] %}  # switching_extruder={'extruder1': 'extruder', 'extruder3': 'extruder2'}
              {% set settings_rotation =( printer.configfile.settings[sync_extruder].rotation_distance * -1)  /  extrude_flow %}
              {% set set_extruder = sync_extruder %}
        {% endif %}    

        
         ### set new rotation distance extruder in IDEX - mode
        {% if printer['dual_carriage'].mode != "FULL_CONTROL" %}  ###   Tircown testet  
             _SYNC_ROTATION_DISTANCE          
         ### set if extruder ist active in toolhead    
        {% elif printer['toolhead'].extruder == default_extruder %}
            SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER={set_extruder} DISTANCE={settings_rotation}       
        {% endif %} 
        
 ##########################################################       
        
[gcode_macro _SYNC_ROTATION_DISTANCE]
gcode:  

     {% set user_vars = printer["gcode_macro VARIABLE"] %}       

     
     {% for tool in user_vars.active_sync_tool %}     
             {% set default_extruder =   user_vars.active_sync_tool[tool] %}       # active_sync_tool: { 0:'extruder', 1: 'extruder2'  }
             {% set extrude_flow  = user_vars.extrude_factor[default_extruder] %}  # extrude_factor = {'extruder3': 1.0, 'extruder1': 1.0, 'extruder2': 1.0, 'extruder': 1.0}
       
            ### set new rotation_distance 
            {% if printer.configfile.settings[default_extruder].rotation_distance is defined %}
                {% set settings_rotation = ( printer.configfile.settings[default_extruder].rotation_distance  /  extrude_flow )  %}              
            {% set set_extruder = default_extruder%}  

            {% elif printer['gcode_macro SWITCHING_EXTRUDER'] is defined %}      
                {% set sync_extruder =  user_vars.switching_extruder[default_extruder] %}  # switching_extruder={'extruder1': 'extruder', 'extruder3': 'extruder2'}
                {% set settings_rotation =( printer.configfile.settings[sync_extruder].rotation_distance * -1)  /  extrude_flow %}
                {% set set_extruder = sync_extruder %}
            {% endif %}    

        SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER={set_extruder} DISTANCE={settings_rotation}       
     
    {% endfor %}
  
  
  
       