# This file contains a configuration snippet for dual dantry for extruder
# printer using "dualgantry_cartesian.py" from Tircown
#

##########################################################
# Define HW configuration in printer.cfg
# add for dual-gantry 
#####################################################################

# [printer] 
# kinematics: dualgantry_cartesian 
#
# first gantry 
# [stepper_x] 
# [stepper_y]
#
# second gantry
# [stepper_u]    # second x 
# [stepper_v]    # second y

#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_dual_gantry: { } 

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################
  
[gcode_macro _INIT_DUAL_GANTRY]
gcode:

 {% set user_vars = printer["gcode_macro VARIABLE"] %} 
  {% set name = "dual_gantry" %}            # name variable
  {% set init = {'enable' : False } %}      # default preset

 {% if printer.configfile.settings['printer'].kinematics == 'dualgantry_cartesian' %}   

   {% set endstop_x =  (printer.configfile.config[('stepper_x')].position_endstop )|int %}
   {% set endstop_y =  (printer.configfile.config[('stepper_y')].position_endstop )|int %}
   {% set endstop_u =  (printer.configfile.config[('stepper_u')].position_endstop )|int %}
   {% set endstop_v =  (printer.configfile.config[('stepper_v')].position_endstop )|int %}

   ### Updates the dictionary with the specified key-value pairs
   {% set _dummy = init.update( {'enable' : True , 'feedrate': 30000} ) %}   
   {% set _dummy = init.update(  {'parking': { 0: [endstop_x, endstop_y], 1:[endstop_u, endstop_v]} } ) %}
   
   {action_respond_info("Creating a list of variables for dual_gantry")}

 {% endif %}
 
  ### update variable
  SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"   


#####################################################################
# PRINTER ACTIVATE_DUAL_GANTRY MANAGEMENT
# Function description: 
#####################################################################

[gcode_macro ACTIVATE_GANTRY]  
description: Activate gantry 
gcode:
 
   {% set user_vars = printer["gcode_macro VARIABLE"] %}    
   {% set act_gantry = printer.toolhead.dual_carriage.active_carriages[0] %}
   
  ### activate GANTRY   

    PARK_GANTRY   
    SET_DUAL_CARRIAGE CARRIAGE={0 if act_gantry == 1 else 1 } 
    CHANGE_GANTRY

    
####################################################################

[gcode_macro PARK_GANTRY]
description: Park the active gantry.
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %}  
  {% set act_gantry = printer.toolhead.dual_carriage.active_carriages[0] %}

   ### Reset activate tool Offsets  
    SET_GCODE_OFFSET X=0 Y=0 Z=0	    
   {%  set x_pos = printer.gcode_move.gcode_position.x %}
   {%  set y_pos = printer.gcode_move.gcode_position.y %}
   {%  set z_pos = printer.gcode_move.gcode_position.z %}
   
   ### create variable 'gcode_position'
    {% set gcode_position = user_vars.dual_gantry %}
    {% set _dummy = gcode_position.update( {'gcode_position':{ 'x': x_pos|float, 'y': y_pos|float , 'z': z_pos|float }}  ) %}
    SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=dual_gantry  VALUE="{gcode_position}" 
  	    
    ### parking the active gantry to endstop position 
    G1 X{user_vars.dual_gantry.parking[act_gantry][0]} Y{user_vars.dual_gantry.parking[act_gantry][1]} F{user_vars.dual_gantry.feedrate} 

  
####################################################################

[gcode_macro CHANGE_GANTRY]
description: Change the new gantry.
gcode:
  
  {% set user_vars = printer["gcode_macro VARIABLE"] %}   
      
    ### restore position befor park carrige  
   {%  set gcode_position = user_vars.dual_gantry.gcode_position %}
   {%  set x_pos = gcode_position.x  %}
   {%  set y_pos = gcode_position.y  %}
   {%  set z_pos = gcode_position.z  %}
       G1 X{x_pos|string} Y{y_pos|string} Z{z_pos|string} F{user_vars.dual_gantry.feedrate}    

   ### delete variable  'gcode_position'
   {% set gcode_position = user_vars.dual_gantry %}
   {% set _dummy = gcode_position.pop( 'gcode_position' ) %}
      SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=dual_gantry VALUE="{gcode_position}" 
  












          

