 
###############################################################
#         Define LCD menu  "Tune / Flow  / Multiextruder 
###############################################################
# Main
# ...
#   + Tune
#       + Flow: 000%

# >>>>>>>>>>  if redefine "gcode_macro M221" in printer   <<<<<<<<<<<<<

# Main
# ...
#   + Tune
#       + Tool Flow Set
#         + Flow Ex0: 000%
#         + Flow Ex1: 000%
#         + Flow Ex2: 000%
#         + Flow Ex3: 000%
#         + Reset All-Flow  (100%)
##


### standard menu flow ###
[menu __main __tune __flow]
type: input
index: 1
enable: { 'gcode_macro M221' not in printer } 
name: Flow: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.extrude_factor}
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
   M221 S{'%d' % (menu.input*100)}

 

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

### menu multi-extruder flow ###
[menu __main __tune __flowtool]
type: list
index: 1
enable: { 'gcode_macro M221' in  printer }     
name: Tool Flow Set

#-------------------------------------------------------------

### menu set flow tool T0 ###
[menu  __main __tune __flowtool __extruder]
type: input
enable: {'extruder' in printer}
index: 0
name: Flow ~extruder0~: {'%3d' % (menu.input*100)}% 
input: {printer["gcode_macro VARIABLE"].extrude_factor['extruder']} 
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
        
     {% set user_vars = printer["gcode_macro VARIABLE"] %}
      
      {% set default_extruder =  'extruder'  %}
      {% set extrude_flow  = menu.input %}              
       
         ### set new rotation_distance 
        {% if printer.configfile.settings[default_extruder].rotation_distance is defined %}
          {% set settings_rotation = ( printer.configfile.settings[default_extruder].rotation_distance  /  extrude_flow )  %}              
          {% set set_extruder = default_extruder %}  
        {% elif printer['gcode_macro SWITCHING_EXTRUDER'] is defined %}      
              {% set sync_extruder =  user_vars.switching_extruder[default_extruder] %}  # switching_extruder={'extruder1': 'extruder', 'extruder3': 'extruder2'}
              {% set settings_rotation =( printer.configfile.settings[sync_extruder].rotation_distance * -1)  /  extrude_flow %}
              {% set set_extruder = sync_extruder %}
        {% endif %}    

        ### update variable 'extrude_factor' 
        {% set _dummy = user_vars.extrude_factor.update({default_extruder: extrude_flow}) %}
         SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=extrude_factor  VALUE="{user_vars.extrude_factor}"

        ### set flow  
         SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER={set_extruder} DISTANCE={settings_rotation}   


#-------------------------------------------------------------
    
### menu set flow tool T1 ###
[menu  __main __tune __flowtool __extruder1]
type: input
enable: {'extruder1' in printer}
index: 1
name: Flow ~extruder1~: {'%3d' % (menu.input*100)}%
input: {printer["gcode_macro VARIABLE"].extrude_factor['extruder1']} 
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
    
   {% set user_vars = printer["gcode_macro VARIABLE"] %}
      
      {% set default_extruder =  'extruder1'  %}
      {% set extrude_flow  = menu.input %}              
       
         ### set new rotation_distance 
        {% if printer.configfile.settings[default_extruder].rotation_distance is defined %}
          {% set settings_rotation = ( printer.configfile.settings[default_extruder].rotation_distance  /  extrude_flow )  %}              
          {% set set_extruder = default_extruder %}  
        {% elif printer['gcode_macro SWITCHING_EXTRUDER'] is defined %}      
              {% set sync_extruder =  user_vars.switching_extruder[default_extruder] %}  # switching_extruder={'extruder1': 'extruder', 'extruder3': 'extruder2'}
              {% set settings_rotation =( printer.configfile.settings[sync_extruder].rotation_distance * -1)  /  extrude_flow %}
              {% set set_extruder = sync_extruder %}
        {% endif %}    

        ### update variable 'extrude_factor' 
        {% set _dummy = user_vars.extrude_factor.update({default_extruder: extrude_flow}) %}
         SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=extrude_factor  VALUE="{user_vars.extrude_factor}"

        ### set flow  
         SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER={set_extruder} DISTANCE={settings_rotation}   

#-------------------------------------------------------------

### menu set flow tool T2 ###
[menu  __main __tune __flowtool __extruder2]
type: input
enable: {'extruder2' in printer}
index: 2
name: Flow ~extruder2~: {'%3d' % (menu.input*100)}%
input: {printer["gcode_macro VARIABLE"].extrude_factor['extruder2']} 
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
    
  {% set user_vars = printer["gcode_macro VARIABLE"] %}
      
      {% set default_extruder =  'extruder2'  %}
      {% set extrude_flow  = menu.input %}              
       
         ### set new rotation_distance 
        {% if printer.configfile.settings[default_extruder].rotation_distance is defined %}
          {% set settings_rotation = ( printer.configfile.settings[default_extruder].rotation_distance  /  extrude_flow )  %}              
          {% set set_extruder = default_extruder %}  
        {% elif printer['gcode_macro SWITCHING_EXTRUDER'] is defined %}      
              {% set sync_extruder =  user_vars.switching_extruder[default_extruder] %}  # switching_extruder={'extruder1': 'extruder', 'extruder3': 'extruder2'}
              {% set settings_rotation =( printer.configfile.settings[sync_extruder].rotation_distance * -1)  /  extrude_flow %}
              {% set set_extruder = sync_extruder %}
        {% endif %}    

        ### update variable 'extrude_factor' 
        {% set _dummy = user_vars.extrude_factor.update({default_extruder: extrude_flow}) %}
         SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=extrude_factor  VALUE="{user_vars.extrude_factor}"

        ### set flow  
         SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER={set_extruder} DISTANCE={settings_rotation}   

#-------------------------------------------------------------

### menu set flow tool T3 ###
[menu  __main __tune __flowtool __extruder3]
type: input
enable: {'extruder3' in printer}
index: 3
name: Flow ~extruder3~: {'%3d' % (menu.input*100)}%
input: {printer["gcode_macro VARIABLE"].extrude_factor['extruder3']} 
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
   
      {% set user_vars = printer["gcode_macro VARIABLE"] %}
      
      {% set default_extruder =  'extruder3'  %}
      {% set extrude_flow  = menu.input %}              
       
         ### set new rotation_distance 
        {% if printer.configfile.settings[default_extruder].rotation_distance is defined %}
          {% set settings_rotation = ( printer.configfile.settings[default_extruder].rotation_distance  /  extrude_flow )  %}              
          {% set set_extruder = default_extruder %}  
        {% elif printer['gcode_macro SWITCHING_EXTRUDER'] is defined %}      
              {% set sync_extruder =  user_vars.switching_extruder[default_extruder] %}  # switching_extruder={'extruder1': 'extruder', 'extruder3': 'extruder2'}
              {% set settings_rotation =( printer.configfile.settings[sync_extruder].rotation_distance * -1)  /  extrude_flow %}
              {% set set_extruder = sync_extruder %}
        {% endif %}    

        ### update variable 'extrude_factor' 
        {% set _dummy = user_vars.extrude_factor.update({default_extruder: extrude_flow}) %}
         SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=extrude_factor  VALUE="{user_vars.extrude_factor}"

        ### set flow  
         SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER={set_extruder} DISTANCE={settings_rotation}   

 
#-------------------------------------------------------------

### menu reset all flow tool ###
[menu __main __tune __flowtool __reset]
type: command
index: 4
name:  Reset All-Flow 
gcode:
    
  {% set user_vars = printer["gcode_macro VARIABLE"] %}

   ### reset extrude factor for all tool 
     {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
         {% if 'extruder' in tool  %} 
            ### update variable 'extrude_factor' 
             {% set _dummy =user_vars. extrude_factor.update({tool: 1.0 }) %}
              SET_GCODE_VARIABLE MACRO=VARIABLE   VARIABLE=extrude_factor   VALUE="{user_vars.extrude_factor}"  
            ### reset rotation_distance 
            {% if printer.configfile.settings[tool].rotation_distance is defined %}
              {% set rotation = ( printer.configfile.settings[tool].rotation_distance )  %}   
              ### define for 4EX2 printer
              {% if 'gcode_macro SYNC_SWITCHING_TOOL' in printer  %}
                 {% set sync_tool = -1 if user_vars.sync_switching_tool.active == 'T1' else 1 %}
              {% endif %}               
              SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER={tool} DISTANCE={rotation * sync_tool }   
           {% endif %}            
         {% endif %}
     {% endfor %} 



     
     
        
