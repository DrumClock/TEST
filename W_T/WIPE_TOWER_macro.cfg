#####################################################################
# All variables in this configuration, KLIPPER merges
# into one configuration  file [gcode_macro VARIABLE] .
#
# ATTENTION:
# If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_tower: { }   

# e.g. variable_tower: {
#                       'tool': {0: {'nozzle': 0.4, 'z': 0.0}, 1: {'nozzle': 0.6, 'z': 0.0}},
#                       'enable': False, 
#                       'change': True,
#                       'pos': {'y': 200.0, 'x': 200.0}, 
#                       'gap': {'y': 40, 'x': 50} 
#                      }

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################


[gcode_macro _INIT_WIPE_TOWER]
gcode:

 {% set user_vars = printer["gcode_macro VARIABLE"] %}

 {% if user_vars.default_t_extruder|length > 1 %}

   ### default 'variable'
     {% set tower = { 'enable': False, 'change': True, 'tool':{ }, 'pos':{ }, 'gap':{ } } %}

  ### update default position 'x','y' for wipe tower
      {% set _dummy = tower.pos.update({'x':200.0, 'y':200.0}) %}  
  ### update gap between wipe tower nad print
       {% set _dummy = tower.gap.update({'x':50, 'y':40}) %}     
  ### update 'tool' 
     {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
        {% if 'extruder' in tool %}      
            {% set tool_nr = tool.lstrip("extruder") if tool.lstrip("extruder")|length != 0 else 0 %}
            {% set _dummy = tower.tool.update({ tool_nr|int:{'z':0.0|float , 'nozzle': printer.configfile.settings[tool].nozzle_diameter }}) %}                 
        {% endif %}
      {% endfor %}

  ### create variable 'tower'  
    SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE=tower  VALUE="{tower}"     

   {action_respond_info("Creating a list of variables for wipe tower")}   
         
 {% endif %}

########################################################################### 
###                    WIPE TOWER MANAGMENT                             ###
########################################################################### 

#
# for Prusa Slicer: 
#
# add start G-code:
# SET_AREA_WIPE_TOWER MID_X={(first_layer_print_max[0]+first_layer_print_min[0]) /2 } MAX_Y={first_layer_print_max[1]}  BED_MAX={print_bed_size[0]},{print_bed_size[1]}
#
# add end G-code:
# RESET_AREA_WIPE_TOWER
#
#

########################################################################

[gcode_macro SET_AREA_WIPE_TOWER]
description: settings area from slicer gcode command
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %}

 {% if user_vars.tower.change %}

   ### e.g. SET_AREA_WIPE_TOWER MID_X=60 MAX_Y=70 BED_MAX=330,330 
   
   {% set bed_size_x_max = params.BED_MAX.split(",")[0]|float %}
   {% set bed_size_y_max = params.BED_MAX.split(",")[1]|float %}
   
   {% set area_mid_x  = params.MID_X|float %}
   {% set area_max_y  = params.MAX_Y|float %}   
   
   {% set new_pos_x = area_mid_x %}
   {% set new_pos_y = area_max_y + (user_vars.tower.gap.y) %}

  ### safety test - area wipe tower     
   {% set enable = False %}
   
   {%  if new_pos_x > bed_size_x_max - user_vars.tower.gap.x %}   ## out of bed - x_max     
   {% elif new_pos_x < user_vars.tower.gap.x %}              ## out of bed - x_min
   {% elif new_pos_y > bed_size_y_max - user_vars.tower.gap.y %}   ## out of bed - y_max   
   {% else %}
     {% set enable = True %}
   {% endif %}  
   
  
   ### update variable 'tower'
   {% set tower_variable = printer["gcode_macro VARIABLE"].tower %}
   
   {% if enable %}
   {% set _dummy = tower_variable.update( { 'enable': True, 'change': False } ) %} 
   {% set _dummy = tower_variable.pos.update( { 'x': new_pos_x, 'y': new_pos_y} ) %} 
    ### reset variable'tool' 
     {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
        {% if 'extruder' in tool %}      
            {% set tool_nr = tool.lstrip("extruder") if tool.lstrip("extruder")|length != 0 else 0 %}
            {% set _dummy = tower_variable.tool.update({ tool_nr|int:{'z':0.0, 'nozzle': printer.configfile.settings[tool].nozzle_diameter }}) %}                 
        {% endif %}
      {% endfor %}
      
       {action_respond_info("Settings wipe tower position. - X:%s  Y:%s" % ( new_pos_x, new_pos_y))}

  {% else %}
     {% set _dummy = tower_variable.update( {'enable': False, 'change': True } ) %}   
     {action_respond_info(" Wipe tower cannot be placed - X:%s Y:%s  out of bed position !" % (new_pos_x, new_pos_y) )}
   
   {% endif %}

   SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=tower VALUE="{tower_variable}" 

  {% else %}
    {action_respond_info(" Settings are not possible - option already set - ")}
  {% endif %}
     
    # {action_respond_info(" variable_tower = %s" % user_vars.tower)}  

########################################################################

[gcode_macro RESET_AREA_WIPE_TOWER]
description: reset to default settings 
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %}
  
 ### reset variable 'tower'
   {action_respond_info("Reset to default settings wipe tower variables.")}          
     _INIT_WIPE_TOWER


########################################################################

[gcode_macro PRINT_WIPE_TOWER]
description: 
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %}
  {% set active_tool = user_vars.active_tool %}

###  mode safety test       
 {% if user_vars.tower.enable %} 
   {action_respond_info("Start printing the wipe tower.")}     
    
### set wipe tower position XY for tool
   {% if active_tool == 0 %}
    {% set wipe_x_pos = user_vars.tower.pos.x - (user_vars.tower.gap.x/2) %} 
   {% elif active_tool == 1 %}
    {% set wipe_x_pos = user_vars.tower.pos.x + (user_vars.tower.gap.x/2) %} 
   {% endif %}

     # {action_respond_info(" X:%s  Y:%s" % (wipe_x_pos, user_vars.tower.pos.y))}    

    G1 X{wipe_x_pos} Y{user_vars.tower.pos.y} F60000 
    SAVE_GCODE_STATE name=regeneration_tower   

### set absolute position    
    M83
    G92 X0 Y0 E0

### wipe tower 20x20 mm for define 'nozzle' and layer height 0.2 mm
      {% set new_z = (user_vars.tower.tool[active_tool].z|float + 0.200|float)|round(3) %}      
      {% set nozzle = (user_vars.tower.tool[active_tool].nozzle * 1000)|int  %}         # e.g. 400 = 0,4mm nozzle
       # {action_respond_info("new_z = %s   nozzle= %s" % (new_z,nozzle))}
        _TOWER_NOZZLE_{nozzle} LAYER={new_z}


### restore absolute position
  G1 X0 Y0 
  G1  E-1.5 F2700
  RESTORE_GCODE_STATE name=regeneration_tower MOVE=1   
  
    
   ### update last tower Z-position variables
    {% set tower_variable = printer["gcode_macro VARIABLE"].tower %}    
    {% set _dummy = tower_variable.tool[active_tool].update( { 'z': new_z }) %}   
     
     SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=tower  VALUE="{tower_variable}" 
    
   {action_respond_info("Regeneration tower printing completed.")}
  
 {% endif %}  ### mode safety test


